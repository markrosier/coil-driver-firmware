
coil-driver-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002448  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000013c  20000000  00002448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000025c  2000013c  00002584  0002013c  2**2
                  ALLOC
  3 .stack        00001000  20000398  000027e0  0002013c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
  6 .debug_info   000329dd  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003abb  00000000  00000000  00052b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f550  00000000  00000000  00056655  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c00  00000000  00000000  00065ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001278  00000000  00000000  000667a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001925c  00000000  00000000  00067a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001218b  00000000  00000000  00080c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00081c7b  00000000  00000000  00092e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e00  00000000  00000000  00114a80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 13 00 20 25 01 00 00 21 01 00 00 21 01 00 00     ... %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	c1 11 00 00 21 01 00 00 21 01 00 00 21 01 00 00     ....!...!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 14 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      7c:	6d 19 00 00 81 19 00 00 95 19 00 00 a9 1c 00 00     m...............
      8c:	bd 1c 00 00 d1 1c 00 00 00 00 00 00 00 00 00 00     ................
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000013c 	.word	0x2000013c
      d4:	00000000 	.word	0x00000000
      d8:	00002448 	.word	0x00002448

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000140 	.word	0x20000140
     108:	00002448 	.word	0x00002448
     10c:	00002448 	.word	0x00002448
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000005d5 	.word	0x000005d5

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	00002448 	.word	0x00002448
     1d4:	20000000 	.word	0x20000000
     1d8:	2000013c 	.word	0x2000013c
     1dc:	20000004 	.word	0x20000004
     1e0:	2000013c 	.word	0x2000013c
     1e4:	20000398 	.word	0x20000398
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	0000228d 	.word	0x0000228d
     204:	00001f65 	.word	0x00001f65

00000208 <I2C_0_PORT_init>:
struct pwm_descriptor PWM_0;

struct wdt_descriptor WDT_0;

void I2C_0_PORT_init(void)
{
     208:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     20a:	4b12      	ldr	r3, [pc, #72]	; (254 <I2C_0_PORT_init+0x4c>)
     20c:	2050      	movs	r0, #80	; 0x50
     20e:	5c19      	ldrb	r1, [r3, r0]
     210:	2204      	movs	r2, #4
     212:	4391      	bics	r1, r2
     214:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     216:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     218:	2501      	movs	r5, #1
     21a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     21c:	2401      	movs	r4, #1
     21e:	4321      	orrs	r1, r4
     220:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     222:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     224:	3818      	subs	r0, #24
     226:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     228:	260f      	movs	r6, #15
     22a:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     22c:	3e0d      	subs	r6, #13
     22e:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     230:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     232:	2151      	movs	r1, #81	; 0x51
     234:	5c5e      	ldrb	r6, [r3, r1]
     236:	4396      	bics	r6, r2
     238:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     23a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23e:	4322      	orrs	r2, r4
     240:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     242:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     244:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     246:	3942      	subs	r1, #66	; 0x42
     248:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     24a:	3111      	adds	r1, #17
     24c:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     24e:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SCL, PINMUX_PA17C_SERCOM1_PAD1);
}
     250:	bd70      	pop	{r4, r5, r6, pc}
     252:	46c0      	nop			; (mov r8, r8)
     254:	41004400 	.word	0x41004400

00000258 <I2C_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     258:	4a05      	ldr	r2, [pc, #20]	; (270 <I2C_0_CLOCK_init+0x18>)
     25a:	6a13      	ldr	r3, [r2, #32]
     25c:	2108      	movs	r1, #8
     25e:	430b      	orrs	r3, r1
     260:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     262:	4b04      	ldr	r3, [pc, #16]	; (274 <I2C_0_CLOCK_init+0x1c>)
     264:	4a04      	ldr	r2, [pc, #16]	; (278 <I2C_0_CLOCK_init+0x20>)
     266:	805a      	strh	r2, [r3, #2]
     268:	4a04      	ldr	r2, [pc, #16]	; (27c <I2C_0_CLOCK_init+0x24>)
     26a:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	_gclk_enable_channel(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
}
     26c:	4770      	bx	lr
     26e:	46c0      	nop			; (mov r8, r8)
     270:	40000400 	.word	0x40000400
     274:	40000c00 	.word	0x40000c00
     278:	00004015 	.word	0x00004015
     27c:	00004113 	.word	0x00004113

00000280 <I2C_0_init>:

void I2C_0_init(void)
{
     280:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <I2C_0_init+0x18>)
     284:	4798      	blx	r3
	i2c_s_async_init(&I2C_0, SERCOM1, SERCOM1_i2c_s_buffer, SERCOM1_I2CS_BUFFER_SIZE);
     286:	2310      	movs	r3, #16
     288:	4a04      	ldr	r2, [pc, #16]	; (29c <I2C_0_init+0x1c>)
     28a:	4905      	ldr	r1, [pc, #20]	; (2a0 <I2C_0_init+0x20>)
     28c:	4805      	ldr	r0, [pc, #20]	; (2a4 <I2C_0_init+0x24>)
     28e:	4c06      	ldr	r4, [pc, #24]	; (2a8 <I2C_0_init+0x28>)
     290:	47a0      	blx	r4
	I2C_0_PORT_init();
     292:	4b06      	ldr	r3, [pc, #24]	; (2ac <I2C_0_init+0x2c>)
     294:	4798      	blx	r3
}
     296:	bd10      	pop	{r4, pc}
     298:	00000259 	.word	0x00000259
     29c:	20000254 	.word	0x20000254
     2a0:	42000c00 	.word	0x42000c00
     2a4:	20000284 	.word	0x20000284
     2a8:	00000a11 	.word	0x00000a11
     2ac:	00000209 	.word	0x00000209

000002b0 <PWM_2_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b0:	4a07      	ldr	r2, [pc, #28]	; (2d0 <PWM_2_PORT_init+0x20>)
     2b2:	214f      	movs	r1, #79	; 0x4f
     2b4:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b6:	2001      	movs	r0, #1
     2b8:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ba:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2bc:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2be:	3918      	subs	r1, #24
     2c0:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2c2:	300e      	adds	r0, #14
     2c4:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     2c6:	3031      	adds	r0, #49	; 0x31
     2c8:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ca:	5453      	strb	r3, [r2, r1]

void PWM_2_PORT_init(void)
{

	gpio_set_pin_function(PWM1, PINMUX_PA15E_TC3_WO1);
}
     2cc:	4770      	bx	lr
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	41004400 	.word	0x41004400

000002d4 <PWM_2_CLOCK_init>:
     2d4:	4a04      	ldr	r2, [pc, #16]	; (2e8 <PWM_2_CLOCK_init+0x14>)
     2d6:	6a11      	ldr	r1, [r2, #32]
     2d8:	2380      	movs	r3, #128	; 0x80
     2da:	011b      	lsls	r3, r3, #4
     2dc:	430b      	orrs	r3, r1
     2de:	6213      	str	r3, [r2, #32]
     2e0:	4a02      	ldr	r2, [pc, #8]	; (2ec <PWM_2_CLOCK_init+0x18>)
     2e2:	4b03      	ldr	r3, [pc, #12]	; (2f0 <PWM_2_CLOCK_init+0x1c>)
     2e4:	805a      	strh	r2, [r3, #2]

void PWM_2_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     2e6:	4770      	bx	lr
     2e8:	40000400 	.word	0x40000400
     2ec:	0000401b 	.word	0x0000401b
     2f0:	40000c00 	.word	0x40000c00

000002f4 <PWM_2_init>:

void PWM_2_init(void)
{
     2f4:	b510      	push	{r4, lr}
	PWM_2_CLOCK_init();
     2f6:	4b06      	ldr	r3, [pc, #24]	; (310 <PWM_2_init+0x1c>)
     2f8:	4798      	blx	r3
	PWM_2_PORT_init();
     2fa:	4b06      	ldr	r3, [pc, #24]	; (314 <PWM_2_init+0x20>)
     2fc:	4798      	blx	r3
	pwm_init(&PWM_2, TC3, _tc_get_pwm());
     2fe:	4b06      	ldr	r3, [pc, #24]	; (318 <PWM_2_init+0x24>)
     300:	4798      	blx	r3
     302:	0002      	movs	r2, r0
     304:	4905      	ldr	r1, [pc, #20]	; (31c <PWM_2_init+0x28>)
     306:	4806      	ldr	r0, [pc, #24]	; (320 <PWM_2_init+0x2c>)
     308:	4b06      	ldr	r3, [pc, #24]	; (324 <PWM_2_init+0x30>)
     30a:	4798      	blx	r3
}
     30c:	bd10      	pop	{r4, pc}
     30e:	46c0      	nop			; (mov r8, r8)
     310:	000002d5 	.word	0x000002d5
     314:	000002b1 	.word	0x000002b1
     318:	00001c9d 	.word	0x00001c9d
     31c:	42002c00 	.word	0x42002c00
     320:	20000210 	.word	0x20000210
     324:	00000c61 	.word	0x00000c61

00000328 <PWM_4_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     328:	4a07      	ldr	r2, [pc, #28]	; (348 <PWM_4_PORT_init+0x20>)
     32a:	2157      	movs	r1, #87	; 0x57
     32c:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     32e:	2001      	movs	r0, #1
     330:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     332:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     334:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     336:	391c      	subs	r1, #28
     338:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     33a:	300e      	adds	r0, #14
     33c:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     33e:	3031      	adds	r0, #49	; 0x31
     340:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     342:	5453      	strb	r3, [r2, r1]

void PWM_4_PORT_init(void)
{

	gpio_set_pin_function(PWM2, PINMUX_PA23E_TC4_WO1);
}
     344:	4770      	bx	lr
     346:	46c0      	nop			; (mov r8, r8)
     348:	41004400 	.word	0x41004400

0000034c <PWM_4_CLOCK_init>:
     34c:	4a04      	ldr	r2, [pc, #16]	; (360 <PWM_4_CLOCK_init+0x14>)
     34e:	6a11      	ldr	r1, [r2, #32]
     350:	2380      	movs	r3, #128	; 0x80
     352:	015b      	lsls	r3, r3, #5
     354:	430b      	orrs	r3, r1
     356:	6213      	str	r3, [r2, #32]
     358:	4a02      	ldr	r2, [pc, #8]	; (364 <PWM_4_CLOCK_init+0x18>)
     35a:	4b03      	ldr	r3, [pc, #12]	; (368 <PWM_4_CLOCK_init+0x1c>)
     35c:	805a      	strh	r2, [r3, #2]

void PWM_4_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);
}
     35e:	4770      	bx	lr
     360:	40000400 	.word	0x40000400
     364:	0000401c 	.word	0x0000401c
     368:	40000c00 	.word	0x40000c00

0000036c <PWM_4_init>:

void PWM_4_init(void)
{
     36c:	b510      	push	{r4, lr}
	PWM_4_CLOCK_init();
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <PWM_4_init+0x1c>)
     370:	4798      	blx	r3
	PWM_4_PORT_init();
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <PWM_4_init+0x20>)
     374:	4798      	blx	r3
	pwm_init(&PWM_4, TC4, _tc_get_pwm());
     376:	4b06      	ldr	r3, [pc, #24]	; (390 <PWM_4_init+0x24>)
     378:	4798      	blx	r3
     37a:	0002      	movs	r2, r0
     37c:	4905      	ldr	r1, [pc, #20]	; (394 <PWM_4_init+0x28>)
     37e:	4806      	ldr	r0, [pc, #24]	; (398 <PWM_4_init+0x2c>)
     380:	4b06      	ldr	r3, [pc, #24]	; (39c <PWM_4_init+0x30>)
     382:	4798      	blx	r3
}
     384:	bd10      	pop	{r4, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	0000034d 	.word	0x0000034d
     38c:	00000329 	.word	0x00000329
     390:	00001c9d 	.word	0x00001c9d
     394:	42003000 	.word	0x42003000
     398:	20000234 	.word	0x20000234
     39c:	00000c61 	.word	0x00000c61

000003a0 <PWM_5_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a0:	4a07      	ldr	r2, [pc, #28]	; (3c0 <PWM_5_PORT_init+0x20>)
     3a2:	2159      	movs	r1, #89	; 0x59
     3a4:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a6:	2001      	movs	r0, #1
     3a8:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3aa:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ac:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ae:	391d      	subs	r1, #29
     3b0:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b2:	300e      	adds	r0, #14
     3b4:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     3b6:	3031      	adds	r0, #49	; 0x31
     3b8:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ba:	5453      	strb	r3, [r2, r1]

void PWM_5_PORT_init(void)
{

	gpio_set_pin_function(PWM3, PINMUX_PA25E_TC5_WO1);
}
     3bc:	4770      	bx	lr
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	41004400 	.word	0x41004400

000003c4 <PWM_5_CLOCK_init>:
     3c4:	4a04      	ldr	r2, [pc, #16]	; (3d8 <PWM_5_CLOCK_init+0x14>)
     3c6:	6a11      	ldr	r1, [r2, #32]
     3c8:	2380      	movs	r3, #128	; 0x80
     3ca:	019b      	lsls	r3, r3, #6
     3cc:	430b      	orrs	r3, r1
     3ce:	6213      	str	r3, [r2, #32]
     3d0:	4a02      	ldr	r2, [pc, #8]	; (3dc <PWM_5_CLOCK_init+0x18>)
     3d2:	4b03      	ldr	r3, [pc, #12]	; (3e0 <PWM_5_CLOCK_init+0x1c>)
     3d4:	805a      	strh	r2, [r3, #2]

void PWM_5_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC5);
	_gclk_enable_channel(TC5_GCLK_ID, CONF_GCLK_TC5_SRC);
}
     3d6:	4770      	bx	lr
     3d8:	40000400 	.word	0x40000400
     3dc:	0000401c 	.word	0x0000401c
     3e0:	40000c00 	.word	0x40000c00

000003e4 <PWM_5_init>:

void PWM_5_init(void)
{
     3e4:	b510      	push	{r4, lr}
	PWM_5_CLOCK_init();
     3e6:	4b06      	ldr	r3, [pc, #24]	; (400 <PWM_5_init+0x1c>)
     3e8:	4798      	blx	r3
	PWM_5_PORT_init();
     3ea:	4b06      	ldr	r3, [pc, #24]	; (404 <PWM_5_init+0x20>)
     3ec:	4798      	blx	r3
	pwm_init(&PWM_5, TC5, _tc_get_pwm());
     3ee:	4b06      	ldr	r3, [pc, #24]	; (408 <PWM_5_init+0x24>)
     3f0:	4798      	blx	r3
     3f2:	0002      	movs	r2, r0
     3f4:	4905      	ldr	r1, [pc, #20]	; (40c <PWM_5_init+0x28>)
     3f6:	4806      	ldr	r0, [pc, #24]	; (410 <PWM_5_init+0x2c>)
     3f8:	4b06      	ldr	r3, [pc, #24]	; (414 <PWM_5_init+0x30>)
     3fa:	4798      	blx	r3
}
     3fc:	bd10      	pop	{r4, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	000003c5 	.word	0x000003c5
     404:	000003a1 	.word	0x000003a1
     408:	00001c9d 	.word	0x00001c9d
     40c:	42003400 	.word	0x42003400
     410:	200001d0 	.word	0x200001d0
     414:	00000c61 	.word	0x00000c61

00000418 <PWM_1_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     418:	4a07      	ldr	r2, [pc, #28]	; (438 <PWM_1_PORT_init+0x20>)
     41a:	2145      	movs	r1, #69	; 0x45
     41c:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     41e:	2001      	movs	r0, #1
     420:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     422:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     424:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     426:	3913      	subs	r1, #19
     428:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     42a:	300e      	adds	r0, #14
     42c:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     42e:	3031      	adds	r0, #49	; 0x31
     430:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     432:	5453      	strb	r3, [r2, r1]

void PWM_1_PORT_init(void)
{

	gpio_set_pin_function(PWM4, PINMUX_PA05E_TCC0_WO1);
}
     434:	4770      	bx	lr
     436:	46c0      	nop			; (mov r8, r8)
     438:	41004400 	.word	0x41004400

0000043c <PWM_1_CLOCK_init>:
     43c:	4a04      	ldr	r2, [pc, #16]	; (450 <PWM_1_CLOCK_init+0x14>)
     43e:	6a11      	ldr	r1, [r2, #32]
     440:	2380      	movs	r3, #128	; 0x80
     442:	005b      	lsls	r3, r3, #1
     444:	430b      	orrs	r3, r1
     446:	6213      	str	r3, [r2, #32]
     448:	4a02      	ldr	r2, [pc, #8]	; (454 <PWM_1_CLOCK_init+0x18>)
     44a:	4b03      	ldr	r3, [pc, #12]	; (458 <PWM_1_CLOCK_init+0x1c>)
     44c:	805a      	strh	r2, [r3, #2]

void PWM_1_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC0);
	_gclk_enable_channel(TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC);
}
     44e:	4770      	bx	lr
     450:	40000400 	.word	0x40000400
     454:	0000401a 	.word	0x0000401a
     458:	40000c00 	.word	0x40000c00

0000045c <PWM_1_init>:

void PWM_1_init(void)
{
     45c:	b510      	push	{r4, lr}
	PWM_1_CLOCK_init();
     45e:	4b06      	ldr	r3, [pc, #24]	; (478 <PWM_1_init+0x1c>)
     460:	4798      	blx	r3
	PWM_1_PORT_init();
     462:	4b06      	ldr	r3, [pc, #24]	; (47c <PWM_1_init+0x20>)
     464:	4798      	blx	r3
	pwm_init(&PWM_1, TCC0, _tcc_get_pwm());
     466:	4b06      	ldr	r3, [pc, #24]	; (480 <PWM_1_init+0x24>)
     468:	4798      	blx	r3
     46a:	0002      	movs	r2, r0
     46c:	4905      	ldr	r1, [pc, #20]	; (484 <PWM_1_init+0x28>)
     46e:	4806      	ldr	r0, [pc, #24]	; (488 <PWM_1_init+0x2c>)
     470:	4b06      	ldr	r3, [pc, #24]	; (48c <PWM_1_init+0x30>)
     472:	4798      	blx	r3
}
     474:	bd10      	pop	{r4, pc}
     476:	46c0      	nop			; (mov r8, r8)
     478:	0000043d 	.word	0x0000043d
     47c:	00000419 	.word	0x00000419
     480:	00001961 	.word	0x00001961
     484:	42002000 	.word	0x42002000
     488:	20000264 	.word	0x20000264
     48c:	00000c61 	.word	0x00000c61

00000490 <PWM_3_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	4a07      	ldr	r2, [pc, #28]	; (4b0 <PWM_3_PORT_init+0x20>)
     492:	2147      	movs	r1, #71	; 0x47
     494:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     496:	2001      	movs	r0, #1
     498:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49a:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     49e:	3914      	subs	r1, #20
     4a0:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a2:	300e      	adds	r0, #14
     4a4:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     4a6:	3031      	adds	r0, #49	; 0x31
     4a8:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4aa:	5453      	strb	r3, [r2, r1]

void PWM_3_PORT_init(void)
{

	gpio_set_pin_function(PWM5, PINMUX_PA07E_TCC1_WO1);
}
     4ac:	4770      	bx	lr
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	41004400 	.word	0x41004400

000004b4 <PWM_3_CLOCK_init>:
     4b4:	4a04      	ldr	r2, [pc, #16]	; (4c8 <PWM_3_CLOCK_init+0x14>)
     4b6:	6a11      	ldr	r1, [r2, #32]
     4b8:	2380      	movs	r3, #128	; 0x80
     4ba:	009b      	lsls	r3, r3, #2
     4bc:	430b      	orrs	r3, r1
     4be:	6213      	str	r3, [r2, #32]
     4c0:	4a02      	ldr	r2, [pc, #8]	; (4cc <PWM_3_CLOCK_init+0x18>)
     4c2:	4b03      	ldr	r3, [pc, #12]	; (4d0 <PWM_3_CLOCK_init+0x1c>)
     4c4:	805a      	strh	r2, [r3, #2]

void PWM_3_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC1);
	_gclk_enable_channel(TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC);
}
     4c6:	4770      	bx	lr
     4c8:	40000400 	.word	0x40000400
     4cc:	0000401a 	.word	0x0000401a
     4d0:	40000c00 	.word	0x40000c00

000004d4 <PWM_3_init>:

void PWM_3_init(void)
{
     4d4:	b510      	push	{r4, lr}
	PWM_3_CLOCK_init();
     4d6:	4b06      	ldr	r3, [pc, #24]	; (4f0 <PWM_3_init+0x1c>)
     4d8:	4798      	blx	r3
	PWM_3_PORT_init();
     4da:	4b06      	ldr	r3, [pc, #24]	; (4f4 <PWM_3_init+0x20>)
     4dc:	4798      	blx	r3
	pwm_init(&PWM_3, TCC1, _tcc_get_pwm());
     4de:	4b06      	ldr	r3, [pc, #24]	; (4f8 <PWM_3_init+0x24>)
     4e0:	4798      	blx	r3
     4e2:	0002      	movs	r2, r0
     4e4:	4905      	ldr	r1, [pc, #20]	; (4fc <PWM_3_init+0x28>)
     4e6:	4806      	ldr	r0, [pc, #24]	; (500 <PWM_3_init+0x2c>)
     4e8:	4b06      	ldr	r3, [pc, #24]	; (504 <PWM_3_init+0x30>)
     4ea:	4798      	blx	r3
}
     4ec:	bd10      	pop	{r4, pc}
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	000004b5 	.word	0x000004b5
     4f4:	00000491 	.word	0x00000491
     4f8:	00001961 	.word	0x00001961
     4fc:	42002400 	.word	0x42002400
     500:	200001b0 	.word	0x200001b0
     504:	00000c61 	.word	0x00000c61

00000508 <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     508:	4a07      	ldr	r2, [pc, #28]	; (528 <PWM_0_PORT_init+0x20>)
     50a:	2141      	movs	r1, #65	; 0x41
     50c:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     50e:	2001      	movs	r0, #1
     510:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     512:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     514:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     516:	3911      	subs	r1, #17
     518:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     51a:	300e      	adds	r0, #14
     51c:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     51e:	3031      	adds	r0, #49	; 0x31
     520:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     522:	5453      	strb	r3, [r2, r1]

void PWM_0_PORT_init(void)
{

	gpio_set_pin_function(PWM6, PINMUX_PA01E_TCC2_WO1);
}
     524:	4770      	bx	lr
     526:	46c0      	nop			; (mov r8, r8)
     528:	41004400 	.word	0x41004400

0000052c <PWM_0_CLOCK_init>:
     52c:	4a04      	ldr	r2, [pc, #16]	; (540 <PWM_0_CLOCK_init+0x14>)
     52e:	6a11      	ldr	r1, [r2, #32]
     530:	2380      	movs	r3, #128	; 0x80
     532:	00db      	lsls	r3, r3, #3
     534:	430b      	orrs	r3, r1
     536:	6213      	str	r3, [r2, #32]
     538:	4a02      	ldr	r2, [pc, #8]	; (544 <PWM_0_CLOCK_init+0x18>)
     53a:	4b03      	ldr	r3, [pc, #12]	; (548 <PWM_0_CLOCK_init+0x1c>)
     53c:	805a      	strh	r2, [r3, #2]

void PWM_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC2);
	_gclk_enable_channel(TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC);
}
     53e:	4770      	bx	lr
     540:	40000400 	.word	0x40000400
     544:	0000401b 	.word	0x0000401b
     548:	40000c00 	.word	0x40000c00

0000054c <PWM_0_init>:

void PWM_0_init(void)
{
     54c:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     54e:	4b06      	ldr	r3, [pc, #24]	; (568 <PWM_0_init+0x1c>)
     550:	4798      	blx	r3
	PWM_0_PORT_init();
     552:	4b06      	ldr	r3, [pc, #24]	; (56c <PWM_0_init+0x20>)
     554:	4798      	blx	r3
	pwm_init(&PWM_0, TCC2, _tcc_get_pwm());
     556:	4b06      	ldr	r3, [pc, #24]	; (570 <PWM_0_init+0x24>)
     558:	4798      	blx	r3
     55a:	0002      	movs	r2, r0
     55c:	4905      	ldr	r1, [pc, #20]	; (574 <PWM_0_init+0x28>)
     55e:	4806      	ldr	r0, [pc, #24]	; (578 <PWM_0_init+0x2c>)
     560:	4b06      	ldr	r3, [pc, #24]	; (57c <PWM_0_init+0x30>)
     562:	4798      	blx	r3
}
     564:	bd10      	pop	{r4, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	0000052d 	.word	0x0000052d
     56c:	00000509 	.word	0x00000509
     570:	00001961 	.word	0x00001961
     574:	42002800 	.word	0x42002800
     578:	200001f0 	.word	0x200001f0
     57c:	00000c61 	.word	0x00000c61

00000580 <WDT_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     580:	4a04      	ldr	r2, [pc, #16]	; (594 <WDT_0_CLOCK_init+0x14>)
     582:	6993      	ldr	r3, [r2, #24]
     584:	2110      	movs	r1, #16
     586:	430b      	orrs	r3, r1
     588:	6193      	str	r3, [r2, #24]
     58a:	4a03      	ldr	r2, [pc, #12]	; (598 <WDT_0_CLOCK_init+0x18>)
     58c:	4b03      	ldr	r3, [pc, #12]	; (59c <WDT_0_CLOCK_init+0x1c>)
     58e:	805a      	strh	r2, [r3, #2]

void WDT_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	40000400 	.word	0x40000400
     598:	00004103 	.word	0x00004103
     59c:	40000c00 	.word	0x40000c00

000005a0 <WDT_0_init>:

void WDT_0_init(void)
{
     5a0:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     5a2:	4b06      	ldr	r3, [pc, #24]	; (5bc <WDT_0_init+0x1c>)
     5a4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     5a6:	2248      	movs	r2, #72	; 0x48
     5a8:	4905      	ldr	r1, [pc, #20]	; (5c0 <WDT_0_init+0x20>)
     5aa:	2001      	movs	r0, #1
     5ac:	4b05      	ldr	r3, [pc, #20]	; (5c4 <WDT_0_init+0x24>)
     5ae:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     5b0:	4805      	ldr	r0, [pc, #20]	; (5c8 <WDT_0_init+0x28>)
     5b2:	4b06      	ldr	r3, [pc, #24]	; (5cc <WDT_0_init+0x2c>)
     5b4:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     5b6:	4b06      	ldr	r3, [pc, #24]	; (5d0 <WDT_0_init+0x30>)
     5b8:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     5ba:	bd10      	pop	{r4, pc}
     5bc:	00000581 	.word	0x00000581
     5c0:	000022d4 	.word	0x000022d4
     5c4:	00000ed5 	.word	0x00000ed5
     5c8:	20000230 	.word	0x20000230
     5cc:	40001000 	.word	0x40001000
     5d0:	00001ce5 	.word	0x00001ce5

000005d4 <system_init>:

void system_init(void)
{
     5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5d6:	46c6      	mov	lr, r8
     5d8:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5da:	4b75      	ldr	r3, [pc, #468]	; (7b0 <system_init+0x1dc>)
     5dc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5de:	22c0      	movs	r2, #192	; 0xc0
     5e0:	05d2      	lsls	r2, r2, #23
     5e2:	2101      	movs	r1, #1
     5e4:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5e6:	6091      	str	r1, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5e8:	4b72      	ldr	r3, [pc, #456]	; (7b4 <system_init+0x1e0>)
     5ea:	4873      	ldr	r0, [pc, #460]	; (7b8 <system_init+0x1e4>)
     5ec:	6298      	str	r0, [r3, #40]	; 0x28
     5ee:	24c0      	movs	r4, #192	; 0xc0
     5f0:	0624      	lsls	r4, r4, #24
     5f2:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f4:	2040      	movs	r0, #64	; 0x40
     5f6:	4680      	mov	r8, r0
     5f8:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fa:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fc:	4645      	mov	r5, r8
     5fe:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     600:	2004      	movs	r0, #4
     602:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     604:	4d6d      	ldr	r5, [pc, #436]	; (7bc <system_init+0x1e8>)
     606:	629d      	str	r5, [r3, #40]	; 0x28
     608:	4d6d      	ldr	r5, [pc, #436]	; (7c0 <system_init+0x1ec>)
     60a:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     60c:	2642      	movs	r6, #66	; 0x42
     60e:	5d9f      	ldrb	r7, [r3, r6]
     610:	4387      	bics	r7, r0
     612:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     614:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     618:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     61a:	3e3a      	subs	r6, #58	; 0x3a
     61c:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     61e:	4e69      	ldr	r6, [pc, #420]	; (7c4 <system_init+0x1f0>)
     620:	629e      	str	r6, [r3, #40]	; 0x28
     622:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     624:	2643      	movs	r6, #67	; 0x43
     626:	5d9f      	ldrb	r7, [r3, r6]
     628:	4387      	bics	r7, r0
     62a:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62c:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     62e:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     630:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     632:	3e33      	subs	r6, #51	; 0x33
     634:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     636:	4e64      	ldr	r6, [pc, #400]	; (7c8 <system_init+0x1f4>)
     638:	629e      	str	r6, [r3, #40]	; 0x28
     63a:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     63c:	2644      	movs	r6, #68	; 0x44
     63e:	5d9f      	ldrb	r7, [r3, r6]
     640:	4387      	bics	r7, r0
     642:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     644:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     646:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     648:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     64a:	4646      	mov	r6, r8
     64c:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64e:	4e5f      	ldr	r6, [pc, #380]	; (7cc <system_init+0x1f8>)
     650:	629e      	str	r6, [r3, #40]	; 0x28
     652:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     654:	2546      	movs	r5, #70	; 0x46
     656:	5d5e      	ldrb	r6, [r3, r5]
     658:	4386      	bics	r6, r0
     65a:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65c:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     65e:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     660:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     662:	35ba      	adds	r5, #186	; 0xba
     664:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     666:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     668:	4d59      	ldr	r5, [pc, #356]	; (7d0 <system_init+0x1fc>)
     66a:	629d      	str	r5, [r3, #40]	; 0x28
     66c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	2648      	movs	r6, #72	; 0x48
     670:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     674:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     676:	2580      	movs	r5, #128	; 0x80
     678:	00ad      	lsls	r5, r5, #2
     67a:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     67c:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67e:	4d55      	ldr	r5, [pc, #340]	; (7d4 <system_init+0x200>)
     680:	629d      	str	r5, [r3, #40]	; 0x28
     682:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     684:	3601      	adds	r6, #1
     686:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     688:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     68a:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     68c:	2580      	movs	r5, #128	; 0x80
     68e:	00ed      	lsls	r5, r5, #3
     690:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     692:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     694:	4d50      	ldr	r5, [pc, #320]	; (7d8 <system_init+0x204>)
     696:	629d      	str	r5, [r3, #40]	; 0x28
     698:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     69a:	274a      	movs	r7, #74	; 0x4a
     69c:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     69e:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a0:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6a2:	2680      	movs	r6, #128	; 0x80
     6a4:	0136      	lsls	r6, r6, #4
     6a6:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a8:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6aa:	4e4c      	ldr	r6, [pc, #304]	; (7dc <system_init+0x208>)
     6ac:	629e      	str	r6, [r3, #40]	; 0x28
     6ae:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b0:	3701      	adds	r7, #1
     6b2:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6b4:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6b6:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6b8:	2680      	movs	r6, #128	; 0x80
     6ba:	01f6      	lsls	r6, r6, #7
     6bc:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6be:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6c0:	4e47      	ldr	r6, [pc, #284]	; (7e0 <system_init+0x20c>)
     6c2:	629e      	str	r6, [r3, #40]	; 0x28
     6c4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6c6:	264e      	movs	r6, #78	; 0x4e
     6c8:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ca:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6cc:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6ce:	2480      	movs	r4, #128	; 0x80
     6d0:	02e4      	lsls	r4, r4, #11
     6d2:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6d4:	4c43      	ldr	r4, [pc, #268]	; (7e4 <system_init+0x210>)
     6d6:	629c      	str	r4, [r3, #40]	; 0x28
     6d8:	4e43      	ldr	r6, [pc, #268]	; (7e8 <system_init+0x214>)
     6da:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6dc:	2652      	movs	r6, #82	; 0x52
     6de:	5d9f      	ldrb	r7, [r3, r6]
     6e0:	4387      	bics	r7, r0
     6e2:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6e4:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6e6:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e8:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6ea:	2680      	movs	r6, #128	; 0x80
     6ec:	0336      	lsls	r6, r6, #12
     6ee:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6f0:	629c      	str	r4, [r3, #40]	; 0x28
     6f2:	4e3e      	ldr	r6, [pc, #248]	; (7ec <system_init+0x218>)
     6f4:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6f6:	2653      	movs	r6, #83	; 0x53
     6f8:	5d9f      	ldrb	r7, [r3, r6]
     6fa:	4387      	bics	r7, r0
     6fc:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6fe:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     700:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     702:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     704:	2680      	movs	r6, #128	; 0x80
     706:	03f6      	lsls	r6, r6, #15
     708:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     70a:	629c      	str	r4, [r3, #40]	; 0x28
     70c:	4e38      	ldr	r6, [pc, #224]	; (7f0 <system_init+0x21c>)
     70e:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     710:	2656      	movs	r6, #86	; 0x56
     712:	5d9f      	ldrb	r7, [r3, r6]
     714:	4387      	bics	r7, r0
     716:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     718:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     71a:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71c:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     71e:	2680      	movs	r6, #128	; 0x80
     720:	0476      	lsls	r6, r6, #17
     722:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     724:	629c      	str	r4, [r3, #40]	; 0x28
     726:	4e33      	ldr	r6, [pc, #204]	; (7f4 <system_init+0x220>)
     728:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     72a:	2658      	movs	r6, #88	; 0x58
     72c:	5d9f      	ldrb	r7, [r3, r6]
     72e:	4387      	bics	r7, r0
     730:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     732:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     734:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     736:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     738:	2680      	movs	r6, #128	; 0x80
     73a:	0536      	lsls	r6, r6, #20
     73c:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     73e:	629c      	str	r4, [r3, #40]	; 0x28
     740:	4c2d      	ldr	r4, [pc, #180]	; (7f8 <system_init+0x224>)
     742:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     744:	245b      	movs	r4, #91	; 0x5b
     746:	5d1e      	ldrb	r6, [r3, r4]
     748:	4386      	bics	r6, r0
     74a:	551e      	strb	r6, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     74c:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     74e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     750:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     752:	2080      	movs	r0, #128	; 0x80
     754:	0540      	lsls	r0, r0, #21
     756:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     758:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     75a:	2280      	movs	r2, #128	; 0x80
     75c:	05d2      	lsls	r2, r2, #23
     75e:	629a      	str	r2, [r3, #40]	; 0x28
     760:	4a26      	ldr	r2, [pc, #152]	; (7fc <system_init+0x228>)
     762:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     764:	205c      	movs	r0, #92	; 0x5c
     766:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     768:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     76a:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(Alive, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Alive, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     76c:	4b24      	ldr	r3, [pc, #144]	; (800 <system_init+0x22c>)
     76e:	4798      	blx	r3
     770:	69ab      	ldr	r3, [r5, #24]
     772:	2220      	movs	r2, #32
     774:	4313      	orrs	r3, r2
     776:	61ab      	str	r3, [r5, #24]
     778:	4a22      	ldr	r2, [pc, #136]	; (804 <system_init+0x230>)
     77a:	4b23      	ldr	r3, [pc, #140]	; (808 <system_init+0x234>)
     77c:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     77e:	4b23      	ldr	r3, [pc, #140]	; (80c <system_init+0x238>)
     780:	4798      	blx	r3
     782:	0002      	movs	r2, r0
     784:	4922      	ldr	r1, [pc, #136]	; (810 <system_init+0x23c>)
     786:	4823      	ldr	r0, [pc, #140]	; (814 <system_init+0x240>)
     788:	4b23      	ldr	r3, [pc, #140]	; (818 <system_init+0x244>)
     78a:	4798      	blx	r3

	TIMER_0_init();

	PWM_2_init();
     78c:	4b23      	ldr	r3, [pc, #140]	; (81c <system_init+0x248>)
     78e:	4798      	blx	r3

	PWM_4_init();
     790:	4b23      	ldr	r3, [pc, #140]	; (820 <system_init+0x24c>)
     792:	4798      	blx	r3

	PWM_5_init();
     794:	4b23      	ldr	r3, [pc, #140]	; (824 <system_init+0x250>)
     796:	4798      	blx	r3

	PWM_1_init();
     798:	4b23      	ldr	r3, [pc, #140]	; (828 <system_init+0x254>)
     79a:	4798      	blx	r3

	PWM_3_init();
     79c:	4b23      	ldr	r3, [pc, #140]	; (82c <system_init+0x258>)
     79e:	4798      	blx	r3

	PWM_0_init();
     7a0:	4b23      	ldr	r3, [pc, #140]	; (830 <system_init+0x25c>)
     7a2:	4798      	blx	r3

	WDT_0_init();
     7a4:	4b23      	ldr	r3, [pc, #140]	; (834 <system_init+0x260>)
     7a6:	4798      	blx	r3
}
     7a8:	bc04      	pop	{r2}
     7aa:	4690      	mov	r8, r2
     7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	00001045 	.word	0x00001045
     7b4:	41004400 	.word	0x41004400
     7b8:	40000001 	.word	0x40000001
     7bc:	40020004 	.word	0x40020004
     7c0:	c0020000 	.word	0xc0020000
     7c4:	40020008 	.word	0x40020008
     7c8:	40020010 	.word	0x40020010
     7cc:	40020040 	.word	0x40020040
     7d0:	40000100 	.word	0x40000100
     7d4:	40000200 	.word	0x40000200
     7d8:	40000400 	.word	0x40000400
     7dc:	40000800 	.word	0x40000800
     7e0:	40004000 	.word	0x40004000
     7e4:	40020000 	.word	0x40020000
     7e8:	c0020004 	.word	0xc0020004
     7ec:	c0020008 	.word	0xc0020008
     7f0:	c0020040 	.word	0xc0020040
     7f4:	c0020100 	.word	0xc0020100
     7f8:	c0020800 	.word	0xc0020800
     7fc:	c0001000 	.word	0xc0001000
     800:	00000281 	.word	0x00000281
     804:	00004104 	.word	0x00004104
     808:	40000c00 	.word	0x40000c00
     80c:	000011bb 	.word	0x000011bb
     810:	40001400 	.word	0x40001400
     814:	200002dc 	.word	0x200002dc
     818:	00000da9 	.word	0x00000da9
     81c:	000002f5 	.word	0x000002f5
     820:	0000036d 	.word	0x0000036d
     824:	000003e5 	.word	0x000003e5
     828:	0000045d 	.word	0x0000045d
     82c:	000004d5 	.word	0x000004d5
     830:	0000054d 	.word	0x0000054d
     834:	000005a1 	.word	0x000005a1

00000838 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     838:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     83c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     83e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     840:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     844:	4770      	bx	lr

00000846 <atomic_leave_critical>:
     846:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     84a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     84c:	f383 8810 	msr	PRIMASK, r3
}
     850:	4770      	bx	lr

00000852 <i2c_s_async_error>:
 * \internal Callback function for error
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_error(struct _i2c_s_async_device *const device)
{
     852:	b510      	push	{r4, lr}
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);

	if (descr->cbs.error) {
     854:	6a83      	ldr	r3, [r0, #40]	; 0x28
     856:	2b00      	cmp	r3, #0
     858:	d000      	beq.n	85c <i2c_s_async_error+0xa>
		descr->cbs.error(descr);
     85a:	4798      	blx	r3
	}
}
     85c:	bd10      	pop	{r4, pc}

0000085e <i2c_s_async_amatch>:
 * \internal Callback function for amatch
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_amatch(struct _i2c_s_async_device *const device)
{
     85e:	b510      	push	{r4, lr}
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);

	if (descr->cbs.amatch) {
     860:	6b83      	ldr	r3, [r0, #56]	; 0x38
     862:	2b00      	cmp	r3, #0
     864:	d000      	beq.n	868 <i2c_s_async_amatch+0xa>
		descr->cbs.amatch(descr);
     866:	4798      	blx	r3
	}
}
     868:	bd10      	pop	{r4, pc}

0000086a <i2c_s_async_prec>:
* \internal Callback function for prec
*
* \param[in] device The pointer to i2c slave device
*/
static void i2c_s_async_prec(struct _i2c_s_async_device *const device)
{
     86a:	b510      	push	{r4, lr}
struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);

	if (descr->cbs.prec) {
     86c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     86e:	2b00      	cmp	r3, #0
     870:	d000      	beq.n	874 <i2c_s_async_prec+0xa>
		descr->cbs.prec(descr);
     872:	4798      	blx	r3
	}
}
     874:	bd10      	pop	{r4, pc}
	...

00000878 <i2c_s_async_byte_received>:
{
     878:	b510      	push	{r4, lr}
     87a:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     87c:	3040      	adds	r0, #64	; 0x40
     87e:	4b04      	ldr	r3, [pc, #16]	; (890 <i2c_s_async_byte_received+0x18>)
     880:	4798      	blx	r3
	if (descr->cbs.rx) {
     882:	6b63      	ldr	r3, [r4, #52]	; 0x34
     884:	2b00      	cmp	r3, #0
     886:	d001      	beq.n	88c <i2c_s_async_byte_received+0x14>
		descr->cbs.rx(descr);
     888:	0020      	movs	r0, r4
     88a:	4798      	blx	r3
}
     88c:	bd10      	pop	{r4, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	00000fe1 	.word	0x00000fe1

00000894 <i2c_s_async_tx>:
{
     894:	b510      	push	{r4, lr}
	if (!descr->tx_buffer_length) {
     896:	2354      	movs	r3, #84	; 0x54
     898:	5ac2      	ldrh	r2, [r0, r3]
     89a:	2a00      	cmp	r2, #0
     89c:	d104      	bne.n	8a8 <i2c_s_async_tx+0x14>
		if (descr->cbs.tx_pending) {
     89e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     8a0:	2b00      	cmp	r3, #0
     8a2:	d000      	beq.n	8a6 <i2c_s_async_tx+0x12>
			descr->cbs.tx_pending(descr);
     8a4:	4798      	blx	r3
}
     8a6:	bd10      	pop	{r4, pc}
	} else if (++descr->tx_por != descr->tx_buffer_length) {
     8a8:	2156      	movs	r1, #86	; 0x56
     8aa:	5a43      	ldrh	r3, [r0, r1]
     8ac:	3301      	adds	r3, #1
     8ae:	b29b      	uxth	r3, r3
     8b0:	5243      	strh	r3, [r0, r1]
     8b2:	429a      	cmp	r2, r3
     8b4:	d109      	bne.n	8ca <i2c_s_async_tx+0x36>
		descr->tx_por           = 0;
     8b6:	2300      	movs	r3, #0
     8b8:	2256      	movs	r2, #86	; 0x56
     8ba:	5283      	strh	r3, [r0, r2]
		descr->tx_buffer_length = 0;
     8bc:	3a02      	subs	r2, #2
     8be:	5283      	strh	r3, [r0, r2]
		if (descr->cbs.tx) {
     8c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
     8c2:	2b00      	cmp	r3, #0
     8c4:	d0ef      	beq.n	8a6 <i2c_s_async_tx+0x12>
			descr->cbs.tx(descr);
     8c6:	4798      	blx	r3
}
     8c8:	e7ed      	b.n	8a6 <i2c_s_async_tx+0x12>
		_i2c_s_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por]);
     8ca:	6d02      	ldr	r2, [r0, #80]	; 0x50
     8cc:	5cd1      	ldrb	r1, [r2, r3]
     8ce:	4b01      	ldr	r3, [pc, #4]	; (8d4 <i2c_s_async_tx+0x40>)
     8d0:	4798      	blx	r3
     8d2:	e7e8      	b.n	8a6 <i2c_s_async_tx+0x12>
     8d4:	00001399 	.word	0x00001399

000008d8 <i2c_s_async_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_async_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	0004      	movs	r4, r0
     8dc:	000e      	movs	r6, r1
     8de:	0015      	movs	r5, r2
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(io, struct i2c_s_async_descriptor, io);

	ASSERT(io && buf && length);
     8e0:	2800      	cmp	r0, #0
     8e2:	d017      	beq.n	914 <i2c_s_async_write+0x3c>
     8e4:	2900      	cmp	r1, #0
     8e6:	d017      	beq.n	918 <i2c_s_async_write+0x40>
     8e8:	0010      	movs	r0, r2
     8ea:	1e43      	subs	r3, r0, #1
     8ec:	4198      	sbcs	r0, r3
     8ee:	22c0      	movs	r2, #192	; 0xc0
     8f0:	0052      	lsls	r2, r2, #1
     8f2:	490c      	ldr	r1, [pc, #48]	; (924 <i2c_s_async_write+0x4c>)
     8f4:	4b0c      	ldr	r3, [pc, #48]	; (928 <i2c_s_async_write+0x50>)
     8f6:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
     8f8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
     8fa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     8fc:	429a      	cmp	r2, r3
     8fe:	d10d      	bne.n	91c <i2c_s_async_write+0x44>
		return ERR_BUSY;
	}

	descr->tx_buffer        = (uint8_t *)buf;
     900:	0020      	movs	r0, r4
     902:	3820      	subs	r0, #32
     904:	6506      	str	r6, [r0, #80]	; 0x50
	descr->tx_buffer_length = length;
     906:	2354      	movs	r3, #84	; 0x54
     908:	52c5      	strh	r5, [r0, r3]
	_i2c_s_async_write_byte(&descr->device, descr->tx_buffer[0]);
     90a:	7831      	ldrb	r1, [r6, #0]
     90c:	4b07      	ldr	r3, [pc, #28]	; (92c <i2c_s_async_write+0x54>)
     90e:	4798      	blx	r3

	return (int32_t)length;
     910:	0028      	movs	r0, r5
}
     912:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io && buf && length);
     914:	2000      	movs	r0, #0
     916:	e7ea      	b.n	8ee <i2c_s_async_write+0x16>
     918:	2000      	movs	r0, #0
     91a:	e7e8      	b.n	8ee <i2c_s_async_write+0x16>
		return ERR_BUSY;
     91c:	2004      	movs	r0, #4
     91e:	4240      	negs	r0, r0
     920:	e7f7      	b.n	912 <i2c_s_async_write+0x3a>
     922:	46c0      	nop			; (mov r8, r8)
     924:	00002308 	.word	0x00002308
     928:	00000ed5 	.word	0x00000ed5
     92c:	00001399 	.word	0x00001399

00000930 <i2c_s_async_read>:
{
     930:	b5f0      	push	{r4, r5, r6, r7, lr}
     932:	46ce      	mov	lr, r9
     934:	4647      	mov	r7, r8
     936:	b580      	push	{r7, lr}
     938:	b085      	sub	sp, #20
     93a:	0005      	movs	r5, r0
     93c:	000e      	movs	r6, r1
     93e:	0017      	movs	r7, r2
	ASSERT(io && buf && length);
     940:	2800      	cmp	r0, #0
     942:	d015      	beq.n	970 <i2c_s_async_read+0x40>
     944:	2900      	cmp	r1, #0
     946:	d013      	beq.n	970 <i2c_s_async_read+0x40>
     948:	2a00      	cmp	r2, #0
     94a:	d12a      	bne.n	9a2 <i2c_s_async_read+0x72>
     94c:	2266      	movs	r2, #102	; 0x66
     94e:	32ff      	adds	r2, #255	; 0xff
     950:	4929      	ldr	r1, [pc, #164]	; (9f8 <i2c_s_async_read+0xc8>)
     952:	2000      	movs	r0, #0
     954:	4b29      	ldr	r3, [pc, #164]	; (9fc <i2c_s_async_read+0xcc>)
     956:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     958:	a803      	add	r0, sp, #12
     95a:	4b29      	ldr	r3, [pc, #164]	; (a00 <i2c_s_async_read+0xd0>)
     95c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     95e:	0028      	movs	r0, r5
     960:	3020      	adds	r0, #32
     962:	4b28      	ldr	r3, [pc, #160]	; (a04 <i2c_s_async_read+0xd4>)
     964:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     966:	a803      	add	r0, sp, #12
     968:	4b27      	ldr	r3, [pc, #156]	; (a08 <i2c_s_async_read+0xd8>)
     96a:	4798      	blx	r3
	uint16_t                       was_read = 0;
     96c:	2500      	movs	r5, #0
	return (int32_t)was_read;
     96e:	e03c      	b.n	9ea <i2c_s_async_read+0xba>
	ASSERT(io && buf && length);
     970:	2266      	movs	r2, #102	; 0x66
     972:	32ff      	adds	r2, #255	; 0xff
     974:	4920      	ldr	r1, [pc, #128]	; (9f8 <i2c_s_async_read+0xc8>)
     976:	2000      	movs	r0, #0
     978:	4b20      	ldr	r3, [pc, #128]	; (9fc <i2c_s_async_read+0xcc>)
     97a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     97c:	a803      	add	r0, sp, #12
     97e:	4b20      	ldr	r3, [pc, #128]	; (a00 <i2c_s_async_read+0xd0>)
     980:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     982:	3520      	adds	r5, #32
     984:	0028      	movs	r0, r5
     986:	9501      	str	r5, [sp, #4]
     988:	4b1e      	ldr	r3, [pc, #120]	; (a04 <i2c_s_async_read+0xd4>)
     98a:	4798      	blx	r3
     98c:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     98e:	a803      	add	r0, sp, #12
     990:	4b1d      	ldr	r3, [pc, #116]	; (a08 <i2c_s_async_read+0xd8>)
     992:	4798      	blx	r3
	uint16_t                       was_read = 0;
     994:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     996:	4643      	mov	r3, r8
     998:	2b00      	cmp	r3, #0
     99a:	d026      	beq.n	9ea <i2c_s_async_read+0xba>
     99c:	2f00      	cmp	r7, #0
     99e:	d116      	bne.n	9ce <i2c_s_async_read+0x9e>
     9a0:	e023      	b.n	9ea <i2c_s_async_read+0xba>
	ASSERT(io && buf && length);
     9a2:	2266      	movs	r2, #102	; 0x66
     9a4:	32ff      	adds	r2, #255	; 0xff
     9a6:	4914      	ldr	r1, [pc, #80]	; (9f8 <i2c_s_async_read+0xc8>)
     9a8:	2001      	movs	r0, #1
     9aa:	4b14      	ldr	r3, [pc, #80]	; (9fc <i2c_s_async_read+0xcc>)
     9ac:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     9ae:	a803      	add	r0, sp, #12
     9b0:	4b13      	ldr	r3, [pc, #76]	; (a00 <i2c_s_async_read+0xd0>)
     9b2:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     9b4:	3520      	adds	r5, #32
     9b6:	0028      	movs	r0, r5
     9b8:	9501      	str	r5, [sp, #4]
     9ba:	4b12      	ldr	r3, [pc, #72]	; (a04 <i2c_s_async_read+0xd4>)
     9bc:	4798      	blx	r3
     9be:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     9c0:	a803      	add	r0, sp, #12
     9c2:	4b11      	ldr	r3, [pc, #68]	; (a08 <i2c_s_async_read+0xd8>)
     9c4:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     9c6:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     9c8:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     9ca:	2b00      	cmp	r3, #0
     9cc:	d00d      	beq.n	9ea <i2c_s_async_read+0xba>
{
     9ce:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     9d0:	4b0e      	ldr	r3, [pc, #56]	; (a0c <i2c_s_async_read+0xdc>)
     9d2:	4699      	mov	r9, r3
     9d4:	1c65      	adds	r5, r4, #1
     9d6:	b2ad      	uxth	r5, r5
     9d8:	1931      	adds	r1, r6, r4
     9da:	9801      	ldr	r0, [sp, #4]
     9dc:	47c8      	blx	r9
     9de:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     9e0:	4544      	cmp	r4, r8
     9e2:	d202      	bcs.n	9ea <i2c_s_async_read+0xba>
     9e4:	b2a3      	uxth	r3, r4
     9e6:	429f      	cmp	r7, r3
     9e8:	d8f4      	bhi.n	9d4 <i2c_s_async_read+0xa4>
}
     9ea:	0028      	movs	r0, r5
     9ec:	b005      	add	sp, #20
     9ee:	bc0c      	pop	{r2, r3}
     9f0:	4690      	mov	r8, r2
     9f2:	4699      	mov	r9, r3
     9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	00002308 	.word	0x00002308
     9fc:	00000ed5 	.word	0x00000ed5
     a00:	00000839 	.word	0x00000839
     a04:	00001021 	.word	0x00001021
     a08:	00000847 	.word	0x00000847
     a0c:	00000f99 	.word	0x00000f99

00000a10 <i2c_s_async_init>:
{
     a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a12:	0004      	movs	r4, r0
     a14:	000d      	movs	r5, r1
     a16:	0016      	movs	r6, r2
     a18:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     a1a:	2800      	cmp	r0, #0
     a1c:	d02c      	beq.n	a78 <i2c_s_async_init+0x68>
     a1e:	2900      	cmp	r1, #0
     a20:	d02c      	beq.n	a7c <i2c_s_async_init+0x6c>
     a22:	2a00      	cmp	r2, #0
     a24:	d02c      	beq.n	a80 <i2c_s_async_init+0x70>
     a26:	0018      	movs	r0, r3
     a28:	1e43      	subs	r3, r0, #1
     a2a:	4198      	sbcs	r0, r3
     a2c:	223d      	movs	r2, #61	; 0x3d
     a2e:	4917      	ldr	r1, [pc, #92]	; (a8c <i2c_s_async_init+0x7c>)
     a30:	4b17      	ldr	r3, [pc, #92]	; (a90 <i2c_s_async_init+0x80>)
     a32:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     a34:	0020      	movs	r0, r4
     a36:	3040      	adds	r0, #64	; 0x40
     a38:	003a      	movs	r2, r7
     a3a:	0031      	movs	r1, r6
     a3c:	4b15      	ldr	r3, [pc, #84]	; (a94 <i2c_s_async_init+0x84>)
     a3e:	4798      	blx	r3
     a40:	2800      	cmp	r0, #0
     a42:	d11f      	bne.n	a84 <i2c_s_async_init+0x74>
	init_status = _i2c_s_async_init(&descr->device, hw);
     a44:	0029      	movs	r1, r5
     a46:	0020      	movs	r0, r4
     a48:	4b13      	ldr	r3, [pc, #76]	; (a98 <i2c_s_async_init+0x88>)
     a4a:	4798      	blx	r3
	if (init_status) {
     a4c:	2800      	cmp	r0, #0
     a4e:	d112      	bne.n	a76 <i2c_s_async_init+0x66>
	descr->io.read  = i2c_s_async_read;
     a50:	4b12      	ldr	r3, [pc, #72]	; (a9c <i2c_s_async_init+0x8c>)
     a52:	6263      	str	r3, [r4, #36]	; 0x24
	descr->io.write = i2c_s_async_write;
     a54:	4b12      	ldr	r3, [pc, #72]	; (aa0 <i2c_s_async_init+0x90>)
     a56:	6223      	str	r3, [r4, #32]
	descr->device.cb.error   = i2c_s_async_error;
     a58:	4b12      	ldr	r3, [pc, #72]	; (aa4 <i2c_s_async_init+0x94>)
     a5a:	6063      	str	r3, [r4, #4]
	descr->device.cb.tx      = i2c_s_async_tx;
     a5c:	4b12      	ldr	r3, [pc, #72]	; (aa8 <i2c_s_async_init+0x98>)
     a5e:	60a3      	str	r3, [r4, #8]
	descr->device.cb.rx_done = i2c_s_async_byte_received;
     a60:	4b12      	ldr	r3, [pc, #72]	; (aac <i2c_s_async_init+0x9c>)
     a62:	60e3      	str	r3, [r4, #12]
	descr->device.cb.amatch  = i2c_s_async_amatch;
     a64:	4b12      	ldr	r3, [pc, #72]	; (ab0 <i2c_s_async_init+0xa0>)
     a66:	6123      	str	r3, [r4, #16]
	descr->device.cb.prec	 = i2c_s_async_prec;
     a68:	4b12      	ldr	r3, [pc, #72]	; (ab4 <i2c_s_async_init+0xa4>)
     a6a:	6163      	str	r3, [r4, #20]
	descr->tx_por           = 0;
     a6c:	2300      	movs	r3, #0
     a6e:	2256      	movs	r2, #86	; 0x56
     a70:	52a3      	strh	r3, [r4, r2]
	descr->tx_buffer_length = 0;
     a72:	3a02      	subs	r2, #2
     a74:	52a3      	strh	r3, [r4, r2]
}
     a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     a78:	2000      	movs	r0, #0
     a7a:	e7d7      	b.n	a2c <i2c_s_async_init+0x1c>
     a7c:	2000      	movs	r0, #0
     a7e:	e7d5      	b.n	a2c <i2c_s_async_init+0x1c>
     a80:	2000      	movs	r0, #0
     a82:	e7d3      	b.n	a2c <i2c_s_async_init+0x1c>
		return ERR_INVALID_ARG;
     a84:	200d      	movs	r0, #13
     a86:	4240      	negs	r0, r0
     a88:	e7f5      	b.n	a76 <i2c_s_async_init+0x66>
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	00002308 	.word	0x00002308
     a90:	00000ed5 	.word	0x00000ed5
     a94:	00000f45 	.word	0x00000f45
     a98:	000012e1 	.word	0x000012e1
     a9c:	00000931 	.word	0x00000931
     aa0:	000008d9 	.word	0x000008d9
     aa4:	00000853 	.word	0x00000853
     aa8:	00000895 	.word	0x00000895
     aac:	00000879 	.word	0x00000879
     ab0:	0000085f 	.word	0x0000085f
     ab4:	0000086b 	.word	0x0000086b

00000ab8 <i2c_s_async_enable>:
{
     ab8:	b570      	push	{r4, r5, r6, lr}
     aba:	0004      	movs	r4, r0
	ASSERT(descr);
     abc:	1e43      	subs	r3, r0, #1
     abe:	4198      	sbcs	r0, r3
     ac0:	b2c0      	uxtb	r0, r0
     ac2:	2269      	movs	r2, #105	; 0x69
     ac4:	490f      	ldr	r1, [pc, #60]	; (b04 <i2c_s_async_enable+0x4c>)
     ac6:	4b10      	ldr	r3, [pc, #64]	; (b08 <i2c_s_async_enable+0x50>)
     ac8:	4798      	blx	r3
	rc = _i2c_s_async_enable(&descr->device);
     aca:	0020      	movs	r0, r4
     acc:	4b0f      	ldr	r3, [pc, #60]	; (b0c <i2c_s_async_enable+0x54>)
     ace:	4798      	blx	r3
     ad0:	1e05      	subs	r5, r0, #0
	if (rc == ERR_NONE) {
     ad2:	d001      	beq.n	ad8 <i2c_s_async_enable+0x20>
}
     ad4:	0028      	movs	r0, r5
     ad6:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_s_async_set_irq_state(&descr->device, I2C_S_DEVICE_TX, true);
     ad8:	2201      	movs	r2, #1
     ada:	2101      	movs	r1, #1
     adc:	0020      	movs	r0, r4
     ade:	4e0c      	ldr	r6, [pc, #48]	; (b10 <i2c_s_async_enable+0x58>)
     ae0:	47b0      	blx	r6
		_i2c_s_async_set_irq_state(&descr->device, I2C_S_DEVICE_RX_COMPLETE, true);
     ae2:	2201      	movs	r2, #1
     ae4:	2102      	movs	r1, #2
     ae6:	0020      	movs	r0, r4
     ae8:	47b0      	blx	r6
		_i2c_s_async_set_irq_state(&descr->device, I2C_S_DEVICE_ERROR, true);
     aea:	2201      	movs	r2, #1
     aec:	2100      	movs	r1, #0
     aee:	0020      	movs	r0, r4
     af0:	47b0      	blx	r6
		_i2c_s_async_set_irq_state(&descr->device, I2C_S_DEVICE_AMATCH, true);
     af2:	2201      	movs	r2, #1
     af4:	2103      	movs	r1, #3
     af6:	0020      	movs	r0, r4
     af8:	47b0      	blx	r6
		_i2c_s_async_set_irq_state(&descr->device, I2C_S_DEVICE_PREC, true);
     afa:	2201      	movs	r2, #1
     afc:	2104      	movs	r1, #4
     afe:	0020      	movs	r0, r4
     b00:	47b0      	blx	r6
	return rc;
     b02:	e7e7      	b.n	ad4 <i2c_s_async_enable+0x1c>
     b04:	00002308 	.word	0x00002308
     b08:	00000ed5 	.word	0x00000ed5
     b0c:	00001369 	.word	0x00001369
     b10:	000013a1 	.word	0x000013a1

00000b14 <i2c_s_async_set_addr>:
{
     b14:	b570      	push	{r4, r5, r6, lr}
     b16:	0004      	movs	r4, r0
     b18:	000d      	movs	r5, r1
	ASSERT(descr);
     b1a:	1e43      	subs	r3, r0, #1
     b1c:	4198      	sbcs	r0, r3
     b1e:	b2c0      	uxtb	r0, r0
     b20:	2290      	movs	r2, #144	; 0x90
     b22:	4909      	ldr	r1, [pc, #36]	; (b48 <i2c_s_async_set_addr+0x34>)
     b24:	4b09      	ldr	r3, [pc, #36]	; (b4c <i2c_s_async_set_addr+0x38>)
     b26:	4798      	blx	r3
	if (!_i2c_s_async_is_10bit_addressing_on(&descr->device)) {
     b28:	0020      	movs	r0, r4
     b2a:	4b09      	ldr	r3, [pc, #36]	; (b50 <i2c_s_async_set_addr+0x3c>)
     b2c:	4798      	blx	r3
     b2e:	2800      	cmp	r0, #0
     b30:	d004      	beq.n	b3c <i2c_s_async_set_addr+0x28>
	return _i2c_s_async_set_address(&descr->device, address);
     b32:	0029      	movs	r1, r5
     b34:	0020      	movs	r0, r4
     b36:	4b07      	ldr	r3, [pc, #28]	; (b54 <i2c_s_async_set_addr+0x40>)
     b38:	4798      	blx	r3
}
     b3a:	bd70      	pop	{r4, r5, r6, pc}
		return _i2c_s_async_set_address(&descr->device, address & 0x7F);
     b3c:	217f      	movs	r1, #127	; 0x7f
     b3e:	4029      	ands	r1, r5
     b40:	0020      	movs	r0, r4
     b42:	4b04      	ldr	r3, [pc, #16]	; (b54 <i2c_s_async_set_addr+0x40>)
     b44:	4798      	blx	r3
     b46:	e7f8      	b.n	b3a <i2c_s_async_set_addr+0x26>
     b48:	00002308 	.word	0x00002308
     b4c:	00000ed5 	.word	0x00000ed5
     b50:	0000137f 	.word	0x0000137f
     b54:	00001389 	.word	0x00001389

00000b58 <i2c_s_async_register_callback>:
{
     b58:	b570      	push	{r4, r5, r6, lr}
     b5a:	0005      	movs	r5, r0
     b5c:	000c      	movs	r4, r1
     b5e:	0016      	movs	r6, r2
	ASSERT(descr);
     b60:	1e43      	subs	r3, r0, #1
     b62:	4198      	sbcs	r0, r3
     b64:	b2c0      	uxtb	r0, r0
     b66:	229f      	movs	r2, #159	; 0x9f
     b68:	490e      	ldr	r1, [pc, #56]	; (ba4 <i2c_s_async_register_callback+0x4c>)
     b6a:	4b0f      	ldr	r3, [pc, #60]	; (ba8 <i2c_s_async_register_callback+0x50>)
     b6c:	4798      	blx	r3
	switch (type) {
     b6e:	2c05      	cmp	r4, #5
     b70:	d815      	bhi.n	b9e <i2c_s_async_register_callback+0x46>
     b72:	00a4      	lsls	r4, r4, #2
     b74:	4b0d      	ldr	r3, [pc, #52]	; (bac <i2c_s_async_register_callback+0x54>)
     b76:	591b      	ldr	r3, [r3, r4]
     b78:	469f      	mov	pc, r3
		descr->cbs.error = func;
     b7a:	62ae      	str	r6, [r5, #40]	; 0x28
	return ERR_NONE;
     b7c:	2000      	movs	r0, #0
}
     b7e:	bd70      	pop	{r4, r5, r6, pc}
		descr->cbs.tx_pending = func;
     b80:	62ee      	str	r6, [r5, #44]	; 0x2c
	return ERR_NONE;
     b82:	2000      	movs	r0, #0
		break;
     b84:	e7fb      	b.n	b7e <i2c_s_async_register_callback+0x26>
		descr->cbs.tx = func;
     b86:	632e      	str	r6, [r5, #48]	; 0x30
	return ERR_NONE;
     b88:	2000      	movs	r0, #0
		break;
     b8a:	e7f8      	b.n	b7e <i2c_s_async_register_callback+0x26>
		descr->cbs.rx = func;
     b8c:	636e      	str	r6, [r5, #52]	; 0x34
	return ERR_NONE;
     b8e:	2000      	movs	r0, #0
		break;
     b90:	e7f5      	b.n	b7e <i2c_s_async_register_callback+0x26>
		descr->cbs.amatch = func;
     b92:	63ae      	str	r6, [r5, #56]	; 0x38
	return ERR_NONE;
     b94:	2000      	movs	r0, #0
		break;
     b96:	e7f2      	b.n	b7e <i2c_s_async_register_callback+0x26>
		descr->cbs.prec = func;
     b98:	63ee      	str	r6, [r5, #60]	; 0x3c
	return ERR_NONE;
     b9a:	2000      	movs	r0, #0
		break;
     b9c:	e7ef      	b.n	b7e <i2c_s_async_register_callback+0x26>
		return ERR_INVALID_DATA;
     b9e:	2001      	movs	r0, #1
     ba0:	4240      	negs	r0, r0
     ba2:	e7ec      	b.n	b7e <i2c_s_async_register_callback+0x26>
     ba4:	00002308 	.word	0x00002308
     ba8:	00000ed5 	.word	0x00000ed5
     bac:	000022f0 	.word	0x000022f0

00000bb0 <i2c_s_async_get_io_descriptor>:
{
     bb0:	b570      	push	{r4, r5, r6, lr}
     bb2:	0004      	movs	r4, r0
     bb4:	000d      	movs	r5, r1
	ASSERT(descr && io);
     bb6:	2800      	cmp	r0, #0
     bb8:	d00b      	beq.n	bd2 <i2c_s_async_get_io_descriptor+0x22>
     bba:	0008      	movs	r0, r1
     bbc:	1e43      	subs	r3, r0, #1
     bbe:	4198      	sbcs	r0, r3
     bc0:	b2c0      	uxtb	r0, r0
     bc2:	22c1      	movs	r2, #193	; 0xc1
     bc4:	4904      	ldr	r1, [pc, #16]	; (bd8 <i2c_s_async_get_io_descriptor+0x28>)
     bc6:	4b05      	ldr	r3, [pc, #20]	; (bdc <i2c_s_async_get_io_descriptor+0x2c>)
     bc8:	4798      	blx	r3
	*io = &descr->io;
     bca:	3420      	adds	r4, #32
     bcc:	602c      	str	r4, [r5, #0]
}
     bce:	2000      	movs	r0, #0
     bd0:	bd70      	pop	{r4, r5, r6, pc}
     bd2:	2000      	movs	r0, #0
     bd4:	e7f5      	b.n	bc2 <i2c_s_async_get_io_descriptor+0x12>
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00002308 	.word	0x00002308
     bdc:	00000ed5 	.word	0x00000ed5

00000be0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     be0:	b570      	push	{r4, r5, r6, lr}
     be2:	0006      	movs	r6, r0
     be4:	000c      	movs	r4, r1
     be6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     be8:	2800      	cmp	r0, #0
     bea:	d00d      	beq.n	c08 <io_write+0x28>
     bec:	0008      	movs	r0, r1
     bee:	1e43      	subs	r3, r0, #1
     bf0:	4198      	sbcs	r0, r3
     bf2:	b2c0      	uxtb	r0, r0
     bf4:	2234      	movs	r2, #52	; 0x34
     bf6:	4905      	ldr	r1, [pc, #20]	; (c0c <io_write+0x2c>)
     bf8:	4b05      	ldr	r3, [pc, #20]	; (c10 <io_write+0x30>)
     bfa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     bfc:	6833      	ldr	r3, [r6, #0]
     bfe:	002a      	movs	r2, r5
     c00:	0021      	movs	r1, r4
     c02:	0030      	movs	r0, r6
     c04:	4798      	blx	r3
}
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	2000      	movs	r0, #0
     c0a:	e7f3      	b.n	bf4 <io_write+0x14>
     c0c:	00002328 	.word	0x00002328
     c10:	00000ed5 	.word	0x00000ed5

00000c14 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     c14:	b570      	push	{r4, r5, r6, lr}
     c16:	0006      	movs	r6, r0
     c18:	000c      	movs	r4, r1
     c1a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     c1c:	2800      	cmp	r0, #0
     c1e:	d00d      	beq.n	c3c <io_read+0x28>
     c20:	0008      	movs	r0, r1
     c22:	1e43      	subs	r3, r0, #1
     c24:	4198      	sbcs	r0, r3
     c26:	b2c0      	uxtb	r0, r0
     c28:	223d      	movs	r2, #61	; 0x3d
     c2a:	4905      	ldr	r1, [pc, #20]	; (c40 <io_read+0x2c>)
     c2c:	4b05      	ldr	r3, [pc, #20]	; (c44 <io_read+0x30>)
     c2e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     c30:	6873      	ldr	r3, [r6, #4]
     c32:	002a      	movs	r2, r5
     c34:	0021      	movs	r1, r4
     c36:	0030      	movs	r0, r6
     c38:	4798      	blx	r3
}
     c3a:	bd70      	pop	{r4, r5, r6, pc}
     c3c:	2000      	movs	r0, #0
     c3e:	e7f3      	b.n	c28 <io_read+0x14>
     c40:	00002328 	.word	0x00002328
     c44:	00000ed5 	.word	0x00000ed5

00000c48 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     c48:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     c4a:	6943      	ldr	r3, [r0, #20]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d000      	beq.n	c52 <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     c50:	4798      	blx	r3
	}
}
     c52:	bd10      	pop	{r4, pc}

00000c54 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     c54:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     c56:	6983      	ldr	r3, [r0, #24]
     c58:	2b00      	cmp	r3, #0
     c5a:	d000      	beq.n	c5e <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     c5c:	4798      	blx	r3
	}
}
     c5e:	bd10      	pop	{r4, pc}

00000c60 <pwm_init>:
{
     c60:	b570      	push	{r4, r5, r6, lr}
     c62:	0004      	movs	r4, r0
     c64:	000d      	movs	r5, r1
     c66:	0016      	movs	r6, r2
	ASSERT(descr && hw && func);
     c68:	2800      	cmp	r0, #0
     c6a:	d013      	beq.n	c94 <pwm_init+0x34>
     c6c:	2900      	cmp	r1, #0
     c6e:	d013      	beq.n	c98 <pwm_init+0x38>
     c70:	0010      	movs	r0, r2
     c72:	1e43      	subs	r3, r0, #1
     c74:	4198      	sbcs	r0, r3
     c76:	2233      	movs	r2, #51	; 0x33
     c78:	4908      	ldr	r1, [pc, #32]	; (c9c <pwm_init+0x3c>)
     c7a:	4b09      	ldr	r3, [pc, #36]	; (ca0 <pwm_init+0x40>)
     c7c:	4798      	blx	r3
	descr->func = func;
     c7e:	61e6      	str	r6, [r4, #28]
	descr->func->init(&descr->device, hw);
     c80:	6833      	ldr	r3, [r6, #0]
     c82:	0029      	movs	r1, r5
     c84:	0020      	movs	r0, r4
     c86:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     c88:	4b06      	ldr	r3, [pc, #24]	; (ca4 <pwm_init+0x44>)
     c8a:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     c8c:	4b06      	ldr	r3, [pc, #24]	; (ca8 <pwm_init+0x48>)
     c8e:	6063      	str	r3, [r4, #4]
}
     c90:	2000      	movs	r0, #0
     c92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
     c94:	2000      	movs	r0, #0
     c96:	e7ee      	b.n	c76 <pwm_init+0x16>
     c98:	2000      	movs	r0, #0
     c9a:	e7ec      	b.n	c76 <pwm_init+0x16>
     c9c:	0000233c 	.word	0x0000233c
     ca0:	00000ed5 	.word	0x00000ed5
     ca4:	00000c49 	.word	0x00000c49
     ca8:	00000c55 	.word	0x00000c55

00000cac <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cae:	46ce      	mov	lr, r9
     cb0:	4647      	mov	r7, r8
     cb2:	b580      	push	{r7, lr}
     cb4:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     cb6:	6803      	ldr	r3, [r0, #0]
     cb8:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     cba:	2b00      	cmp	r3, #0
     cbc:	d005      	beq.n	cca <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     cbe:	688e      	ldr	r6, [r1, #8]
     cc0:	001c      	movs	r4, r3
     cc2:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     cc4:	2701      	movs	r7, #1
     cc6:	1abf      	subs	r7, r7, r2
     cc8:	e00d      	b.n	ce6 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     cca:	4b12      	ldr	r3, [pc, #72]	; (d14 <timer_add_timer_task+0x68>)
     ccc:	4798      	blx	r3
		return;
     cce:	e018      	b.n	d02 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     cd0:	18fb      	adds	r3, r7, r3
     cd2:	68a0      	ldr	r0, [r4, #8]
     cd4:	4680      	mov	r8, r0
     cd6:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     cd8:	42b3      	cmp	r3, r6
     cda:	d20c      	bcs.n	cf6 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     cdc:	6823      	ldr	r3, [r4, #0]
     cde:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     ce0:	2b00      	cmp	r3, #0
     ce2:	d00b      	beq.n	cfc <timer_add_timer_task+0x50>
     ce4:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     ce6:	6863      	ldr	r3, [r4, #4]
     ce8:	4293      	cmp	r3, r2
     cea:	d8f1      	bhi.n	cd0 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     cec:	68a0      	ldr	r0, [r4, #8]
     cee:	4680      	mov	r8, r0
     cf0:	4443      	add	r3, r8
     cf2:	1a9b      	subs	r3, r3, r2
     cf4:	e7f0      	b.n	cd8 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     cf6:	45a4      	cmp	ip, r4
     cf8:	d007      	beq.n	d0a <timer_add_timer_task+0x5e>
     cfa:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     cfc:	0020      	movs	r0, r4
     cfe:	4b06      	ldr	r3, [pc, #24]	; (d18 <timer_add_timer_task+0x6c>)
     d00:	4798      	blx	r3
	}
}
     d02:	bc0c      	pop	{r2, r3}
     d04:	4690      	mov	r8, r2
     d06:	4699      	mov	r9, r3
     d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     d0a:	4648      	mov	r0, r9
     d0c:	4b01      	ldr	r3, [pc, #4]	; (d14 <timer_add_timer_task+0x68>)
     d0e:	4798      	blx	r3
     d10:	e7f7      	b.n	d02 <timer_add_timer_task+0x56>
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	00000f01 	.word	0x00000f01
     d18:	00000f2d 	.word	0x00000f2d

00000d1c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d1e:	46c6      	mov	lr, r8
     d20:	b500      	push	{lr}
     d22:	b082      	sub	sp, #8
     d24:	0007      	movs	r7, r0
	return (void *)list->head;
     d26:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     d28:	6903      	ldr	r3, [r0, #16]
     d2a:	3301      	adds	r3, #1
     d2c:	4698      	mov	r8, r3
     d2e:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     d30:	7e03      	ldrb	r3, [r0, #24]
     d32:	07db      	lsls	r3, r3, #31
     d34:	d411      	bmi.n	d5a <timer_process_counted+0x3e>
     d36:	7e03      	ldrb	r3, [r0, #24]
     d38:	079b      	lsls	r3, r3, #30
     d3a:	d40e      	bmi.n	d5a <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     d3c:	2c00      	cmp	r4, #0
     d3e:	d010      	beq.n	d62 <timer_process_counted+0x46>
     d40:	4643      	mov	r3, r8
     d42:	6862      	ldr	r2, [r4, #4]
     d44:	1a9b      	subs	r3, r3, r2
     d46:	68a2      	ldr	r2, [r4, #8]
     d48:	4293      	cmp	r3, r2
     d4a:	d30a      	bcc.n	d62 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     d4c:	2314      	movs	r3, #20
     d4e:	469c      	mov	ip, r3
     d50:	4484      	add	ip, r0
     d52:	4663      	mov	r3, ip
     d54:	9301      	str	r3, [sp, #4]
     d56:	4e12      	ldr	r6, [pc, #72]	; (da0 <timer_process_counted+0x84>)
     d58:	e014      	b.n	d84 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     d5a:	7e3b      	ldrb	r3, [r7, #24]
     d5c:	2202      	movs	r2, #2
     d5e:	4313      	orrs	r3, r2
     d60:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     d62:	b002      	add	sp, #8
     d64:	bc04      	pop	{r2}
     d66:	4690      	mov	r8, r2
     d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d6a:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     d6c:	68e3      	ldr	r3, [r4, #12]
     d6e:	0020      	movs	r0, r4
     d70:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     d72:	2d00      	cmp	r5, #0
     d74:	d0f5      	beq.n	d62 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     d76:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     d78:	4643      	mov	r3, r8
     d7a:	686a      	ldr	r2, [r5, #4]
     d7c:	1a9b      	subs	r3, r3, r2
     d7e:	68aa      	ldr	r2, [r5, #8]
     d80:	4293      	cmp	r3, r2
     d82:	d3ee      	bcc.n	d62 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     d84:	9801      	ldr	r0, [sp, #4]
     d86:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     d88:	7c23      	ldrb	r3, [r4, #16]
     d8a:	2b01      	cmp	r3, #1
     d8c:	d1ed      	bne.n	d6a <timer_process_counted+0x4e>
			tmp->time_label = time;
     d8e:	4643      	mov	r3, r8
     d90:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     d92:	4642      	mov	r2, r8
     d94:	0021      	movs	r1, r4
     d96:	9801      	ldr	r0, [sp, #4]
     d98:	4b02      	ldr	r3, [pc, #8]	; (da4 <timer_process_counted+0x88>)
     d9a:	4798      	blx	r3
     d9c:	e7e5      	b.n	d6a <timer_process_counted+0x4e>
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	00000f35 	.word	0x00000f35
     da4:	00000cad 	.word	0x00000cad

00000da8 <timer_init>:
{
     da8:	b570      	push	{r4, r5, r6, lr}
     daa:	0005      	movs	r5, r0
     dac:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     dae:	2800      	cmp	r0, #0
     db0:	d011      	beq.n	dd6 <timer_init+0x2e>
     db2:	0008      	movs	r0, r1
     db4:	1e43      	subs	r3, r0, #1
     db6:	4198      	sbcs	r0, r3
     db8:	b2c0      	uxtb	r0, r0
     dba:	223b      	movs	r2, #59	; 0x3b
     dbc:	4907      	ldr	r1, [pc, #28]	; (ddc <timer_init+0x34>)
     dbe:	4b08      	ldr	r3, [pc, #32]	; (de0 <timer_init+0x38>)
     dc0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     dc2:	0021      	movs	r1, r4
     dc4:	0028      	movs	r0, r5
     dc6:	4b07      	ldr	r3, [pc, #28]	; (de4 <timer_init+0x3c>)
     dc8:	4798      	blx	r3
	descr->time                           = 0;
     dca:	2300      	movs	r3, #0
     dcc:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     dce:	4b06      	ldr	r3, [pc, #24]	; (de8 <timer_init+0x40>)
     dd0:	602b      	str	r3, [r5, #0]
}
     dd2:	2000      	movs	r0, #0
     dd4:	bd70      	pop	{r4, r5, r6, pc}
     dd6:	2000      	movs	r0, #0
     dd8:	e7ef      	b.n	dba <timer_init+0x12>
     dda:	46c0      	nop			; (mov r8, r8)
     ddc:	00002354 	.word	0x00002354
     de0:	00000ed5 	.word	0x00000ed5
     de4:	000010f9 	.word	0x000010f9
     de8:	00000d1d 	.word	0x00000d1d

00000dec <timer_start>:
{
     dec:	b510      	push	{r4, lr}
     dee:	0004      	movs	r4, r0
	ASSERT(descr);
     df0:	1e43      	subs	r3, r0, #1
     df2:	4198      	sbcs	r0, r3
     df4:	b2c0      	uxtb	r0, r0
     df6:	2253      	movs	r2, #83	; 0x53
     df8:	4907      	ldr	r1, [pc, #28]	; (e18 <timer_start+0x2c>)
     dfa:	4b08      	ldr	r3, [pc, #32]	; (e1c <timer_start+0x30>)
     dfc:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     dfe:	0020      	movs	r0, r4
     e00:	4b07      	ldr	r3, [pc, #28]	; (e20 <timer_start+0x34>)
     e02:	4798      	blx	r3
     e04:	2800      	cmp	r0, #0
     e06:	d104      	bne.n	e12 <timer_start+0x26>
	_timer_start(&descr->device);
     e08:	0020      	movs	r0, r4
     e0a:	4b06      	ldr	r3, [pc, #24]	; (e24 <timer_start+0x38>)
     e0c:	4798      	blx	r3
	return ERR_NONE;
     e0e:	2000      	movs	r0, #0
}
     e10:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     e12:	2011      	movs	r0, #17
     e14:	4240      	negs	r0, r0
     e16:	e7fb      	b.n	e10 <timer_start+0x24>
     e18:	00002354 	.word	0x00002354
     e1c:	00000ed5 	.word	0x00000ed5
     e20:	000011a9 	.word	0x000011a9
     e24:	00001155 	.word	0x00001155

00000e28 <timer_add_task>:
{
     e28:	b570      	push	{r4, r5, r6, lr}
     e2a:	b082      	sub	sp, #8
     e2c:	0004      	movs	r4, r0
     e2e:	000d      	movs	r5, r1
	ASSERT(descr && task);
     e30:	2800      	cmp	r0, #0
     e32:	d024      	beq.n	e7e <timer_add_task+0x56>
     e34:	0008      	movs	r0, r1
     e36:	1e43      	subs	r3, r0, #1
     e38:	4198      	sbcs	r0, r3
     e3a:	b2c0      	uxtb	r0, r0
     e3c:	227a      	movs	r2, #122	; 0x7a
     e3e:	491e      	ldr	r1, [pc, #120]	; (eb8 <timer_add_task+0x90>)
     e40:	4b1e      	ldr	r3, [pc, #120]	; (ebc <timer_add_task+0x94>)
     e42:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     e44:	7e23      	ldrb	r3, [r4, #24]
     e46:	2201      	movs	r2, #1
     e48:	4313      	orrs	r3, r2
     e4a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     e4c:	0026      	movs	r6, r4
     e4e:	3614      	adds	r6, #20
     e50:	0029      	movs	r1, r5
     e52:	0030      	movs	r0, r6
     e54:	4b1a      	ldr	r3, [pc, #104]	; (ec0 <timer_add_task+0x98>)
     e56:	4798      	blx	r3
     e58:	2800      	cmp	r0, #0
     e5a:	d112      	bne.n	e82 <timer_add_task+0x5a>
	task->time_label = descr->time;
     e5c:	6923      	ldr	r3, [r4, #16]
     e5e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     e60:	6922      	ldr	r2, [r4, #16]
     e62:	0029      	movs	r1, r5
     e64:	0030      	movs	r0, r6
     e66:	4b17      	ldr	r3, [pc, #92]	; (ec4 <timer_add_task+0x9c>)
     e68:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     e6a:	7e23      	ldrb	r3, [r4, #24]
     e6c:	2201      	movs	r2, #1
     e6e:	4393      	bics	r3, r2
     e70:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     e72:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     e74:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     e76:	079b      	lsls	r3, r3, #30
     e78:	d40f      	bmi.n	e9a <timer_add_task+0x72>
}
     e7a:	b002      	add	sp, #8
     e7c:	bd70      	pop	{r4, r5, r6, pc}
     e7e:	2000      	movs	r0, #0
     e80:	e7dc      	b.n	e3c <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     e82:	7e23      	ldrb	r3, [r4, #24]
     e84:	2201      	movs	r2, #1
     e86:	4393      	bics	r3, r2
     e88:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     e8a:	327e      	adds	r2, #126	; 0x7e
     e8c:	490a      	ldr	r1, [pc, #40]	; (eb8 <timer_add_task+0x90>)
     e8e:	2000      	movs	r0, #0
     e90:	4b0a      	ldr	r3, [pc, #40]	; (ebc <timer_add_task+0x94>)
     e92:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     e94:	2012      	movs	r0, #18
     e96:	4240      	negs	r0, r0
     e98:	e7ef      	b.n	e7a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     e9a:	a801      	add	r0, sp, #4
     e9c:	4b0a      	ldr	r3, [pc, #40]	; (ec8 <timer_add_task+0xa0>)
     e9e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     ea0:	7e23      	ldrb	r3, [r4, #24]
     ea2:	2202      	movs	r2, #2
     ea4:	4393      	bics	r3, r2
     ea6:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     ea8:	0020      	movs	r0, r4
     eaa:	4b08      	ldr	r3, [pc, #32]	; (ecc <timer_add_task+0xa4>)
     eac:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     eae:	a801      	add	r0, sp, #4
     eb0:	4b07      	ldr	r3, [pc, #28]	; (ed0 <timer_add_task+0xa8>)
     eb2:	4798      	blx	r3
	return ERR_NONE;
     eb4:	2000      	movs	r0, #0
     eb6:	e7e0      	b.n	e7a <timer_add_task+0x52>
     eb8:	00002354 	.word	0x00002354
     ebc:	00000ed5 	.word	0x00000ed5
     ec0:	00000edd 	.word	0x00000edd
     ec4:	00000cad 	.word	0x00000cad
     ec8:	00000839 	.word	0x00000839
     ecc:	000011b9 	.word	0x000011b9
     ed0:	00000847 	.word	0x00000847

00000ed4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ed4:	2800      	cmp	r0, #0
     ed6:	d100      	bne.n	eda <assert+0x6>
		__asm("BKPT #0");
     ed8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     eda:	4770      	bx	lr

00000edc <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     edc:	6803      	ldr	r3, [r0, #0]
     ede:	2b00      	cmp	r3, #0
     ee0:	d00a      	beq.n	ef8 <is_list_element+0x1c>
		if (it == element) {
     ee2:	428b      	cmp	r3, r1
     ee4:	d00a      	beq.n	efc <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	2b00      	cmp	r3, #0
     eea:	d003      	beq.n	ef4 <is_list_element+0x18>
		if (it == element) {
     eec:	4299      	cmp	r1, r3
     eee:	d1fa      	bne.n	ee6 <is_list_element+0xa>
			return true;
     ef0:	2001      	movs	r0, #1
     ef2:	e000      	b.n	ef6 <is_list_element+0x1a>
		}
	}

	return false;
     ef4:	2000      	movs	r0, #0
}
     ef6:	4770      	bx	lr
	return false;
     ef8:	2000      	movs	r0, #0
     efa:	e7fc      	b.n	ef6 <is_list_element+0x1a>
			return true;
     efc:	2001      	movs	r0, #1
     efe:	e7fa      	b.n	ef6 <is_list_element+0x1a>

00000f00 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     f00:	b570      	push	{r4, r5, r6, lr}
     f02:	0004      	movs	r4, r0
     f04:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     f06:	4b06      	ldr	r3, [pc, #24]	; (f20 <list_insert_as_head+0x20>)
     f08:	4798      	blx	r3
     f0a:	2301      	movs	r3, #1
     f0c:	4058      	eors	r0, r3
     f0e:	b2c0      	uxtb	r0, r0
     f10:	2239      	movs	r2, #57	; 0x39
     f12:	4904      	ldr	r1, [pc, #16]	; (f24 <list_insert_as_head+0x24>)
     f14:	4b04      	ldr	r3, [pc, #16]	; (f28 <list_insert_as_head+0x28>)
     f16:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     f18:	6823      	ldr	r3, [r4, #0]
     f1a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     f1c:	6025      	str	r5, [r4, #0]
}
     f1e:	bd70      	pop	{r4, r5, r6, pc}
     f20:	00000edd 	.word	0x00000edd
     f24:	0000236c 	.word	0x0000236c
     f28:	00000ed5 	.word	0x00000ed5

00000f2c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     f2c:	6803      	ldr	r3, [r0, #0]
     f2e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     f30:	6001      	str	r1, [r0, #0]
}
     f32:	4770      	bx	lr

00000f34 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     f34:	6803      	ldr	r3, [r0, #0]
     f36:	2b00      	cmp	r3, #0
     f38:	d001      	beq.n	f3e <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     f3a:	681a      	ldr	r2, [r3, #0]
     f3c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     f3e:	0018      	movs	r0, r3
     f40:	4770      	bx	lr
	...

00000f44 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     f44:	b570      	push	{r4, r5, r6, lr}
     f46:	0004      	movs	r4, r0
     f48:	000e      	movs	r6, r1
     f4a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     f4c:	2800      	cmp	r0, #0
     f4e:	d00b      	beq.n	f68 <ringbuffer_init+0x24>
     f50:	2900      	cmp	r1, #0
     f52:	d018      	beq.n	f86 <ringbuffer_init+0x42>
     f54:	2001      	movs	r0, #1
     f56:	2a00      	cmp	r2, #0
     f58:	d107      	bne.n	f6a <ringbuffer_init+0x26>
     f5a:	2228      	movs	r2, #40	; 0x28
     f5c:	490c      	ldr	r1, [pc, #48]	; (f90 <ringbuffer_init+0x4c>)
     f5e:	2000      	movs	r0, #0
     f60:	4b0c      	ldr	r3, [pc, #48]	; (f94 <ringbuffer_init+0x50>)
     f62:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     f64:	1e6b      	subs	r3, r5, #1
     f66:	e007      	b.n	f78 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     f68:	2000      	movs	r0, #0
     f6a:	2228      	movs	r2, #40	; 0x28
     f6c:	4908      	ldr	r1, [pc, #32]	; (f90 <ringbuffer_init+0x4c>)
     f6e:	4b09      	ldr	r3, [pc, #36]	; (f94 <ringbuffer_init+0x50>)
     f70:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     f72:	1e6b      	subs	r3, r5, #1
     f74:	422b      	tst	r3, r5
     f76:	d108      	bne.n	f8a <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     f78:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     f7a:	2300      	movs	r3, #0
     f7c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     f7e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     f80:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     f82:	2000      	movs	r0, #0
}
     f84:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     f86:	2000      	movs	r0, #0
     f88:	e7ef      	b.n	f6a <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     f8a:	200d      	movs	r0, #13
     f8c:	4240      	negs	r0, r0
     f8e:	e7f9      	b.n	f84 <ringbuffer_init+0x40>
     f90:	0000238c 	.word	0x0000238c
     f94:	00000ed5 	.word	0x00000ed5

00000f98 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     f98:	b570      	push	{r4, r5, r6, lr}
     f9a:	0004      	movs	r4, r0
     f9c:	000d      	movs	r5, r1
	ASSERT(rb && data);
     f9e:	2800      	cmp	r0, #0
     fa0:	d015      	beq.n	fce <ringbuffer_get+0x36>
     fa2:	0008      	movs	r0, r1
     fa4:	1e43      	subs	r3, r0, #1
     fa6:	4198      	sbcs	r0, r3
     fa8:	b2c0      	uxtb	r0, r0
     faa:	2240      	movs	r2, #64	; 0x40
     fac:	490a      	ldr	r1, [pc, #40]	; (fd8 <ringbuffer_get+0x40>)
     fae:	4b0b      	ldr	r3, [pc, #44]	; (fdc <ringbuffer_get+0x44>)
     fb0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     fb2:	68a3      	ldr	r3, [r4, #8]
     fb4:	68e2      	ldr	r2, [r4, #12]
     fb6:	429a      	cmp	r2, r3
     fb8:	d00b      	beq.n	fd2 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     fba:	6862      	ldr	r2, [r4, #4]
     fbc:	4013      	ands	r3, r2
     fbe:	6822      	ldr	r2, [r4, #0]
     fc0:	5cd3      	ldrb	r3, [r2, r3]
     fc2:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     fc4:	68a3      	ldr	r3, [r4, #8]
     fc6:	3301      	adds	r3, #1
     fc8:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     fca:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     fcc:	bd70      	pop	{r4, r5, r6, pc}
     fce:	2000      	movs	r0, #0
     fd0:	e7eb      	b.n	faa <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     fd2:	200a      	movs	r0, #10
     fd4:	4240      	negs	r0, r0
     fd6:	e7f9      	b.n	fcc <ringbuffer_get+0x34>
     fd8:	0000238c 	.word	0x0000238c
     fdc:	00000ed5 	.word	0x00000ed5

00000fe0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	0004      	movs	r4, r0
     fe4:	000d      	movs	r5, r1
	ASSERT(rb);
     fe6:	1e43      	subs	r3, r0, #1
     fe8:	4198      	sbcs	r0, r3
     fea:	b2c0      	uxtb	r0, r0
     fec:	2251      	movs	r2, #81	; 0x51
     fee:	490a      	ldr	r1, [pc, #40]	; (1018 <STACK_SIZE+0x18>)
     ff0:	4b0a      	ldr	r3, [pc, #40]	; (101c <STACK_SIZE+0x1c>)
     ff2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     ff4:	6863      	ldr	r3, [r4, #4]
     ff6:	68e2      	ldr	r2, [r4, #12]
     ff8:	4013      	ands	r3, r2
     ffa:	6822      	ldr	r2, [r4, #0]
     ffc:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     ffe:	68e3      	ldr	r3, [r4, #12]
    1000:	6861      	ldr	r1, [r4, #4]
    1002:	68a2      	ldr	r2, [r4, #8]
    1004:	1a9a      	subs	r2, r3, r2
    1006:	428a      	cmp	r2, r1
    1008:	d901      	bls.n	100e <STACK_SIZE+0xe>
		rb->read_index = rb->write_index - rb->size;
    100a:	1a59      	subs	r1, r3, r1
    100c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    100e:	3301      	adds	r3, #1
    1010:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1012:	2000      	movs	r0, #0
    1014:	bd70      	pop	{r4, r5, r6, pc}
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	0000238c 	.word	0x0000238c
    101c:	00000ed5 	.word	0x00000ed5

00001020 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1020:	b510      	push	{r4, lr}
    1022:	0004      	movs	r4, r0
	ASSERT(rb);
    1024:	1e43      	subs	r3, r0, #1
    1026:	4198      	sbcs	r0, r3
    1028:	b2c0      	uxtb	r0, r0
    102a:	2267      	movs	r2, #103	; 0x67
    102c:	4903      	ldr	r1, [pc, #12]	; (103c <ringbuffer_num+0x1c>)
    102e:	4b04      	ldr	r3, [pc, #16]	; (1040 <ringbuffer_num+0x20>)
    1030:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1032:	68e0      	ldr	r0, [r4, #12]
    1034:	68a3      	ldr	r3, [r4, #8]
    1036:	1ac0      	subs	r0, r0, r3
}
    1038:	bd10      	pop	{r4, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	0000238c 	.word	0x0000238c
    1040:	00000ed5 	.word	0x00000ed5

00001044 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1044:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1046:	4a08      	ldr	r2, [pc, #32]	; (1068 <_init_chip+0x24>)
    1048:	6853      	ldr	r3, [r2, #4]
    104a:	2102      	movs	r1, #2
    104c:	430b      	orrs	r3, r1
    104e:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1050:	4b06      	ldr	r3, [pc, #24]	; (106c <_init_chip+0x28>)
    1052:	4798      	blx	r3
	_sysctrl_init_sources();
    1054:	4b06      	ldr	r3, [pc, #24]	; (1070 <_init_chip+0x2c>)
    1056:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1058:	2008      	movs	r0, #8
    105a:	4c06      	ldr	r4, [pc, #24]	; (1074 <_init_chip+0x30>)
    105c:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    105e:	4b06      	ldr	r3, [pc, #24]	; (1078 <_init_chip+0x34>)
    1060:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1062:	20f7      	movs	r0, #247	; 0xf7
    1064:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1066:	bd10      	pop	{r4, pc}
    1068:	41004000 	.word	0x41004000
    106c:	000010d9 	.word	0x000010d9
    1070:	000014b5 	.word	0x000014b5
    1074:	0000107d 	.word	0x0000107d
    1078:	000014fd 	.word	0x000014fd

0000107c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    107c:	07c3      	lsls	r3, r0, #31
    107e:	d509      	bpl.n	1094 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1080:	4b10      	ldr	r3, [pc, #64]	; (10c4 <_gclk_init_generators_by_fref+0x48>)
    1082:	2280      	movs	r2, #128	; 0x80
    1084:	0052      	lsls	r2, r2, #1
    1086:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1088:	4a0f      	ldr	r2, [pc, #60]	; (10c8 <_gclk_init_generators_by_fref+0x4c>)
    108a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    108c:	001a      	movs	r2, r3
    108e:	7853      	ldrb	r3, [r2, #1]
    1090:	09db      	lsrs	r3, r3, #7
    1092:	d1fc      	bne.n	108e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1094:	0783      	lsls	r3, r0, #30
    1096:	d509      	bpl.n	10ac <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    1098:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <_gclk_init_generators_by_fref+0x48>)
    109a:	2202      	movs	r2, #2
    109c:	32ff      	adds	r2, #255	; 0xff
    109e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    10a0:	4a0a      	ldr	r2, [pc, #40]	; (10cc <_gclk_init_generators_by_fref+0x50>)
    10a2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    10a4:	001a      	movs	r2, r3
    10a6:	7853      	ldrb	r3, [r2, #1]
    10a8:	09db      	lsrs	r3, r3, #7
    10aa:	d1fc      	bne.n	10a6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    10ac:	0703      	lsls	r3, r0, #28
    10ae:	d508      	bpl.n	10c2 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
    10b0:	4b04      	ldr	r3, [pc, #16]	; (10c4 <_gclk_init_generators_by_fref+0x48>)
    10b2:	4a07      	ldr	r2, [pc, #28]	; (10d0 <_gclk_init_generators_by_fref+0x54>)
    10b4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    10b6:	4a07      	ldr	r2, [pc, #28]	; (10d4 <_gclk_init_generators_by_fref+0x58>)
    10b8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    10ba:	001a      	movs	r2, r3
    10bc:	7853      	ldrb	r3, [r2, #1]
    10be:	09db      	lsrs	r3, r3, #7
    10c0:	d1fc      	bne.n	10bc <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    10c2:	4770      	bx	lr
    10c4:	40000c00 	.word	0x40000c00
    10c8:	00010700 	.word	0x00010700
    10cc:	00010601 	.word	0x00010601
    10d0:	00002003 	.word	0x00002003
    10d4:	00010603 	.word	0x00010603

000010d8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    10d8:	4b06      	ldr	r3, [pc, #24]	; (10f4 <_pm_init+0x1c>)
    10da:	7a1a      	ldrb	r2, [r3, #8]
    10dc:	b2d2      	uxtb	r2, r2
    10de:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    10e0:	7a5a      	ldrb	r2, [r3, #9]
    10e2:	b2d2      	uxtb	r2, r2
    10e4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    10e6:	7a9a      	ldrb	r2, [r3, #10]
    10e8:	b2d2      	uxtb	r2, r2
    10ea:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    10ec:	7ada      	ldrb	r2, [r3, #11]
    10ee:	b2d2      	uxtb	r2, r2
    10f0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    10f2:	4770      	bx	lr
    10f4:	40000400 	.word	0x40000400

000010f8 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    10f8:	b570      	push	{r4, r5, r6, lr}
    10fa:	0004      	movs	r4, r0
    10fc:	000d      	movs	r5, r1
	ASSERT(dev);
    10fe:	1e43      	subs	r3, r0, #1
    1100:	4198      	sbcs	r0, r3
    1102:	b2c0      	uxtb	r0, r0
    1104:	2233      	movs	r2, #51	; 0x33
    1106:	4910      	ldr	r1, [pc, #64]	; (1148 <_timer_init+0x50>)
    1108:	4b10      	ldr	r3, [pc, #64]	; (114c <_timer_init+0x54>)
    110a:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
    110c:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    110e:	2301      	movs	r3, #1
    1110:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1112:	7aab      	ldrb	r3, [r5, #10]
    1114:	09db      	lsrs	r3, r3, #7
    1116:	d1fc      	bne.n	1112 <_timer_init+0x1a>

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw);
    1118:	68e2      	ldr	r2, [r4, #12]
    111a:	7a93      	ldrb	r3, [r2, #10]
    111c:	09db      	lsrs	r3, r3, #7
    111e:	d1fc      	bne.n	111a <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    1120:	3380      	adds	r3, #128	; 0x80
    1122:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1124:	7a93      	ldrb	r3, [r2, #10]
    1126:	09db      	lsrs	r3, r3, #7
    1128:	d1fc      	bne.n	1124 <_timer_init+0x2c>
	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
    112a:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    112c:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    112e:	2380      	movs	r3, #128	; 0x80
    1130:	00db      	lsls	r3, r3, #3
    1132:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1134:	7a93      	ldrb	r3, [r2, #10]
    1136:	09db      	lsrs	r3, r3, #7
    1138:	d1fc      	bne.n	1134 <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    113a:	3301      	adds	r3, #1
    113c:	68e2      	ldr	r2, [r4, #12]
    113e:	71d3      	strb	r3, [r2, #7]
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
    1140:	4b03      	ldr	r3, [pc, #12]	; (1150 <_timer_init+0x58>)
    1142:	601c      	str	r4, [r3, #0]

	return ERR_NONE;
}
    1144:	2000      	movs	r0, #0
    1146:	bd70      	pop	{r4, r5, r6, pc}
    1148:	000023b0 	.word	0x000023b0
    114c:	00000ed5 	.word	0x00000ed5
    1150:	20000158 	.word	0x20000158

00001154 <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
    1154:	b510      	push	{r4, lr}
    1156:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    1158:	d01d      	beq.n	1196 <_timer_start+0x42>
    115a:	68c0      	ldr	r0, [r0, #12]
    115c:	1e43      	subs	r3, r0, #1
    115e:	4198      	sbcs	r0, r3
    1160:	b2c0      	uxtb	r0, r0
    1162:	226a      	movs	r2, #106	; 0x6a
    1164:	490d      	ldr	r1, [pc, #52]	; (119c <_timer_start+0x48>)
    1166:	4b0e      	ldr	r3, [pc, #56]	; (11a0 <_timer_start+0x4c>)
    1168:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	2208      	movs	r2, #8
    116c:	4b0d      	ldr	r3, [pc, #52]	; (11a4 <_timer_start+0x50>)
    116e:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
    1170:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    1172:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
    1174:	2300      	movs	r3, #0
    1176:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1178:	7a93      	ldrb	r3, [r2, #10]
    117a:	09db      	lsrs	r3, r3, #7
    117c:	d1fc      	bne.n	1178 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
    117e:	68e2      	ldr	r2, [r4, #12]
    1180:	7a93      	ldrb	r3, [r2, #10]
    1182:	09db      	lsrs	r3, r3, #7
    1184:	d1fc      	bne.n	1180 <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    1186:	8813      	ldrh	r3, [r2, #0]
    1188:	2102      	movs	r1, #2
    118a:	430b      	orrs	r3, r1
    118c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    118e:	7a93      	ldrb	r3, [r2, #10]
    1190:	09db      	lsrs	r3, r3, #7
    1192:	d1fc      	bne.n	118e <_timer_start+0x3a>
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
}
    1194:	bd10      	pop	{r4, pc}
    1196:	2000      	movs	r0, #0
    1198:	e7e3      	b.n	1162 <_timer_start+0xe>
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	000023b0 	.word	0x000023b0
    11a0:	00000ed5 	.word	0x00000ed5
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
    11a8:	68c2      	ldr	r2, [r0, #12]
    11aa:	7a93      	ldrb	r3, [r2, #10]
    11ac:	09db      	lsrs	r3, r3, #7
    11ae:	d1fc      	bne.n	11aa <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    11b0:	8810      	ldrh	r0, [r2, #0]
	return (bool)tmp;
    11b2:	0780      	lsls	r0, r0, #30
    11b4:	0fc0      	lsrs	r0, r0, #31
}
    11b6:	4770      	bx	lr

000011b8 <_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    11b8:	4770      	bx	lr

000011ba <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    11ba:	2000      	movs	r0, #0
    11bc:	4770      	bx	lr
	...

000011c0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    11c0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    11c2:	4b07      	ldr	r3, [pc, #28]	; (11e0 <RTC_Handler+0x20>)
    11c4:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    11c6:	68e3      	ldr	r3, [r4, #12]
    11c8:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    11ca:	07db      	lsls	r3, r3, #31
    11cc:	d507      	bpl.n	11de <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    11ce:	6823      	ldr	r3, [r4, #0]
    11d0:	2b00      	cmp	r3, #0
    11d2:	d001      	beq.n	11d8 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    11d4:	0020      	movs	r0, r4
    11d6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    11d8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    11da:	2201      	movs	r2, #1
    11dc:	721a      	strb	r2, [r3, #8]
}
    11de:	bd10      	pop	{r4, pc}
    11e0:	20000158 	.word	0x20000158

000011e4 <_i2c_s_set_address>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] address Address to set
 */
static int32_t _i2c_s_set_address(void *const hw, const uint16_t address)
{
    11e4:	b570      	push	{r4, r5, r6, lr}
    11e6:	b082      	sub	sp, #8
    11e8:	0004      	movs	r4, r0
    11ea:	000d      	movs	r5, r1
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
}

static inline void hri_sercomi2cs_wait_for_sync(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    11ec:	2203      	movs	r2, #3
    11ee:	69e3      	ldr	r3, [r4, #28]
    11f0:	421a      	tst	r2, r3
    11f2:	d1fc      	bne.n	11ee <_i2c_s_set_address+0xa>

static inline bool hri_sercomi2cs_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    11f4:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
    11f6:	07b6      	lsls	r6, r6, #30
    11f8:	0ff6      	lsrs	r6, r6, #31
	bool enabled;

	enabled = hri_sercomi2cs_get_CTRLA_ENABLE_bit(hw);

	CRITICAL_SECTION_ENTER()
    11fa:	a801      	add	r0, sp, #4
    11fc:	4b10      	ldr	r3, [pc, #64]	; (1240 <_i2c_s_set_address+0x5c>)
    11fe:	4798      	blx	r3
}

static inline void hri_sercomi2cs_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1200:	6823      	ldr	r3, [r4, #0]
    1202:	2202      	movs	r2, #2
    1204:	4393      	bics	r3, r2
    1206:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1208:	3201      	adds	r2, #1
    120a:	69e3      	ldr	r3, [r4, #28]
    120c:	421a      	tst	r2, r3
    120e:	d1fc      	bne.n	120a <_i2c_s_set_address+0x26>

static inline void hri_sercomi2cs_write_ADDR_ADDR_bf(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1210:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
    1212:	4a0c      	ldr	r2, [pc, #48]	; (1244 <_i2c_s_set_address+0x60>)
    1214:	4013      	ands	r3, r2
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
    1216:	006d      	lsls	r5, r5, #1
    1218:	4a0b      	ldr	r2, [pc, #44]	; (1248 <_i2c_s_set_address+0x64>)
    121a:	4015      	ands	r5, r2
    121c:	431d      	orrs	r5, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
    121e:	6265      	str	r5, [r4, #36]	; 0x24
	hri_sercomi2cs_clear_CTRLA_ENABLE_bit(hw);
	hri_sercomi2cs_write_ADDR_ADDR_bf(hw, address);
	CRITICAL_SECTION_LEAVE()
    1220:	a801      	add	r0, sp, #4
    1222:	4b0a      	ldr	r3, [pc, #40]	; (124c <_i2c_s_set_address+0x68>)
    1224:	4798      	blx	r3

	if (enabled) {
    1226:	2e00      	cmp	r6, #0
    1228:	d007      	beq.n	123a <_i2c_s_set_address+0x56>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    122a:	6823      	ldr	r3, [r4, #0]
    122c:	2202      	movs	r2, #2
    122e:	4313      	orrs	r3, r2
    1230:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1232:	3201      	adds	r2, #1
    1234:	69e3      	ldr	r3, [r4, #28]
    1236:	421a      	tst	r2, r3
    1238:	d1fc      	bne.n	1234 <_i2c_s_set_address+0x50>
		hri_sercomi2cs_set_CTRLA_ENABLE_bit(hw);
	}

	return ERR_NONE;
}
    123a:	2000      	movs	r0, #0
    123c:	b002      	add	sp, #8
    123e:	bd70      	pop	{r4, r5, r6, pc}
    1240:	00000839 	.word	0x00000839
    1244:	fffff801 	.word	0xfffff801
    1248:	000007fe 	.word	0x000007fe
    124c:	00000847 	.word	0x00000847

00001250 <_i2c_s_init>:
{
    1250:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1252:	4b1e      	ldr	r3, [pc, #120]	; (12cc <_i2c_s_init+0x7c>)
    1254:	18c3      	adds	r3, r0, r3
    1256:	0a9b      	lsrs	r3, r3, #10
		if (_i2css[i].number == sercom_offset) {
    1258:	b2db      	uxtb	r3, r3
    125a:	2b01      	cmp	r3, #1
    125c:	d007      	beq.n	126e <_i2c_s_init+0x1e>
	ASSERT(false);
    125e:	4a1c      	ldr	r2, [pc, #112]	; (12d0 <_i2c_s_init+0x80>)
    1260:	491c      	ldr	r1, [pc, #112]	; (12d4 <_i2c_s_init+0x84>)
    1262:	2000      	movs	r0, #0
    1264:	4b1c      	ldr	r3, [pc, #112]	; (12d8 <_i2c_s_init+0x88>)
    1266:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1268:	200d      	movs	r0, #13
    126a:	4240      	negs	r0, r0
    126c:	e02c      	b.n	12c8 <_i2c_s_init+0x78>
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    126e:	69c3      	ldr	r3, [r0, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    1270:	07db      	lsls	r3, r3, #31
    1272:	d418      	bmi.n	12a6 <_i2c_s_init+0x56>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1274:	2203      	movs	r2, #3
    1276:	69c3      	ldr	r3, [r0, #28]
    1278:	421a      	tst	r2, r3
    127a:	d1fc      	bne.n	1276 <_i2c_s_init+0x26>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    127c:	6803      	ldr	r3, [r0, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    127e:	079b      	lsls	r3, r3, #30
    1280:	d50b      	bpl.n	129a <_i2c_s_init+0x4a>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1282:	6803      	ldr	r3, [r0, #0]
    1284:	2202      	movs	r2, #2
    1286:	4393      	bics	r3, r2
    1288:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    128a:	3201      	adds	r2, #1
    128c:	69c3      	ldr	r3, [r0, #28]
    128e:	421a      	tst	r2, r3
    1290:	d1fc      	bne.n	128c <_i2c_s_init+0x3c>
    1292:	2202      	movs	r2, #2
    1294:	69c3      	ldr	r3, [r0, #28]
    1296:	421a      	tst	r2, r3
    1298:	d1fc      	bne.n	1294 <_i2c_s_init+0x44>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    129a:	2311      	movs	r3, #17
    129c:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    129e:	2203      	movs	r2, #3
    12a0:	69c3      	ldr	r3, [r0, #28]
    12a2:	421a      	tst	r2, r3
    12a4:	d1fc      	bne.n	12a0 <_i2c_s_init+0x50>
    12a6:	2201      	movs	r2, #1
    12a8:	69c3      	ldr	r3, [r0, #28]
    12aa:	421a      	tst	r2, r3
    12ac:	d1fc      	bne.n	12a8 <_i2c_s_init+0x58>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    12ae:	4b0b      	ldr	r3, [pc, #44]	; (12dc <_i2c_s_init+0x8c>)
    12b0:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    12b2:	2203      	movs	r2, #3
    12b4:	69c3      	ldr	r3, [r0, #28]
    12b6:	421a      	tst	r2, r3
    12b8:	d1fc      	bne.n	12b4 <_i2c_s_init+0x64>
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    12ba:	23a0      	movs	r3, #160	; 0xa0
    12bc:	00db      	lsls	r3, r3, #3
    12be:	6043      	str	r3, [r0, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    12c0:	23a5      	movs	r3, #165	; 0xa5
    12c2:	005b      	lsls	r3, r3, #1
    12c4:	6243      	str	r3, [r0, #36]	; 0x24
	return ERR_NONE;
    12c6:	2000      	movs	r0, #0
}
    12c8:	bd10      	pop	{r4, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	bdfff800 	.word	0xbdfff800
    12d0:	000007d6 	.word	0x000007d6
    12d4:	000023c8 	.word	0x000023c8
    12d8:	00000ed5 	.word	0x00000ed5
    12dc:	00200010 	.word	0x00200010

000012e0 <_i2c_s_async_init>:
{
    12e0:	b570      	push	{r4, r5, r6, lr}
    12e2:	0005      	movs	r5, r0
    12e4:	000c      	movs	r4, r1
	ASSERT(device);
    12e6:	1e43      	subs	r3, r0, #1
    12e8:	4198      	sbcs	r0, r3
    12ea:	b2c0      	uxtb	r0, r0
    12ec:	4a16      	ldr	r2, [pc, #88]	; (1348 <_i2c_s_async_init+0x68>)
    12ee:	4917      	ldr	r1, [pc, #92]	; (134c <_i2c_s_async_init+0x6c>)
    12f0:	4b17      	ldr	r3, [pc, #92]	; (1350 <_i2c_s_async_init+0x70>)
    12f2:	4798      	blx	r3
	init_status = _i2c_s_init(hw);
    12f4:	0020      	movs	r0, r4
    12f6:	4b17      	ldr	r3, [pc, #92]	; (1354 <_i2c_s_async_init+0x74>)
    12f8:	4798      	blx	r3
	if (init_status) {
    12fa:	2800      	cmp	r0, #0
    12fc:	d000      	beq.n	1300 <_i2c_s_async_init+0x20>
}
    12fe:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1300:	602c      	str	r4, [r5, #0]
	if (hw == SERCOM1) {
    1302:	4b15      	ldr	r3, [pc, #84]	; (1358 <_i2c_s_async_init+0x78>)
    1304:	429c      	cmp	r4, r3
    1306:	d01a      	beq.n	133e <_i2c_s_async_init+0x5e>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1308:	4b14      	ldr	r3, [pc, #80]	; (135c <_i2c_s_async_init+0x7c>)
    130a:	18e3      	adds	r3, r4, r3
    130c:	0a9b      	lsrs	r3, r3, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    130e:	3309      	adds	r3, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1310:	b2d9      	uxtb	r1, r3
    1312:	061b      	lsls	r3, r3, #24
    1314:	d40e      	bmi.n	1334 <_i2c_s_async_init+0x54>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1316:	221f      	movs	r2, #31
    1318:	400a      	ands	r2, r1
    131a:	2301      	movs	r3, #1
    131c:	4093      	lsls	r3, r2
    131e:	4a10      	ldr	r2, [pc, #64]	; (1360 <_i2c_s_async_init+0x80>)
    1320:	2180      	movs	r1, #128	; 0x80
    1322:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1328:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    132c:	3101      	adds	r1, #1
    132e:	31ff      	adds	r1, #255	; 0xff
    1330:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1332:	6013      	str	r3, [r2, #0]
	((Sercom *)hw)->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_AMATCH;
    1334:	2302      	movs	r3, #2
    1336:	75a3      	strb	r3, [r4, #22]
	((Sercom *)hw)->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_PREC;
    1338:	3b01      	subs	r3, #1
    133a:	75a3      	strb	r3, [r4, #22]
	return ERR_NONE;
    133c:	e7df      	b.n	12fe <_i2c_s_async_init+0x1e>
		_sercom1_dev = (struct _i2c_s_async_device *)dev;
    133e:	4b09      	ldr	r3, [pc, #36]	; (1364 <_i2c_s_async_init+0x84>)
    1340:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1342:	210a      	movs	r1, #10
    1344:	e7e7      	b.n	1316 <_i2c_s_async_init+0x36>
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	000006ad 	.word	0x000006ad
    134c:	000023c8 	.word	0x000023c8
    1350:	00000ed5 	.word	0x00000ed5
    1354:	00001251 	.word	0x00001251
    1358:	42000c00 	.word	0x42000c00
    135c:	bdfff800 	.word	0xbdfff800
    1360:	e000e100 	.word	0xe000e100
    1364:	2000015c 	.word	0x2000015c

00001368 <_i2c_s_async_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
    1368:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    136a:	6813      	ldr	r3, [r2, #0]
    136c:	2102      	movs	r1, #2
    136e:	430b      	orrs	r3, r1
    1370:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1372:	3101      	adds	r1, #1
    1374:	69d3      	ldr	r3, [r2, #28]
    1376:	4219      	tst	r1, r3
    1378:	d1fc      	bne.n	1374 <_i2c_s_async_enable+0xc>
}
    137a:	2000      	movs	r0, #0
    137c:	4770      	bx	lr

0000137e <_i2c_s_async_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    137e:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1380:	6a58      	ldr	r0, [r3, #36]	; 0x24
	return (bool)tmp;
    1382:	0400      	lsls	r0, r0, #16
    1384:	0fc0      	lsrs	r0, r0, #31
}
    1386:	4770      	bx	lr

00001388 <_i2c_s_async_set_address>:
{
    1388:	b510      	push	{r4, lr}
	return _i2c_s_set_address(device->hw, address);
    138a:	6800      	ldr	r0, [r0, #0]
    138c:	4b01      	ldr	r3, [pc, #4]	; (1394 <_i2c_s_async_set_address+0xc>)
    138e:	4798      	blx	r3
}
    1390:	bd10      	pop	{r4, pc}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	000011e5 	.word	0x000011e5

00001398 <_i2c_s_async_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    1398:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    139a:	2328      	movs	r3, #40	; 0x28
    139c:	54d1      	strb	r1, [r2, r3]
}
    139e:	4770      	bx	lr

000013a0 <_i2c_s_async_set_irq_state>:
{
    13a0:	b570      	push	{r4, r5, r6, lr}
    13a2:	0005      	movs	r5, r0
    13a4:	000c      	movs	r4, r1
    13a6:	0016      	movs	r6, r2
	ASSERT(device);
    13a8:	1e43      	subs	r3, r0, #1
    13aa:	4198      	sbcs	r0, r3
    13ac:	b2c0      	uxtb	r0, r0
    13ae:	22ee      	movs	r2, #238	; 0xee
    13b0:	00d2      	lsls	r2, r2, #3
    13b2:	4919      	ldr	r1, [pc, #100]	; (1418 <_i2c_s_async_set_irq_state+0x78>)
    13b4:	4b19      	ldr	r3, [pc, #100]	; (141c <_i2c_s_async_set_irq_state+0x7c>)
    13b6:	4798      	blx	r3
	if (I2C_S_DEVICE_TX == type || I2C_S_DEVICE_RX_COMPLETE == type) {
    13b8:	1e63      	subs	r3, r4, #1
    13ba:	2b01      	cmp	r3, #1
    13bc:	d909      	bls.n	13d2 <_i2c_s_async_set_irq_state+0x32>
		} else if (I2C_S_DEVICE_AMATCH == type) {
    13be:	2c03      	cmp	r4, #3
    13c0:	d010      	beq.n	13e4 <_i2c_s_async_set_irq_state+0x44>
		} else if (I2C_S_DEVICE_ERROR == type) {
    13c2:	2c00      	cmp	r4, #0
    13c4:	d11a      	bne.n	13fc <_i2c_s_async_set_irq_state+0x5c>
		hri_sercomi2cs_write_INTEN_ERROR_bit(device->hw, state);
    13c6:	682b      	ldr	r3, [r5, #0]
	if (value == 0x0) {
    13c8:	2e00      	cmp	r6, #0
    13ca:	d114      	bne.n	13f6 <_i2c_s_async_set_irq_state+0x56>
		((Sercom *)hw)->I2CS.INTENCLR.reg = SERCOM_I2CS_INTENSET_ERROR;
    13cc:	2280      	movs	r2, #128	; 0x80
    13ce:	751a      	strb	r2, [r3, #20]
    13d0:	e016      	b.n	1400 <_i2c_s_async_set_irq_state+0x60>
		hri_sercomi2cs_write_INTEN_DRDY_bit(device->hw, state);
    13d2:	682b      	ldr	r3, [r5, #0]
	if (value == 0x0) {
    13d4:	2e00      	cmp	r6, #0
    13d6:	d102      	bne.n	13de <_i2c_s_async_set_irq_state+0x3e>
		((Sercom *)hw)->I2CS.INTENCLR.reg = SERCOM_I2CS_INTENSET_DRDY;
    13d8:	2204      	movs	r2, #4
    13da:	751a      	strb	r2, [r3, #20]
    13dc:	e010      	b.n	1400 <_i2c_s_async_set_irq_state+0x60>
		((Sercom *)hw)->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_DRDY;
    13de:	2204      	movs	r2, #4
    13e0:	759a      	strb	r2, [r3, #22]
    13e2:	e00d      	b.n	1400 <_i2c_s_async_set_irq_state+0x60>
		hri_sercomi2cs_write_INTEN_AMATCH_bit(device->hw, state);
    13e4:	682b      	ldr	r3, [r5, #0]
	if (value == 0x0) {
    13e6:	2e00      	cmp	r6, #0
    13e8:	d102      	bne.n	13f0 <_i2c_s_async_set_irq_state+0x50>
		((Sercom *)hw)->I2CS.INTENCLR.reg = SERCOM_I2CS_INTENSET_AMATCH;
    13ea:	2202      	movs	r2, #2
    13ec:	751a      	strb	r2, [r3, #20]
    13ee:	e007      	b.n	1400 <_i2c_s_async_set_irq_state+0x60>
		((Sercom *)hw)->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_AMATCH;
    13f0:	2202      	movs	r2, #2
    13f2:	759a      	strb	r2, [r3, #22]
    13f4:	e004      	b.n	1400 <_i2c_s_async_set_irq_state+0x60>
		((Sercom *)hw)->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_ERROR;
    13f6:	2280      	movs	r2, #128	; 0x80
    13f8:	759a      	strb	r2, [r3, #22]
    13fa:	e001      	b.n	1400 <_i2c_s_async_set_irq_state+0x60>
		} else if (I2C_S_DEVICE_PREC == type) {
    13fc:	2c04      	cmp	r4, #4
    13fe:	d001      	beq.n	1404 <_i2c_s_async_set_irq_state+0x64>
}
    1400:	2000      	movs	r0, #0
    1402:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomi2cs_write_INTEN_PREC_bit(device->hw, state);
    1404:	682b      	ldr	r3, [r5, #0]
	if (value == 0x0) {
    1406:	2e00      	cmp	r6, #0
    1408:	d002      	beq.n	1410 <_i2c_s_async_set_irq_state+0x70>
		((Sercom *)hw)->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_PREC;
    140a:	2201      	movs	r2, #1
    140c:	759a      	strb	r2, [r3, #22]
    140e:	e7f7      	b.n	1400 <_i2c_s_async_set_irq_state+0x60>
		((Sercom *)hw)->I2CS.INTENCLR.reg = SERCOM_I2CS_INTENSET_PREC;
    1410:	2201      	movs	r2, #1
    1412:	751a      	strb	r2, [r3, #20]
    1414:	e7f4      	b.n	1400 <_i2c_s_async_set_irq_state+0x60>
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	000023c8 	.word	0x000023c8
    141c:	00000ed5 	.word	0x00000ed5

00001420 <SERCOM1_Handler>:

	return NULL;
}

void SERCOM1_Handler(void)
{
    1420:	b570      	push	{r4, r5, r6, lr}
	_sercom_i2c_s_irq_handler(_sercom1_dev);
    1422:	4b1f      	ldr	r3, [pc, #124]	; (14a0 <SERCOM1_Handler+0x80>)
    1424:	681e      	ldr	r6, [r3, #0]
	void *   hw    = device->hw;
    1426:	6835      	ldr	r5, [r6, #0]
	return ((Sercom *)hw)->I2CS.INTFLAG.reg;
    1428:	7e2c      	ldrb	r4, [r5, #24]
    142a:	b2e4      	uxtb	r4, r4
	if (flags & SERCOM_I2CS_INTFLAG_ERROR) {
    142c:	b263      	sxtb	r3, r4
    142e:	2b00      	cmp	r3, #0
    1430:	db1d      	blt.n	146e <SERCOM1_Handler+0x4e>
	if (flags & SERCOM_I2CS_INTFLAG_AMATCH) {
    1432:	07a3      	lsls	r3, r4, #30
    1434:	d501      	bpl.n	143a <SERCOM1_Handler+0x1a>
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    1436:	2302      	movs	r3, #2
    1438:	762b      	strb	r3, [r5, #24]
	if (flags & SERCOM_I2CS_INTFLAG_PREC) {
    143a:	07e3      	lsls	r3, r4, #31
    143c:	d501      	bpl.n	1442 <SERCOM1_Handler+0x22>
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    143e:	2301      	movs	r3, #1
    1440:	762b      	strb	r3, [r5, #24]
	if (flags & SERCOM_I2CS_INTFLAG_DRDY) {
    1442:	0763      	lsls	r3, r4, #29
    1444:	d512      	bpl.n	146c <SERCOM1_Handler+0x4c>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cs_get_STATUS_DIR_bit(const void *const hw)
{
	return (((Sercom *)hw)->I2CS.STATUS.reg & SERCOM_I2CS_STATUS_DIR) >> SERCOM_I2CS_STATUS_DIR_Pos;
    1446:	8b6b      	ldrh	r3, [r5, #26]
		if (!hri_sercomi2cs_get_STATUS_DIR_bit(hw)) {
    1448:	071b      	lsls	r3, r3, #28
    144a:	d41c      	bmi.n	1486 <SERCOM1_Handler+0x66>
			ASSERT(device->cb.rx_done);
    144c:	68f0      	ldr	r0, [r6, #12]
    144e:	1e43      	subs	r3, r0, #1
    1450:	4198      	sbcs	r0, r3
    1452:	b2c0      	uxtb	r0, r0
    1454:	4a13      	ldr	r2, [pc, #76]	; (14a4 <SERCOM1_Handler+0x84>)
    1456:	4914      	ldr	r1, [pc, #80]	; (14a8 <SERCOM1_Handler+0x88>)
    1458:	4b14      	ldr	r3, [pc, #80]	; (14ac <SERCOM1_Handler+0x8c>)
    145a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CS.DATA.reg;
    145c:	2328      	movs	r3, #40	; 0x28
    145e:	5ce9      	ldrb	r1, [r5, r3]
    1460:	b2c9      	uxtb	r1, r1
			device->cb.rx_done(device, hri_sercomi2cs_read_DATA_reg(hw));
    1462:	68f3      	ldr	r3, [r6, #12]
    1464:	0030      	movs	r0, r6
    1466:	4798      	blx	r3
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    1468:	2304      	movs	r3, #4
    146a:	762b      	strb	r3, [r5, #24]
}
    146c:	bd70      	pop	{r4, r5, r6, pc}
		ASSERT(device->cb.error);
    146e:	6870      	ldr	r0, [r6, #4]
    1470:	1e43      	subs	r3, r0, #1
    1472:	4198      	sbcs	r0, r3
    1474:	b2c0      	uxtb	r0, r0
    1476:	4a0e      	ldr	r2, [pc, #56]	; (14b0 <SERCOM1_Handler+0x90>)
    1478:	490b      	ldr	r1, [pc, #44]	; (14a8 <SERCOM1_Handler+0x88>)
    147a:	4b0c      	ldr	r3, [pc, #48]	; (14ac <SERCOM1_Handler+0x8c>)
    147c:	4798      	blx	r3
		device->cb.error(device);
    147e:	0030      	movs	r0, r6
    1480:	6873      	ldr	r3, [r6, #4]
    1482:	4798      	blx	r3
    1484:	e7d5      	b.n	1432 <SERCOM1_Handler+0x12>
			ASSERT(device->cb.tx);
    1486:	68b0      	ldr	r0, [r6, #8]
    1488:	1e43      	subs	r3, r0, #1
    148a:	4198      	sbcs	r0, r3
    148c:	b2c0      	uxtb	r0, r0
    148e:	22f3      	movs	r2, #243	; 0xf3
    1490:	00d2      	lsls	r2, r2, #3
    1492:	4905      	ldr	r1, [pc, #20]	; (14a8 <SERCOM1_Handler+0x88>)
    1494:	4b05      	ldr	r3, [pc, #20]	; (14ac <SERCOM1_Handler+0x8c>)
    1496:	4798      	blx	r3
			device->cb.tx(device);
    1498:	68b3      	ldr	r3, [r6, #8]
    149a:	0030      	movs	r0, r6
    149c:	4798      	blx	r3
    149e:	e7e3      	b.n	1468 <SERCOM1_Handler+0x48>
    14a0:	2000015c 	.word	0x2000015c
    14a4:	00000795 	.word	0x00000795
    14a8:	000023c8 	.word	0x000023c8
    14ac:	00000ed5 	.word	0x00000ed5
    14b0:	0000078a 	.word	0x0000078a

000014b4 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14b4:	4b0e      	ldr	r3, [pc, #56]	; (14f0 <_sysctrl_init_sources+0x3c>)
    14b6:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14b8:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    14ba:	480e      	ldr	r0, [pc, #56]	; (14f4 <_sysctrl_init_sources+0x40>)
    14bc:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    14be:	0f89      	lsrs	r1, r1, #30
    14c0:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    14c2:	480d      	ldr	r0, [pc, #52]	; (14f8 <_sysctrl_init_sources+0x44>)
    14c4:	4301      	orrs	r1, r0
    14c6:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    14c8:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14ca:	699a      	ldr	r2, [r3, #24]
    14cc:	2102      	movs	r1, #2
    14ce:	430a      	orrs	r2, r1
    14d0:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    14d2:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    14d4:	311d      	adds	r1, #29
    14d6:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    14d8:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    14da:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    14dc:	2208      	movs	r2, #8
    14de:	68cb      	ldr	r3, [r1, #12]
    14e0:	421a      	tst	r2, r3
    14e2:	d0fc      	beq.n	14de <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    14e4:	4a02      	ldr	r2, [pc, #8]	; (14f0 <_sysctrl_init_sources+0x3c>)
    14e6:	6a13      	ldr	r3, [r2, #32]
    14e8:	2180      	movs	r1, #128	; 0x80
    14ea:	430b      	orrs	r3, r1
    14ec:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    14ee:	4770      	bx	lr
    14f0:	40000800 	.word	0x40000800
    14f4:	0fff0000 	.word	0x0fff0000
    14f8:	00000302 	.word	0x00000302

000014fc <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    14fc:	2202      	movs	r2, #2
    14fe:	4b1c      	ldr	r3, [pc, #112]	; (1570 <_sysctrl_init_referenced_generators+0x74>)
    1500:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1502:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1504:	320e      	adds	r2, #14
    1506:	68cb      	ldr	r3, [r1, #12]
    1508:	421a      	tst	r2, r3
    150a:	d0fc      	beq.n	1506 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    150c:	4a19      	ldr	r2, [pc, #100]	; (1574 <_sysctrl_init_referenced_generators+0x78>)
    150e:	4b18      	ldr	r3, [pc, #96]	; (1570 <_sysctrl_init_referenced_generators+0x74>)
    1510:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1512:	4b19      	ldr	r3, [pc, #100]	; (1578 <_sysctrl_init_referenced_generators+0x7c>)
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	0e9b      	lsrs	r3, r3, #26
    1518:	2b3f      	cmp	r3, #63	; 0x3f
    151a:	d01f      	beq.n	155c <_sysctrl_init_referenced_generators+0x60>
    151c:	029b      	lsls	r3, r3, #10
    151e:	2280      	movs	r2, #128	; 0x80
    1520:	0092      	lsls	r2, r2, #2
    1522:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1524:	4a12      	ldr	r2, [pc, #72]	; (1570 <_sysctrl_init_referenced_generators+0x74>)
    1526:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1528:	2302      	movs	r3, #2
    152a:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    152c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    152e:	075b      	lsls	r3, r3, #29
    1530:	d517      	bpl.n	1562 <_sysctrl_init_referenced_generators+0x66>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1532:	0011      	movs	r1, r2
	tmp &= mask;
    1534:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1536:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1538:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    153a:	2bd0      	cmp	r3, #208	; 0xd0
    153c:	d1fb      	bne.n	1536 <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    153e:	4a0c      	ldr	r2, [pc, #48]	; (1570 <_sysctrl_init_referenced_generators+0x74>)
    1540:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1542:	2180      	movs	r1, #128	; 0x80
    1544:	430b      	orrs	r3, r1
    1546:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1548:	4a0c      	ldr	r2, [pc, #48]	; (157c <_sysctrl_init_referenced_generators+0x80>)
    154a:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    154c:	09db      	lsrs	r3, r3, #7
    154e:	d1fc      	bne.n	154a <_sysctrl_init_referenced_generators+0x4e>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1550:	4a07      	ldr	r2, [pc, #28]	; (1570 <_sysctrl_init_referenced_generators+0x74>)
    1552:	6993      	ldr	r3, [r2, #24]
    1554:	2102      	movs	r1, #2
    1556:	438b      	bics	r3, r1
    1558:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    155a:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    155c:	23fc      	movs	r3, #252	; 0xfc
    155e:	01db      	lsls	r3, r3, #7
    1560:	e7e0      	b.n	1524 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1562:	4903      	ldr	r1, [pc, #12]	; (1570 <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1564:	2210      	movs	r2, #16
    1566:	68cb      	ldr	r3, [r1, #12]
    1568:	421a      	tst	r2, r3
    156a:	d0fc      	beq.n	1566 <_sysctrl_init_referenced_generators+0x6a>
    156c:	e7e7      	b.n	153e <_sysctrl_init_referenced_generators+0x42>
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	40000800 	.word	0x40000800
    1574:	04010000 	.word	0x04010000
    1578:	00806024 	.word	0x00806024
    157c:	40000c00 	.word	0x40000c00

00001580 <_tcc_start_pwm>:
/**
 * \brief Start PWM
 */
void _tcc_start_pwm(struct _pwm_device *const device)
{
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    1580:	6902      	ldr	r2, [r0, #16]
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1582:	6813      	ldr	r3, [r2, #0]
    1584:	2102      	movs	r1, #2
    1586:	430b      	orrs	r3, r1
    1588:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    158a:	3101      	adds	r1, #1
    158c:	6893      	ldr	r3, [r2, #8]
    158e:	4219      	tst	r1, r3
    1590:	d1fc      	bne.n	158c <_tcc_start_pwm+0xc>
}
    1592:	4770      	bx	lr

00001594 <_tcc_stop_pwm>:
/**
 * \brief Stop PWM
 */
void _tcc_stop_pwm(struct _pwm_device *const device)
{
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    1594:	6902      	ldr	r2, [r0, #16]
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1596:	6813      	ldr	r3, [r2, #0]
    1598:	2102      	movs	r1, #2
    159a:	438b      	bics	r3, r1
    159c:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    159e:	3101      	adds	r1, #1
    15a0:	6893      	ldr	r3, [r2, #8]
    15a2:	4219      	tst	r1, r3
    15a4:	d1fc      	bne.n	15a0 <_tcc_stop_pwm+0xc>
}
    15a6:	4770      	bx	lr

000015a8 <_tcc_pwm_get_period>:
/**
 * \brief Get pwm waveform period value
 */
pwm_period_t _tcc_pwm_get_period(const struct _pwm_device *const device)
{
	return (pwm_period_t)(hri_tcc_read_PERB_reg(device->hw));
    15a8:	6902      	ldr	r2, [r0, #16]
    15aa:	2180      	movs	r1, #128	; 0x80
    15ac:	02c9      	lsls	r1, r1, #11
    15ae:	6893      	ldr	r3, [r2, #8]
    15b0:	420b      	tst	r3, r1
    15b2:	d1fc      	bne.n	15ae <_tcc_pwm_get_period+0x6>
}

static inline hri_tcc_perb_reg_t hri_tcc_read_PERB_reg(const void *const hw)
{
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PERB);
	return ((Tcc *)hw)->PERB.reg;
    15b4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
}
    15b6:	4770      	bx	lr

000015b8 <_tcc_is_pwm_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _tcc_is_pwm_enabled(const struct _pwm_device *const device)
{
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    15b8:	6902      	ldr	r2, [r0, #16]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    15ba:	2103      	movs	r1, #3
    15bc:	6893      	ldr	r3, [r2, #8]
    15be:	4219      	tst	r1, r3
    15c0:	d1fc      	bne.n	15bc <_tcc_is_pwm_enabled+0x4>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    15c2:	6810      	ldr	r0, [r2, #0]
	return (bool)tmp;
    15c4:	0780      	lsls	r0, r0, #30
    15c6:	0fc0      	lsrs	r0, r0, #31
}
    15c8:	4770      	bx	lr

000015ca <tcc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tcc_pwm_interrupt_handler(struct _pwm_device *device)
{
    15ca:	b570      	push	{r4, r5, r6, lr}
    15cc:	0005      	movs	r5, r0
	void *const hw = device->hw;
    15ce:	6904      	ldr	r4, [r0, #16]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    15d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    15d2:	07db      	lsls	r3, r3, #31
    15d4:	d505      	bpl.n	15e2 <tcc_pwm_interrupt_handler+0x18>
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    15d6:	2301      	movs	r3, #1
    15d8:	62e3      	str	r3, [r4, #44]	; 0x2c
		hri_tcc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    15da:	6803      	ldr	r3, [r0, #0]
    15dc:	2b00      	cmp	r3, #0
    15de:	d000      	beq.n	15e2 <tcc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    15e0:	4798      	blx	r3
	return (((Tcc *)hw)->INTENSET.reg & TCC_INTENSET_ERR) >> TCC_INTENSET_ERR_Pos;
    15e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		}
	}
	if (hri_tcc_get_INTEN_ERR_bit(hw)) {
    15e4:	071b      	lsls	r3, r3, #28
    15e6:	d506      	bpl.n	15f6 <tcc_pwm_interrupt_handler+0x2c>
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_ERR;
    15e8:	2308      	movs	r3, #8
    15ea:	62e3      	str	r3, [r4, #44]	; 0x2c
		hri_tcc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    15ec:	686b      	ldr	r3, [r5, #4]
    15ee:	2b00      	cmp	r3, #0
    15f0:	d001      	beq.n	15f6 <tcc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    15f2:	0028      	movs	r0, r5
    15f4:	4798      	blx	r3
		}
	}
}
    15f6:	bd70      	pop	{r4, r5, r6, pc}

000015f8 <_get_tcc_pwm_cfg>:
static struct tcc_pwm_cfg *_get_tcc_pwm_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
		if (_cfgs_pwm[i].hw == hw) {
    15f8:	4b0c      	ldr	r3, [pc, #48]	; (162c <_get_tcc_pwm_cfg+0x34>)
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	4298      	cmp	r0, r3
    15fe:	d00e      	beq.n	161e <_get_tcc_pwm_cfg+0x26>
    1600:	4b0a      	ldr	r3, [pc, #40]	; (162c <_get_tcc_pwm_cfg+0x34>)
    1602:	695b      	ldr	r3, [r3, #20]
    1604:	4298      	cmp	r0, r3
    1606:	d008      	beq.n	161a <_get_tcc_pwm_cfg+0x22>
    1608:	4b08      	ldr	r3, [pc, #32]	; (162c <_get_tcc_pwm_cfg+0x34>)
    160a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			return &(_cfgs_pwm[i]);
		}
	}
	return NULL;
    160c:	2300      	movs	r3, #0
		if (_cfgs_pwm[i].hw == hw) {
    160e:	4282      	cmp	r2, r0
    1610:	d001      	beq.n	1616 <_get_tcc_pwm_cfg+0x1e>
}
    1612:	0018      	movs	r0, r3
    1614:	4770      	bx	lr
		if (_cfgs_pwm[i].hw == hw) {
    1616:	3302      	adds	r3, #2
    1618:	e002      	b.n	1620 <_get_tcc_pwm_cfg+0x28>
    161a:	2301      	movs	r3, #1
    161c:	e000      	b.n	1620 <_get_tcc_pwm_cfg+0x28>
    161e:	2300      	movs	r3, #0
			return &(_cfgs_pwm[i]);
    1620:	0098      	lsls	r0, r3, #2
    1622:	18c0      	adds	r0, r0, r3
    1624:	0080      	lsls	r0, r0, #2
    1626:	4b01      	ldr	r3, [pc, #4]	; (162c <_get_tcc_pwm_cfg+0x34>)
    1628:	181b      	adds	r3, r3, r0
    162a:	e7f2      	b.n	1612 <_get_tcc_pwm_cfg+0x1a>
    162c:	20000000 	.word	0x20000000

00001630 <_tcc_pwm_init>:
{
    1630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1632:	0006      	movs	r6, r0
    1634:	000c      	movs	r4, r1
		if (_cfgs[i].hw == hw) {
    1636:	4b79      	ldr	r3, [pc, #484]	; (181c <_tcc_pwm_init+0x1ec>)
    1638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    163a:	4299      	cmp	r1, r3
    163c:	d00f      	beq.n	165e <_tcc_pwm_init+0x2e>
    163e:	4b77      	ldr	r3, [pc, #476]	; (181c <_tcc_pwm_init+0x1ec>)
    1640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1642:	4299      	cmp	r1, r3
    1644:	d009      	beq.n	165a <_tcc_pwm_init+0x2a>
    1646:	238c      	movs	r3, #140	; 0x8c
    1648:	4a74      	ldr	r2, [pc, #464]	; (181c <_tcc_pwm_init+0x1ec>)
    164a:	58d3      	ldr	r3, [r2, r3]
    164c:	2502      	movs	r5, #2
    164e:	4299      	cmp	r1, r3
    1650:	d006      	beq.n	1660 <_tcc_pwm_init+0x30>
		return ERR_NOT_FOUND;
    1652:	230a      	movs	r3, #10
    1654:	425b      	negs	r3, r3
}
    1656:	0018      	movs	r0, r3
    1658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (_cfgs[i].hw == hw) {
    165a:	2501      	movs	r5, #1
    165c:	e000      	b.n	1660 <_tcc_pwm_init+0x30>
    165e:	2500      	movs	r5, #0
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    1660:	0020      	movs	r0, r4
    1662:	4b6f      	ldr	r3, [pc, #444]	; (1820 <_tcc_pwm_init+0x1f0>)
    1664:	4798      	blx	r3
	if (cfg_pwm == NULL) {
    1666:	2800      	cmp	r0, #0
    1668:	d100      	bne.n	166c <_tcc_pwm_init+0x3c>
    166a:	e0d1      	b.n	1810 <_tcc_pwm_init+0x1e0>
	device->hw = hw;
    166c:	6134      	str	r4, [r6, #16]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    166e:	68a3      	ldr	r3, [r4, #8]
	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    1670:	07db      	lsls	r3, r3, #31
    1672:	d418      	bmi.n	16a6 <_tcc_pwm_init+0x76>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1674:	2203      	movs	r2, #3
    1676:	68a3      	ldr	r3, [r4, #8]
    1678:	421a      	tst	r2, r3
    167a:	d1fc      	bne.n	1676 <_tcc_pwm_init+0x46>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    167c:	6823      	ldr	r3, [r4, #0]
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    167e:	079b      	lsls	r3, r3, #30
    1680:	d50b      	bpl.n	169a <_tcc_pwm_init+0x6a>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1682:	6823      	ldr	r3, [r4, #0]
    1684:	2202      	movs	r2, #2
    1686:	4393      	bics	r3, r2
    1688:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    168a:	3201      	adds	r2, #1
    168c:	68a3      	ldr	r3, [r4, #8]
    168e:	421a      	tst	r2, r3
    1690:	d1fc      	bne.n	168c <_tcc_pwm_init+0x5c>
    1692:	2202      	movs	r2, #2
    1694:	68a3      	ldr	r3, [r4, #8]
    1696:	421a      	tst	r2, r3
    1698:	d1fc      	bne.n	1694 <_tcc_pwm_init+0x64>
	((Tcc *)hw)->CTRLA.reg = data;
    169a:	2301      	movs	r3, #1
    169c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    169e:	2203      	movs	r2, #3
    16a0:	68a3      	ldr	r3, [r4, #8]
    16a2:	421a      	tst	r2, r3
    16a4:	d1fc      	bne.n	16a0 <_tcc_pwm_init+0x70>
    16a6:	2201      	movs	r2, #1
    16a8:	68a3      	ldr	r3, [r4, #8]
    16aa:	421a      	tst	r2, r3
    16ac:	d1fc      	bne.n	16a8 <_tcc_pwm_init+0x78>
	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    16ae:	00ab      	lsls	r3, r5, #2
    16b0:	195b      	adds	r3, r3, r5
    16b2:	00db      	lsls	r3, r3, #3
    16b4:	4a59      	ldr	r2, [pc, #356]	; (181c <_tcc_pwm_init+0x1ec>)
    16b6:	18d3      	adds	r3, r2, r3
    16b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	((Tcc *)hw)->CTRLA.reg = data;
    16ba:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    16bc:	2203      	movs	r2, #3
    16be:	68a3      	ldr	r3, [r4, #8]
    16c0:	421a      	tst	r2, r3
    16c2:	d1fc      	bne.n	16be <_tcc_pwm_init+0x8e>
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    16c4:	4a55      	ldr	r2, [pc, #340]	; (181c <_tcc_pwm_init+0x1ec>)
    16c6:	0011      	movs	r1, r2
    16c8:	313c      	adds	r1, #60	; 0x3c
    16ca:	00ab      	lsls	r3, r5, #2
    16cc:	195f      	adds	r7, r3, r5
    16ce:	00ff      	lsls	r7, r7, #3
    16d0:	19c9      	adds	r1, r1, r7
    16d2:	7b0f      	ldrb	r7, [r1, #12]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    16d4:	7167      	strb	r7, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    16d6:	7b49      	ldrb	r1, [r1, #13]
	((Tcc *)hw)->DBGCTRL.reg = data;
    16d8:	77a1      	strb	r1, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    16da:	195b      	adds	r3, r3, r5
    16dc:	00db      	lsls	r3, r3, #3
    16de:	18d3      	adds	r3, r2, r3
    16e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	((Tcc *)hw)->EVCTRL.reg = data;
    16e2:	6223      	str	r3, [r4, #32]
	((Tcc *)hw)->WAVE.reg = data;
    16e4:	6903      	ldr	r3, [r0, #16]
    16e6:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    16e8:	4a4e      	ldr	r2, [pc, #312]	; (1824 <_tcc_pwm_init+0x1f4>)
    16ea:	68a3      	ldr	r3, [r4, #8]
    16ec:	4213      	tst	r3, r2
    16ee:	d1fc      	bne.n	16ea <_tcc_pwm_init+0xba>
	((Tcc *)hw)->PER.reg = data;
    16f0:	6883      	ldr	r3, [r0, #8]
    16f2:	6423      	str	r3, [r4, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    16f4:	2280      	movs	r2, #128	; 0x80
    16f6:	68a3      	ldr	r3, [r4, #8]
    16f8:	421a      	tst	r2, r3
    16fa:	d1fc      	bne.n	16f6 <_tcc_pwm_init+0xc6>
	cfg->per = cfg_pwm->period;
    16fc:	00ab      	lsls	r3, r5, #2
    16fe:	195b      	adds	r3, r3, r5
    1700:	00db      	lsls	r3, r3, #3
    1702:	4a46      	ldr	r2, [pc, #280]	; (181c <_tcc_pwm_init+0x1ec>)
    1704:	18d3      	adds	r3, r2, r3
    1706:	6882      	ldr	r2, [r0, #8]
    1708:	661a      	str	r2, [r3, #96]	; 0x60
	switch (cfg_pwm->sel_ch) {
    170a:	7943      	ldrb	r3, [r0, #5]
    170c:	2b01      	cmp	r3, #1
    170e:	d04c      	beq.n	17aa <_tcc_pwm_init+0x17a>
    1710:	2b00      	cmp	r3, #0
    1712:	d006      	beq.n	1722 <_tcc_pwm_init+0xf2>
    1714:	2b02      	cmp	r3, #2
    1716:	d056      	beq.n	17c6 <_tcc_pwm_init+0x196>
    1718:	2b03      	cmp	r3, #3
    171a:	d062      	beq.n	17e2 <_tcc_pwm_init+0x1b2>
		return ERR_NO_RESOURCE;
    171c:	231c      	movs	r3, #28
    171e:	425b      	negs	r3, r3
    1720:	e799      	b.n	1656 <_tcc_pwm_init+0x26>
		cfg->cc0 = cfg_pwm->duty_cycle;
    1722:	68c2      	ldr	r2, [r0, #12]
    1724:	00ab      	lsls	r3, r5, #2
    1726:	195d      	adds	r5, r3, r5
    1728:	00ed      	lsls	r5, r5, #3
    172a:	4b3c      	ldr	r3, [pc, #240]	; (181c <_tcc_pwm_init+0x1ec>)
    172c:	195d      	adds	r5, r3, r5
    172e:	652a      	str	r2, [r5, #80]	; 0x50
	((Tcc *)hw)->CC[index].reg = data;
    1730:	6462      	str	r2, [r4, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1732:	22f0      	movs	r2, #240	; 0xf0
    1734:	0112      	lsls	r2, r2, #4
    1736:	68a3      	ldr	r3, [r4, #8]
    1738:	4213      	tst	r3, r2
    173a:	d1fc      	bne.n	1736 <_tcc_pwm_init+0x106>
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    173c:	2302      	movs	r3, #2
    173e:	7123      	strb	r3, [r4, #4]
	if (hw == TCC0) {
    1740:	4b39      	ldr	r3, [pc, #228]	; (1828 <_tcc_pwm_init+0x1f8>)
    1742:	429c      	cmp	r4, r3
    1744:	d05b      	beq.n	17fe <_tcc_pwm_init+0x1ce>
	if (hw == TCC1) {
    1746:	4b39      	ldr	r3, [pc, #228]	; (182c <_tcc_pwm_init+0x1fc>)
    1748:	429c      	cmp	r4, r3
    174a:	d05b      	beq.n	1804 <_tcc_pwm_init+0x1d4>
	if (hw == TCC2) {
    174c:	4b38      	ldr	r3, [pc, #224]	; (1830 <_tcc_pwm_init+0x200>)
    174e:	429c      	cmp	r4, r3
    1750:	d05b      	beq.n	180a <_tcc_pwm_init+0x1da>
	NVIC_DisableIRQ((IRQn_Type)cfg_pwm->irq);
    1752:	2304      	movs	r3, #4
    1754:	56c3      	ldrsb	r3, [r0, r3]
  if ((int32_t)(IRQn) >= 0)
    1756:	2b00      	cmp	r3, #0
    1758:	db5d      	blt.n	1816 <_tcc_pwm_init+0x1e6>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    175a:	221f      	movs	r2, #31
    175c:	401a      	ands	r2, r3
    175e:	2301      	movs	r3, #1
    1760:	4093      	lsls	r3, r2
    1762:	2280      	movs	r2, #128	; 0x80
    1764:	4933      	ldr	r1, [pc, #204]	; (1834 <_tcc_pwm_init+0x204>)
    1766:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1768:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    176c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)cfg_pwm->irq);
    1770:	2104      	movs	r1, #4
    1772:	5641      	ldrsb	r1, [r0, r1]
	return ERR_NONE;
    1774:	2300      	movs	r3, #0
  if ((int32_t)(IRQn) >= 0)
    1776:	2900      	cmp	r1, #0
    1778:	da00      	bge.n	177c <_tcc_pwm_init+0x14c>
    177a:	e76c      	b.n	1656 <_tcc_pwm_init+0x26>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    177c:	3a61      	subs	r2, #97	; 0x61
    177e:	400a      	ands	r2, r1
    1780:	3301      	adds	r3, #1
    1782:	4093      	lsls	r3, r2
    1784:	22c0      	movs	r2, #192	; 0xc0
    1786:	0052      	lsls	r2, r2, #1
    1788:	492a      	ldr	r1, [pc, #168]	; (1834 <_tcc_pwm_init+0x204>)
    178a:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ((IRQn_Type)cfg_pwm->irq);
    178c:	2104      	movs	r1, #4
    178e:	5641      	ldrsb	r1, [r0, r1]
	return ERR_NONE;
    1790:	2300      	movs	r3, #0
  if ((int32_t)(IRQn) >= 0)
    1792:	2900      	cmp	r1, #0
    1794:	da00      	bge.n	1798 <_tcc_pwm_init+0x168>
    1796:	e75e      	b.n	1656 <_tcc_pwm_init+0x26>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1798:	3a62      	subs	r2, #98	; 0x62
    179a:	3aff      	subs	r2, #255	; 0xff
    179c:	400a      	ands	r2, r1
    179e:	3301      	adds	r3, #1
    17a0:	4093      	lsls	r3, r2
    17a2:	4a24      	ldr	r2, [pc, #144]	; (1834 <_tcc_pwm_init+0x204>)
    17a4:	6013      	str	r3, [r2, #0]
    17a6:	2300      	movs	r3, #0
    17a8:	e755      	b.n	1656 <_tcc_pwm_init+0x26>
		cfg->cc1 = cfg_pwm->duty_cycle;
    17aa:	68c2      	ldr	r2, [r0, #12]
    17ac:	00ab      	lsls	r3, r5, #2
    17ae:	195d      	adds	r5, r3, r5
    17b0:	00ed      	lsls	r5, r5, #3
    17b2:	4b1a      	ldr	r3, [pc, #104]	; (181c <_tcc_pwm_init+0x1ec>)
    17b4:	195d      	adds	r5, r3, r5
    17b6:	656a      	str	r2, [r5, #84]	; 0x54
	((Tcc *)hw)->CC[index].reg = data;
    17b8:	64a2      	str	r2, [r4, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    17ba:	22f0      	movs	r2, #240	; 0xf0
    17bc:	0112      	lsls	r2, r2, #4
    17be:	68a3      	ldr	r3, [r4, #8]
    17c0:	4213      	tst	r3, r2
    17c2:	d1fc      	bne.n	17be <_tcc_pwm_init+0x18e>
    17c4:	e7ba      	b.n	173c <_tcc_pwm_init+0x10c>
		cfg->cc2 = cfg_pwm->duty_cycle;
    17c6:	68c2      	ldr	r2, [r0, #12]
    17c8:	00ab      	lsls	r3, r5, #2
    17ca:	195d      	adds	r5, r3, r5
    17cc:	00ed      	lsls	r5, r5, #3
    17ce:	4b13      	ldr	r3, [pc, #76]	; (181c <_tcc_pwm_init+0x1ec>)
    17d0:	195d      	adds	r5, r3, r5
    17d2:	65aa      	str	r2, [r5, #88]	; 0x58
	((Tcc *)hw)->CC[index].reg = data;
    17d4:	64e2      	str	r2, [r4, #76]	; 0x4c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    17d6:	22f0      	movs	r2, #240	; 0xf0
    17d8:	0112      	lsls	r2, r2, #4
    17da:	68a3      	ldr	r3, [r4, #8]
    17dc:	4213      	tst	r3, r2
    17de:	d1fc      	bne.n	17da <_tcc_pwm_init+0x1aa>
    17e0:	e7ac      	b.n	173c <_tcc_pwm_init+0x10c>
		cfg->cc3 = cfg_pwm->duty_cycle;
    17e2:	68c2      	ldr	r2, [r0, #12]
    17e4:	00ab      	lsls	r3, r5, #2
    17e6:	195d      	adds	r5, r3, r5
    17e8:	00ed      	lsls	r5, r5, #3
    17ea:	4b0c      	ldr	r3, [pc, #48]	; (181c <_tcc_pwm_init+0x1ec>)
    17ec:	195d      	adds	r5, r3, r5
    17ee:	65ea      	str	r2, [r5, #92]	; 0x5c
	((Tcc *)hw)->CC[index].reg = data;
    17f0:	6522      	str	r2, [r4, #80]	; 0x50
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    17f2:	22f0      	movs	r2, #240	; 0xf0
    17f4:	0112      	lsls	r2, r2, #4
    17f6:	68a3      	ldr	r3, [r4, #8]
    17f8:	4213      	tst	r3, r2
    17fa:	d1fc      	bne.n	17f6 <_tcc_pwm_init+0x1c6>
    17fc:	e79e      	b.n	173c <_tcc_pwm_init+0x10c>
		_tcc0_dev = (struct _pwm_device *)dev;
    17fe:	4b0e      	ldr	r3, [pc, #56]	; (1838 <_tcc_pwm_init+0x208>)
    1800:	601e      	str	r6, [r3, #0]
    1802:	e7a6      	b.n	1752 <_tcc_pwm_init+0x122>
		_tcc1_dev = (struct _pwm_device *)dev;
    1804:	4b0c      	ldr	r3, [pc, #48]	; (1838 <_tcc_pwm_init+0x208>)
    1806:	605e      	str	r6, [r3, #4]
    1808:	e7a3      	b.n	1752 <_tcc_pwm_init+0x122>
		_tcc2_dev = (struct _pwm_device *)dev;
    180a:	4b0b      	ldr	r3, [pc, #44]	; (1838 <_tcc_pwm_init+0x208>)
    180c:	609e      	str	r6, [r3, #8]
    180e:	e7a0      	b.n	1752 <_tcc_pwm_init+0x122>
		return ERR_NOT_FOUND;
    1810:	230a      	movs	r3, #10
    1812:	425b      	negs	r3, r3
    1814:	e71f      	b.n	1656 <_tcc_pwm_init+0x26>
	return ERR_NONE;
    1816:	2300      	movs	r3, #0
    1818:	e71d      	b.n	1656 <_tcc_pwm_init+0x26>
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	20000000 	.word	0x20000000
    1820:	000015f9 	.word	0x000015f9
    1824:	007f0fff 	.word	0x007f0fff
    1828:	42002000 	.word	0x42002000
    182c:	42002400 	.word	0x42002400
    1830:	42002800 	.word	0x42002800
    1834:	e000e100 	.word	0xe000e100
    1838:	20000160 	.word	0x20000160

0000183c <_tcc_pwm_deinit>:
{
    183c:	b510      	push	{r4, lr}
	void *const         hw      = device->hw;
    183e:	6904      	ldr	r4, [r0, #16]
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    1840:	0020      	movs	r0, r4
    1842:	4b11      	ldr	r3, [pc, #68]	; (1888 <_tcc_pwm_deinit+0x4c>)
    1844:	4798      	blx	r3
	if (cfg_pwm != NULL) {
    1846:	2800      	cmp	r0, #0
    1848:	d01d      	beq.n	1886 <_tcc_pwm_deinit+0x4a>
		NVIC_DisableIRQ((IRQn_Type)cfg_pwm->irq);
    184a:	2304      	movs	r3, #4
    184c:	56c3      	ldrsb	r3, [r0, r3]
  if ((int32_t)(IRQn) >= 0)
    184e:	2b00      	cmp	r3, #0
    1850:	db0a      	blt.n	1868 <_tcc_pwm_deinit+0x2c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1852:	221f      	movs	r2, #31
    1854:	401a      	ands	r2, r3
    1856:	2301      	movs	r3, #1
    1858:	4093      	lsls	r3, r2
    185a:	2280      	movs	r2, #128	; 0x80
    185c:	490b      	ldr	r1, [pc, #44]	; (188c <_tcc_pwm_deinit+0x50>)
    185e:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1860:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1864:	f3bf 8f6f 	isb	sy
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1868:	6823      	ldr	r3, [r4, #0]
    186a:	2202      	movs	r2, #2
    186c:	4393      	bics	r3, r2
    186e:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1870:	3201      	adds	r2, #1
    1872:	68a3      	ldr	r3, [r4, #8]
    1874:	421a      	tst	r2, r3
    1876:	d1fc      	bne.n	1872 <_tcc_pwm_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1878:	6823      	ldr	r3, [r4, #0]
    187a:	2201      	movs	r2, #1
    187c:	4313      	orrs	r3, r2
    187e:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1880:	68a3      	ldr	r3, [r4, #8]
    1882:	421a      	tst	r2, r3
    1884:	d1fc      	bne.n	1880 <_tcc_pwm_deinit+0x44>
}
    1886:	bd10      	pop	{r4, pc}
    1888:	000015f9 	.word	0x000015f9
    188c:	e000e100 	.word	0xe000e100

00001890 <_tcc_set_pwm_param>:
{
    1890:	b570      	push	{r4, r5, r6, lr}
    1892:	000e      	movs	r6, r1
    1894:	0015      	movs	r5, r2
	void *const         hw      = device->hw;
    1896:	6904      	ldr	r4, [r0, #16]
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    1898:	0020      	movs	r0, r4
    189a:	4b0a      	ldr	r3, [pc, #40]	; (18c4 <_tcc_set_pwm_param+0x34>)
    189c:	4798      	blx	r3
	if (cfg_pwm != NULL) {
    189e:	2800      	cmp	r0, #0
    18a0:	d00e      	beq.n	18c0 <_tcc_set_pwm_param+0x30>
	((Tcc *)hw)->PERB.reg = data;
    18a2:	66e6      	str	r6, [r4, #108]	; 0x6c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    18a4:	2280      	movs	r2, #128	; 0x80
    18a6:	02d2      	lsls	r2, r2, #11
    18a8:	68a3      	ldr	r3, [r4, #8]
    18aa:	4213      	tst	r3, r2
    18ac:	d1fc      	bne.n	18a8 <_tcc_set_pwm_param+0x18>
}

static inline void hri_tcc_write_CCB_reg(const void *const hw, uint8_t index, hri_tcc_ccb_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CCB[index].reg = data;
    18ae:	7943      	ldrb	r3, [r0, #5]
    18b0:	331c      	adds	r3, #28
    18b2:	009b      	lsls	r3, r3, #2
    18b4:	511d      	str	r5, [r3, r4]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    18b6:	22f0      	movs	r2, #240	; 0xf0
    18b8:	03d2      	lsls	r2, r2, #15
    18ba:	68a3      	ldr	r3, [r4, #8]
    18bc:	4213      	tst	r3, r2
    18be:	d1fc      	bne.n	18ba <_tcc_set_pwm_param+0x2a>
}
    18c0:	bd70      	pop	{r4, r5, r6, pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	000015f9 	.word	0x000015f9

000018c8 <_tcc_pwm_get_duty>:
{
    18c8:	b510      	push	{r4, lr}
	void *const         hw      = device->hw;
    18ca:	6904      	ldr	r4, [r0, #16]
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    18cc:	0020      	movs	r0, r4
    18ce:	4b0e      	ldr	r3, [pc, #56]	; (1908 <_tcc_pwm_get_duty+0x40>)
    18d0:	4798      	blx	r3
	if (cfg_pwm == NULL) {
    18d2:	2800      	cmp	r0, #0
    18d4:	d015      	beq.n	1902 <_tcc_pwm_get_duty+0x3a>
    18d6:	2280      	movs	r2, #128	; 0x80
    18d8:	02d2      	lsls	r2, r2, #11
    18da:	68a3      	ldr	r3, [r4, #8]
    18dc:	4213      	tst	r3, r2
    18de:	d1fc      	bne.n	18da <_tcc_pwm_get_duty+0x12>
	return ((Tcc *)hw)->PERB.reg;
    18e0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
	uint32_t duty_cycle = hri_tcc_read_CCB_reg(hw, cfg_pwm->sel_ch);
    18e2:	7940      	ldrb	r0, [r0, #5]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    18e4:	22f0      	movs	r2, #240	; 0xf0
    18e6:	03d2      	lsls	r2, r2, #15
    18e8:	68a3      	ldr	r3, [r4, #8]
    18ea:	4213      	tst	r3, r2
    18ec:	d1fc      	bne.n	18e8 <_tcc_pwm_get_duty+0x20>
}

static inline hri_tcc_ccb_reg_t hri_tcc_read_CCB_reg(const void *const hw, uint8_t index)
{
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CCB0 | TCC_SYNCBUSY_CCB1 | TCC_SYNCBUSY_CCB2 | TCC_SYNCBUSY_CCB3);
	return ((Tcc *)hw)->CCB[index].reg;
    18ee:	0003      	movs	r3, r0
    18f0:	331c      	adds	r3, #28
    18f2:	009b      	lsls	r3, r3, #2
    18f4:	591b      	ldr	r3, [r3, r4]
	return ((duty_cycle * 1000) / per);
    18f6:	20fa      	movs	r0, #250	; 0xfa
    18f8:	0080      	lsls	r0, r0, #2
    18fa:	4358      	muls	r0, r3
    18fc:	4b03      	ldr	r3, [pc, #12]	; (190c <_tcc_pwm_get_duty+0x44>)
    18fe:	4798      	blx	r3
}
    1900:	bd10      	pop	{r4, pc}
		return ERR_NOT_FOUND;
    1902:	200a      	movs	r0, #10
    1904:	4240      	negs	r0, r0
    1906:	e7fb      	b.n	1900 <_tcc_pwm_get_duty+0x38>
    1908:	000015f9 	.word	0x000015f9
    190c:	00002175 	.word	0x00002175

00001910 <_tcc_pwm_set_irq_state>:
{
    1910:	b570      	push	{r4, r5, r6, lr}
    1912:	0004      	movs	r4, r0
    1914:	000e      	movs	r6, r1
    1916:	0015      	movs	r5, r2
	ASSERT(device);
    1918:	1e43      	subs	r3, r0, #1
    191a:	4198      	sbcs	r0, r3
    191c:	b2c0      	uxtb	r0, r0
    191e:	22a3      	movs	r2, #163	; 0xa3
    1920:	0052      	lsls	r2, r2, #1
    1922:	490d      	ldr	r1, [pc, #52]	; (1958 <_tcc_pwm_set_irq_state+0x48>)
    1924:	4b0d      	ldr	r3, [pc, #52]	; (195c <_tcc_pwm_set_irq_state+0x4c>)
    1926:	4798      	blx	r3
	if (PWM_DEVICE_PERIOD_CB == type) {
    1928:	2e00      	cmp	r6, #0
    192a:	d108      	bne.n	193e <_tcc_pwm_set_irq_state+0x2e>
		hri_tcc_write_INTEN_OVF_bit(device->hw, disable);
    192c:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    192e:	2d00      	cmp	r5, #0
    1930:	d102      	bne.n	1938 <_tcc_pwm_set_irq_state+0x28>
		((Tcc *)hw)->INTENCLR.reg = TCC_INTENSET_OVF;
    1932:	2201      	movs	r2, #1
    1934:	625a      	str	r2, [r3, #36]	; 0x24
    1936:	e004      	b.n	1942 <_tcc_pwm_set_irq_state+0x32>
		((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    1938:	2201      	movs	r2, #1
    193a:	629a      	str	r2, [r3, #40]	; 0x28
    193c:	e001      	b.n	1942 <_tcc_pwm_set_irq_state+0x32>
	} else if (PWM_DEVICE_ERROR_CB == type) {
    193e:	2e01      	cmp	r6, #1
    1940:	d000      	beq.n	1944 <_tcc_pwm_set_irq_state+0x34>
}
    1942:	bd70      	pop	{r4, r5, r6, pc}
		hri_tcc_write_INTEN_ERR_bit(device->hw, disable);
    1944:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1946:	2d00      	cmp	r5, #0
    1948:	d002      	beq.n	1950 <_tcc_pwm_set_irq_state+0x40>
		((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_ERR;
    194a:	2208      	movs	r2, #8
    194c:	629a      	str	r2, [r3, #40]	; 0x28
}
    194e:	e7f8      	b.n	1942 <_tcc_pwm_set_irq_state+0x32>
		((Tcc *)hw)->INTENCLR.reg = TCC_INTENSET_ERR;
    1950:	2208      	movs	r2, #8
    1952:	625a      	str	r2, [r3, #36]	; 0x24
    1954:	e7f5      	b.n	1942 <_tcc_pwm_set_irq_state+0x32>
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	000023e4 	.word	0x000023e4
    195c:	00000ed5 	.word	0x00000ed5

00001960 <_tcc_get_pwm>:
	return &_tcc_pwm_functions;
    1960:	4801      	ldr	r0, [pc, #4]	; (1968 <_tcc_get_pwm+0x8>)
}
    1962:	3034      	adds	r0, #52	; 0x34
    1964:	4770      	bx	lr
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	20000080 	.word	0x20000080

0000196c <TCC0_Handler>:
{
    196c:	b510      	push	{r4, lr}
	tcc_pwm_interrupt_handler(_tcc0_dev);
    196e:	4b02      	ldr	r3, [pc, #8]	; (1978 <TCC0_Handler+0xc>)
    1970:	6818      	ldr	r0, [r3, #0]
    1972:	4b02      	ldr	r3, [pc, #8]	; (197c <TCC0_Handler+0x10>)
    1974:	4798      	blx	r3
}
    1976:	bd10      	pop	{r4, pc}
    1978:	20000160 	.word	0x20000160
    197c:	000015cb 	.word	0x000015cb

00001980 <TCC1_Handler>:
{
    1980:	b510      	push	{r4, lr}
	tcc_pwm_interrupt_handler(_tcc1_dev);
    1982:	4b02      	ldr	r3, [pc, #8]	; (198c <TCC1_Handler+0xc>)
    1984:	6858      	ldr	r0, [r3, #4]
    1986:	4b02      	ldr	r3, [pc, #8]	; (1990 <TCC1_Handler+0x10>)
    1988:	4798      	blx	r3
}
    198a:	bd10      	pop	{r4, pc}
    198c:	20000160 	.word	0x20000160
    1990:	000015cb 	.word	0x000015cb

00001994 <TCC2_Handler>:
{
    1994:	b510      	push	{r4, lr}
	tcc_pwm_interrupt_handler(_tcc2_dev);
    1996:	4b02      	ldr	r3, [pc, #8]	; (19a0 <TCC2_Handler+0xc>)
    1998:	6898      	ldr	r0, [r3, #8]
    199a:	4b02      	ldr	r3, [pc, #8]	; (19a4 <TCC2_Handler+0x10>)
    199c:	4798      	blx	r3
}
    199e:	bd10      	pop	{r4, pc}
    19a0:	20000160 	.word	0x20000160
    19a4:	000015cb 	.word	0x000015cb

000019a8 <_tc_start_pwm>:
/**
 * \brief Start PWM
 */
void _tc_start_pwm(struct _pwm_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    19a8:	6902      	ldr	r2, [r0, #16]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    19aa:	8813      	ldrh	r3, [r2, #0]
    19ac:	2102      	movs	r1, #2
    19ae:	430b      	orrs	r3, r1
    19b0:	8013      	strh	r3, [r2, #0]
}
    19b2:	4770      	bx	lr

000019b4 <_tc_stop_pwm>:
/**
 * \brief Stop PWM
 */
void _tc_stop_pwm(struct _pwm_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    19b4:	6902      	ldr	r2, [r0, #16]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    19b6:	8813      	ldrh	r3, [r2, #0]
    19b8:	2102      	movs	r1, #2
    19ba:	438b      	bics	r3, r1
    19bc:	8013      	strh	r3, [r2, #0]
}
    19be:	4770      	bx	lr

000019c0 <_tc_is_pwm_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _tc_is_pwm_enabled(const struct _pwm_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    19c0:	6903      	ldr	r3, [r0, #16]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    19c2:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    19c4:	0780      	lsls	r0, r0, #30
    19c6:	0fc0      	lsrs	r0, r0, #31
}
    19c8:	4770      	bx	lr

000019ca <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    19ca:	b570      	push	{r4, r5, r6, lr}
    19cc:	0005      	movs	r5, r0
	void *const hw = device->hw;
    19ce:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    19d0:	7ba3      	ldrb	r3, [r4, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    19d2:	07db      	lsls	r3, r3, #31
    19d4:	d505      	bpl.n	19e2 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    19d6:	2301      	movs	r3, #1
    19d8:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    19da:	6803      	ldr	r3, [r0, #0]
    19dc:	2b00      	cmp	r3, #0
    19de:	d000      	beq.n	19e2 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    19e0:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    19e2:	7b63      	ldrb	r3, [r4, #13]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    19e4:	079b      	lsls	r3, r3, #30
    19e6:	d506      	bpl.n	19f6 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    19e8:	2302      	movs	r3, #2
    19ea:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    19ec:	686b      	ldr	r3, [r5, #4]
    19ee:	2b00      	cmp	r3, #0
    19f0:	d001      	beq.n	19f6 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    19f2:	0028      	movs	r0, r5
    19f4:	4798      	blx	r3
		}
	}
}
    19f6:	bd70      	pop	{r4, r5, r6, pc}

000019f8 <_tc_pwm_deinit>:
	void *const hw = device->hw;
    19f8:	6902      	ldr	r2, [r0, #16]
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    19fa:	4b0d      	ldr	r3, [pc, #52]	; (1a30 <_tc_pwm_deinit+0x38>)
    19fc:	18d3      	adds	r3, r2, r3
    19fe:	0a9b      	lsrs	r3, r3, #10
	NVIC_DisableIRQ((IRQn_Type)(TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1a00:	3312      	adds	r3, #18
  if ((int32_t)(IRQn) >= 0)
    1a02:	b2d8      	uxtb	r0, r3
    1a04:	061b      	lsls	r3, r3, #24
    1a06:	d40a      	bmi.n	1a1e <_tc_pwm_deinit+0x26>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a08:	211f      	movs	r1, #31
    1a0a:	4001      	ands	r1, r0
    1a0c:	2301      	movs	r3, #1
    1a0e:	408b      	lsls	r3, r1
    1a10:	2180      	movs	r1, #128	; 0x80
    1a12:	4808      	ldr	r0, [pc, #32]	; (1a34 <_tc_pwm_deinit+0x3c>)
    1a14:	5043      	str	r3, [r0, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1a16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a1a:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1a1e:	8813      	ldrh	r3, [r2, #0]
    1a20:	2102      	movs	r1, #2
    1a22:	438b      	bics	r3, r1
    1a24:	8013      	strh	r3, [r2, #0]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    1a26:	8813      	ldrh	r3, [r2, #0]
    1a28:	3901      	subs	r1, #1
    1a2a:	430b      	orrs	r3, r1
    1a2c:	8013      	strh	r3, [r2, #0]
}
    1a2e:	4770      	bx	lr
    1a30:	bdffd400 	.word	0xbdffd400
    1a34:	e000e100 	.word	0xe000e100

00001a38 <_tc_pwm_set_irq_state>:
{
    1a38:	b570      	push	{r4, r5, r6, lr}
    1a3a:	0004      	movs	r4, r0
    1a3c:	000e      	movs	r6, r1
    1a3e:	0015      	movs	r5, r2
	ASSERT(device);
    1a40:	1e43      	subs	r3, r0, #1
    1a42:	4198      	sbcs	r0, r3
    1a44:	b2c0      	uxtb	r0, r0
    1a46:	228a      	movs	r2, #138	; 0x8a
    1a48:	0052      	lsls	r2, r2, #1
    1a4a:	490d      	ldr	r1, [pc, #52]	; (1a80 <_tc_pwm_set_irq_state+0x48>)
    1a4c:	4b0d      	ldr	r3, [pc, #52]	; (1a84 <_tc_pwm_set_irq_state+0x4c>)
    1a4e:	4798      	blx	r3
	if (PWM_DEVICE_PERIOD_CB == type) {
    1a50:	2e00      	cmp	r6, #0
    1a52:	d108      	bne.n	1a66 <_tc_pwm_set_irq_state+0x2e>
		hri_tc_write_INTEN_OVF_bit(device->hw, disable);
    1a54:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1a56:	2d00      	cmp	r5, #0
    1a58:	d102      	bne.n	1a60 <_tc_pwm_set_irq_state+0x28>
		((Tc *)hw)->COUNT16.INTENCLR.reg = TC_INTENSET_OVF;
    1a5a:	2201      	movs	r2, #1
    1a5c:	731a      	strb	r2, [r3, #12]
    1a5e:	e004      	b.n	1a6a <_tc_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1a60:	2201      	movs	r2, #1
    1a62:	735a      	strb	r2, [r3, #13]
    1a64:	e001      	b.n	1a6a <_tc_pwm_set_irq_state+0x32>
	} else if (PWM_DEVICE_ERROR_CB == type) {
    1a66:	2e01      	cmp	r6, #1
    1a68:	d000      	beq.n	1a6c <_tc_pwm_set_irq_state+0x34>
}
    1a6a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tc_write_INTEN_ERR_bit(device->hw, disable);
    1a6c:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1a6e:	2d00      	cmp	r5, #0
    1a70:	d002      	beq.n	1a78 <_tc_pwm_set_irq_state+0x40>
		((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
    1a72:	2202      	movs	r2, #2
    1a74:	735a      	strb	r2, [r3, #13]
}
    1a76:	e7f8      	b.n	1a6a <_tc_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT16.INTENCLR.reg = TC_INTENSET_ERR;
    1a78:	2202      	movs	r2, #2
    1a7a:	731a      	strb	r2, [r3, #12]
    1a7c:	e7f5      	b.n	1a6a <_tc_pwm_set_irq_state+0x32>
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	000023fc 	.word	0x000023fc
    1a84:	00000ed5 	.word	0x00000ed5

00001a88 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1a88:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1a8a:	4b10      	ldr	r3, [pc, #64]	; (1acc <get_tc_index+0x44>)
    1a8c:	18c3      	adds	r3, r0, r3
    1a8e:	0a9b      	lsrs	r3, r3, #10
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    1a90:	3303      	adds	r3, #3
    1a92:	b2db      	uxtb	r3, r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    1a94:	4a0e      	ldr	r2, [pc, #56]	; (1ad0 <get_tc_index+0x48>)
    1a96:	7812      	ldrb	r2, [r2, #0]
    1a98:	429a      	cmp	r2, r3
    1a9a:	d014      	beq.n	1ac6 <get_tc_index+0x3e>
    1a9c:	4a0c      	ldr	r2, [pc, #48]	; (1ad0 <get_tc_index+0x48>)
    1a9e:	7d12      	ldrb	r2, [r2, #20]
    1aa0:	429a      	cmp	r2, r3
    1aa2:	d00e      	beq.n	1ac2 <get_tc_index+0x3a>
    1aa4:	2228      	movs	r2, #40	; 0x28
    1aa6:	490a      	ldr	r1, [pc, #40]	; (1ad0 <get_tc_index+0x48>)
    1aa8:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1aaa:	2002      	movs	r0, #2
		if (_tcs[i].number == tc_offset) {
    1aac:	429a      	cmp	r2, r3
    1aae:	d00b      	beq.n	1ac8 <get_tc_index+0x40>
			return i;
		}
	}

	ASSERT(false);
    1ab0:	227c      	movs	r2, #124	; 0x7c
    1ab2:	32ff      	adds	r2, #255	; 0xff
    1ab4:	4907      	ldr	r1, [pc, #28]	; (1ad4 <get_tc_index+0x4c>)
    1ab6:	2000      	movs	r0, #0
    1ab8:	4b07      	ldr	r3, [pc, #28]	; (1ad8 <get_tc_index+0x50>)
    1aba:	4798      	blx	r3
	return -1;
    1abc:	2001      	movs	r0, #1
    1abe:	4240      	negs	r0, r0
}
    1ac0:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1ac2:	2001      	movs	r0, #1
    1ac4:	e000      	b.n	1ac8 <get_tc_index+0x40>
    1ac6:	2000      	movs	r0, #0
			return i;
    1ac8:	b240      	sxtb	r0, r0
    1aca:	e7f9      	b.n	1ac0 <get_tc_index+0x38>
    1acc:	bdffd400 	.word	0xbdffd400
    1ad0:	200000d8 	.word	0x200000d8
    1ad4:	000023fc 	.word	0x000023fc
    1ad8:	00000ed5 	.word	0x00000ed5

00001adc <_tc_pwm_init>:
{
    1adc:	b570      	push	{r4, r5, r6, lr}
    1ade:	0005      	movs	r5, r0
    1ae0:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1ae2:	0008      	movs	r0, r1
    1ae4:	4b38      	ldr	r3, [pc, #224]	; (1bc8 <_tc_pwm_init+0xec>)
    1ae6:	4798      	blx	r3
	device->hw = hw;
    1ae8:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1aea:	7be3      	ldrb	r3, [r4, #15]
    1aec:	09db      	lsrs	r3, r3, #7
    1aee:	d1fc      	bne.n	1aea <_tc_pwm_init+0xe>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1af0:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1af2:	079b      	lsls	r3, r3, #30
    1af4:	d504      	bpl.n	1b00 <_tc_pwm_init+0x24>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1af6:	2300      	movs	r3, #0
    1af8:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1afa:	7be3      	ldrb	r3, [r4, #15]
    1afc:	09db      	lsrs	r3, r3, #7
    1afe:	d1fc      	bne.n	1afa <_tc_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b00:	2301      	movs	r3, #1
    1b02:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b04:	7be3      	ldrb	r3, [r4, #15]
    1b06:	09db      	lsrs	r3, r3, #7
    1b08:	d1fc      	bne.n	1b04 <_tc_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1b0a:	0083      	lsls	r3, r0, #2
    1b0c:	181b      	adds	r3, r3, r0
    1b0e:	009a      	lsls	r2, r3, #2
    1b10:	4b2e      	ldr	r3, [pc, #184]	; (1bcc <_tc_pwm_init+0xf0>)
    1b12:	189b      	adds	r3, r3, r2
    1b14:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b16:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1b18:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1b1a:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1b1c:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1b1e:	8163      	strh	r3, [r4, #10]
    1b20:	230c      	movs	r3, #12
    1b22:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1b24:	2b08      	cmp	r3, #8
    1b26:	d030      	beq.n	1b8a <_tc_pwm_init+0xae>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d14a      	bne.n	1bc2 <_tc_pwm_init+0xe6>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1b2c:	4927      	ldr	r1, [pc, #156]	; (1bcc <_tc_pwm_init+0xf0>)
    1b2e:	0083      	lsls	r3, r0, #2
    1b30:	181a      	adds	r2, r3, r0
    1b32:	0092      	lsls	r2, r2, #2
    1b34:	188a      	adds	r2, r1, r2
    1b36:	8992      	ldrh	r2, [r2, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1b38:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1b3a:	1818      	adds	r0, r3, r0
    1b3c:	0080      	lsls	r0, r0, #2
    1b3e:	1808      	adds	r0, r1, r0
    1b40:	8a03      	ldrh	r3, [r0, #16]
    1b42:	8363      	strh	r3, [r4, #26]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1b44:	4b22      	ldr	r3, [pc, #136]	; (1bd0 <_tc_pwm_init+0xf4>)
    1b46:	429c      	cmp	r4, r3
    1b48:	d02c      	beq.n	1ba4 <_tc_pwm_init+0xc8>
		_tc3_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    1b4a:	4b22      	ldr	r3, [pc, #136]	; (1bd4 <_tc_pwm_init+0xf8>)
    1b4c:	429c      	cmp	r4, r3
    1b4e:	d02c      	beq.n	1baa <_tc_pwm_init+0xce>
		_tc4_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC5) {
    1b50:	4b21      	ldr	r3, [pc, #132]	; (1bd8 <_tc_pwm_init+0xfc>)
    1b52:	429c      	cmp	r4, r3
    1b54:	d031      	beq.n	1bba <_tc_pwm_init+0xde>
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1b56:	4b21      	ldr	r3, [pc, #132]	; (1bdc <_tc_pwm_init+0x100>)
    1b58:	469c      	mov	ip, r3
    1b5a:	4464      	add	r4, ip
    1b5c:	0aa4      	lsrs	r4, r4, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1b5e:	3412      	adds	r4, #18
  if ((int32_t)(IRQn) >= 0)
    1b60:	b2e3      	uxtb	r3, r4
	return ERR_NONE;
    1b62:	2000      	movs	r0, #0
    1b64:	0622      	lsls	r2, r4, #24
    1b66:	d40f      	bmi.n	1b88 <_tc_pwm_init+0xac>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b68:	221f      	movs	r2, #31
    1b6a:	401a      	ands	r2, r3
    1b6c:	2301      	movs	r3, #1
    1b6e:	4093      	lsls	r3, r2
    1b70:	4a1b      	ldr	r2, [pc, #108]	; (1be0 <_tc_pwm_init+0x104>)
    1b72:	2180      	movs	r1, #128	; 0x80
    1b74:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1b76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b7a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b7e:	3101      	adds	r1, #1
    1b80:	31ff      	adds	r1, #255	; 0xff
    1b82:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b84:	6013      	str	r3, [r2, #0]
    1b86:	2000      	movs	r0, #0
}
    1b88:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1b8a:	4910      	ldr	r1, [pc, #64]	; (1bcc <_tc_pwm_init+0xf0>)
    1b8c:	0083      	lsls	r3, r0, #2
    1b8e:	181a      	adds	r2, r3, r0
    1b90:	0092      	lsls	r2, r2, #2
    1b92:	188a      	adds	r2, r1, r2
    1b94:	68d2      	ldr	r2, [r2, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1b96:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1b98:	1818      	adds	r0, r3, r0
    1b9a:	0080      	lsls	r0, r0, #2
    1b9c:	1808      	adds	r0, r1, r0
    1b9e:	6903      	ldr	r3, [r0, #16]
    1ba0:	61e3      	str	r3, [r4, #28]
    1ba2:	e7cf      	b.n	1b44 <_tc_pwm_init+0x68>
		_tc3_dev = (struct _pwm_device *)dev;
    1ba4:	4b0f      	ldr	r3, [pc, #60]	; (1be4 <_tc_pwm_init+0x108>)
    1ba6:	601d      	str	r5, [r3, #0]
    1ba8:	e7d5      	b.n	1b56 <_tc_pwm_init+0x7a>
		_tc4_dev = (struct _pwm_device *)dev;
    1baa:	4b0e      	ldr	r3, [pc, #56]	; (1be4 <_tc_pwm_init+0x108>)
    1bac:	605d      	str	r5, [r3, #4]
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1bae:	4b0b      	ldr	r3, [pc, #44]	; (1bdc <_tc_pwm_init+0x100>)
    1bb0:	18e2      	adds	r2, r4, r3
    1bb2:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1bb4:	3212      	adds	r2, #18
    1bb6:	b2d3      	uxtb	r3, r2
    1bb8:	e7d6      	b.n	1b68 <_tc_pwm_init+0x8c>
		_tc5_dev = (struct _pwm_device *)dev;
    1bba:	4b0a      	ldr	r3, [pc, #40]	; (1be4 <_tc_pwm_init+0x108>)
    1bbc:	609d      	str	r5, [r3, #8]
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1bbe:	2314      	movs	r3, #20
    1bc0:	e7d2      	b.n	1b68 <_tc_pwm_init+0x8c>
		return ERR_INVALID_DATA;
    1bc2:	2001      	movs	r0, #1
    1bc4:	4240      	negs	r0, r0
    1bc6:	e7df      	b.n	1b88 <_tc_pwm_init+0xac>
    1bc8:	00001a89 	.word	0x00001a89
    1bcc:	200000d8 	.word	0x200000d8
    1bd0:	42002c00 	.word	0x42002c00
    1bd4:	42003000 	.word	0x42003000
    1bd8:	42003400 	.word	0x42003400
    1bdc:	bdffd400 	.word	0xbdffd400
    1be0:	e000e100 	.word	0xe000e100
    1be4:	2000016c 	.word	0x2000016c

00001be8 <_tc_set_pwm_param>:
{
    1be8:	b570      	push	{r4, r5, r6, lr}
    1bea:	0006      	movs	r6, r0
    1bec:	000d      	movs	r5, r1
    1bee:	0014      	movs	r4, r2
	int8_t      i  = get_tc_index(device->hw);
    1bf0:	6900      	ldr	r0, [r0, #16]
    1bf2:	4b0b      	ldr	r3, [pc, #44]	; (1c20 <_tc_set_pwm_param+0x38>)
    1bf4:	4798      	blx	r3
	void *const hw = device->hw;
    1bf6:	6936      	ldr	r6, [r6, #16]
	_tcs[i].cc0    = period;
    1bf8:	490a      	ldr	r1, [pc, #40]	; (1c24 <_tc_set_pwm_param+0x3c>)
    1bfa:	0083      	lsls	r3, r0, #2
    1bfc:	181a      	adds	r2, r3, r0
    1bfe:	0092      	lsls	r2, r2, #2
    1c00:	188a      	adds	r2, r1, r2
    1c02:	60d5      	str	r5, [r2, #12]
	_tcs[i].cc1    = duty_cycle;
    1c04:	6114      	str	r4, [r2, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1c06:	8852      	ldrh	r2, [r2, #2]
    1c08:	230c      	movs	r3, #12
    1c0a:	4013      	ands	r3, r2
    1c0c:	2b08      	cmp	r3, #8
    1c0e:	d004      	beq.n	1c1a <_tc_set_pwm_param+0x32>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    1c10:	b2ad      	uxth	r5, r5
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1c12:	8335      	strh	r5, [r6, #24]
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    1c14:	b2a4      	uxth	r4, r4
    1c16:	8374      	strh	r4, [r6, #26]
}
    1c18:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1c1a:	61b5      	str	r5, [r6, #24]
    1c1c:	61f4      	str	r4, [r6, #28]
    1c1e:	e7fb      	b.n	1c18 <_tc_set_pwm_param+0x30>
    1c20:	00001a89 	.word	0x00001a89
    1c24:	200000d8 	.word	0x200000d8

00001c28 <_tc_pwm_get_period>:
{
    1c28:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1c2a:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    1c2c:	0020      	movs	r0, r4
    1c2e:	4b08      	ldr	r3, [pc, #32]	; (1c50 <_tc_pwm_get_period+0x28>)
    1c30:	4798      	blx	r3
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1c32:	0083      	lsls	r3, r0, #2
    1c34:	1818      	adds	r0, r3, r0
    1c36:	0080      	lsls	r0, r0, #2
    1c38:	4b06      	ldr	r3, [pc, #24]	; (1c54 <_tc_pwm_get_period+0x2c>)
    1c3a:	1818      	adds	r0, r3, r0
    1c3c:	8842      	ldrh	r2, [r0, #2]
    1c3e:	230c      	movs	r3, #12
    1c40:	4013      	ands	r3, r2
    1c42:	2b08      	cmp	r3, #8
    1c44:	d002      	beq.n	1c4c <_tc_pwm_get_period+0x24>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    1c46:	8b20      	ldrh	r0, [r4, #24]
    1c48:	b280      	uxth	r0, r0
}
    1c4a:	bd10      	pop	{r4, pc}
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    1c4c:	69a0      	ldr	r0, [r4, #24]
		return (pwm_period_t)(hri_tccount32_read_CC_reg(hw, 0));
    1c4e:	e7fc      	b.n	1c4a <_tc_pwm_get_period+0x22>
    1c50:	00001a89 	.word	0x00001a89
    1c54:	200000d8 	.word	0x200000d8

00001c58 <_tc_pwm_get_duty>:
{
    1c58:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1c5a:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    1c5c:	0020      	movs	r0, r4
    1c5e:	4b0c      	ldr	r3, [pc, #48]	; (1c90 <_tc_pwm_get_duty+0x38>)
    1c60:	4798      	blx	r3
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1c62:	0083      	lsls	r3, r0, #2
    1c64:	1818      	adds	r0, r3, r0
    1c66:	0080      	lsls	r0, r0, #2
    1c68:	4b0a      	ldr	r3, [pc, #40]	; (1c94 <_tc_pwm_get_duty+0x3c>)
    1c6a:	1818      	adds	r0, r3, r0
    1c6c:	8842      	ldrh	r2, [r0, #2]
    1c6e:	230c      	movs	r3, #12
    1c70:	4013      	ands	r3, r2
    1c72:	2b08      	cmp	r3, #8
    1c74:	d009      	beq.n	1c8a <_tc_pwm_get_duty+0x32>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    1c76:	8b21      	ldrh	r1, [r4, #24]
    1c78:	b289      	uxth	r1, r1
    1c7a:	8b63      	ldrh	r3, [r4, #26]
    1c7c:	b29b      	uxth	r3, r3
	return ((duty_cycle * 1000) / per);
    1c7e:	20fa      	movs	r0, #250	; 0xfa
    1c80:	0080      	lsls	r0, r0, #2
    1c82:	4358      	muls	r0, r3
    1c84:	4b04      	ldr	r3, [pc, #16]	; (1c98 <_tc_pwm_get_duty+0x40>)
    1c86:	4798      	blx	r3
}
    1c88:	bd10      	pop	{r4, pc}
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    1c8a:	69a1      	ldr	r1, [r4, #24]
    1c8c:	69e3      	ldr	r3, [r4, #28]
    1c8e:	e7f6      	b.n	1c7e <_tc_pwm_get_duty+0x26>
    1c90:	00001a89 	.word	0x00001a89
    1c94:	200000d8 	.word	0x200000d8
    1c98:	00002175 	.word	0x00002175

00001c9c <_tc_get_pwm>:
	return &_tc_pwm_functions;
    1c9c:	4801      	ldr	r0, [pc, #4]	; (1ca4 <_tc_get_pwm+0x8>)
}
    1c9e:	303c      	adds	r0, #60	; 0x3c
    1ca0:	4770      	bx	lr
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	200000d8 	.word	0x200000d8

00001ca8 <TC3_Handler>:
{
    1ca8:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc3_dev);
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <TC3_Handler+0xc>)
    1cac:	6818      	ldr	r0, [r3, #0]
    1cae:	4b02      	ldr	r3, [pc, #8]	; (1cb8 <TC3_Handler+0x10>)
    1cb0:	4798      	blx	r3
}
    1cb2:	bd10      	pop	{r4, pc}
    1cb4:	2000016c 	.word	0x2000016c
    1cb8:	000019cb 	.word	0x000019cb

00001cbc <TC4_Handler>:
{
    1cbc:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc4_dev);
    1cbe:	4b02      	ldr	r3, [pc, #8]	; (1cc8 <TC4_Handler+0xc>)
    1cc0:	6858      	ldr	r0, [r3, #4]
    1cc2:	4b02      	ldr	r3, [pc, #8]	; (1ccc <TC4_Handler+0x10>)
    1cc4:	4798      	blx	r3
}
    1cc6:	bd10      	pop	{r4, pc}
    1cc8:	2000016c 	.word	0x2000016c
    1ccc:	000019cb 	.word	0x000019cb

00001cd0 <TC5_Handler>:
{
    1cd0:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc5_dev);
    1cd2:	4b02      	ldr	r3, [pc, #8]	; (1cdc <TC5_Handler+0xc>)
    1cd4:	6898      	ldr	r0, [r3, #8]
    1cd6:	4b02      	ldr	r3, [pc, #8]	; (1ce0 <TC5_Handler+0x10>)
    1cd8:	4798      	blx	r3
}
    1cda:	bd10      	pop	{r4, pc}
    1cdc:	2000016c 	.word	0x2000016c
    1ce0:	000019cb 	.word	0x000019cb

00001ce4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1ce4:	b510      	push	{r4, lr}
    1ce6:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1ce8:	d025      	beq.n	1d36 <_wdt_init+0x52>
    1cea:	6800      	ldr	r0, [r0, #0]
    1cec:	1e43      	subs	r3, r0, #1
    1cee:	4198      	sbcs	r0, r3
    1cf0:	b2c0      	uxtb	r0, r0
    1cf2:	224f      	movs	r2, #79	; 0x4f
    1cf4:	4914      	ldr	r1, [pc, #80]	; (1d48 <_wdt_init+0x64>)
    1cf6:	4b15      	ldr	r3, [pc, #84]	; (1d4c <_wdt_init+0x68>)
    1cf8:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    1cfa:	6822      	ldr	r2, [r4, #0]
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    1cfc:	79d3      	ldrb	r3, [r2, #7]
    1cfe:	09db      	lsrs	r3, r3, #7
    1d00:	d1fc      	bne.n	1cfc <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRL_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw);
	tmp = ((Wdt *)hw)->CTRL.reg;
    1d02:	7813      	ldrb	r3, [r2, #0]
    1d04:	09db      	lsrs	r3, r3, #7
    1d06:	d118      	bne.n	1d3a <_wdt_init+0x56>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    1d08:	79d3      	ldrb	r3, [r2, #7]
    1d0a:	09db      	lsrs	r3, r3, #7
    1d0c:	d1fc      	bne.n	1d08 <_wdt_init+0x24>
	tmp = ((Wdt *)hw)->CTRL.reg;
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	079b      	lsls	r3, r3, #30
    1d12:	d415      	bmi.n	1d40 <_wdt_init+0x5c>
	((Wdt *)hw)->CTRL.reg &= ~WDT_CTRL_WEN;
    1d14:	7813      	ldrb	r3, [r2, #0]
    1d16:	2104      	movs	r1, #4
    1d18:	438b      	bics	r3, r1
    1d1a:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    1d1c:	79d3      	ldrb	r3, [r2, #7]
    1d1e:	09db      	lsrs	r3, r3, #7
    1d20:	d1fc      	bne.n	1d1c <_wdt_init+0x38>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRL_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    1d22:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    1d24:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    1d26:	210f      	movs	r1, #15
    1d28:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    1d2a:	7053      	strb	r3, [r2, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    1d2c:	79d3      	ldrb	r3, [r2, #7]
    1d2e:	09db      	lsrs	r3, r3, #7
    1d30:	d1fc      	bne.n	1d2c <_wdt_init+0x48>
	}

	return ERR_NONE;
    1d32:	2000      	movs	r0, #0
}
    1d34:	bd10      	pop	{r4, pc}
    1d36:	2000      	movs	r0, #0
    1d38:	e7db      	b.n	1cf2 <_wdt_init+0xe>
		return ERR_DENIED;
    1d3a:	2011      	movs	r0, #17
    1d3c:	4240      	negs	r0, r0
    1d3e:	e7f9      	b.n	1d34 <_wdt_init+0x50>
    1d40:	2011      	movs	r0, #17
    1d42:	4240      	negs	r0, r0
    1d44:	e7f6      	b.n	1d34 <_wdt_init+0x50>
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	00002410 	.word	0x00002410
    1d4c:	00000ed5 	.word	0x00000ed5

00001d50 <I2C_0_error>:


static void I2C_0_error(const struct i2c_s_async_descriptor * const descr) 
{
	
	hri_sercomi2cm_set_CTRLA_SWRST_bit(descr->device.hw);
    1d50:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_SWRST;
    1d52:	6813      	ldr	r3, [r2, #0]
    1d54:	2101      	movs	r1, #1
    1d56:	430b      	orrs	r3, r1
    1d58:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d5a:	69d3      	ldr	r3, [r2, #28]
    1d5c:	4219      	tst	r1, r3
    1d5e:	d1fc      	bne.n	1d5a <I2C_0_error+0xa>
	hri_sercomi2cm_clear_INTFLAG_reg(descr->device.hw, 0xff);
    1d60:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    1d62:	22ff      	movs	r2, #255	; 0xff
    1d64:	761a      	strb	r2, [r3, #24]
	i2cFailed = true;
    1d66:	3afe      	subs	r2, #254	; 0xfe
    1d68:	4b01      	ldr	r3, [pc, #4]	; (1d70 <I2C_0_error+0x20>)
    1d6a:	701a      	strb	r2, [r3, #0]
}
    1d6c:	4770      	bx	lr
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	20000178 	.word	0x20000178

00001d74 <I2C_0_tx_pending>:
{
    1d74:	b510      	push	{r4, lr}
	dOut[0] = (uint8_t)  result & 0x00ff;
    1d76:	4b08      	ldr	r3, [pc, #32]	; (1d98 <I2C_0_tx_pending+0x24>)
    1d78:	881b      	ldrh	r3, [r3, #0]
    1d7a:	b2da      	uxtb	r2, r3
    1d7c:	4907      	ldr	r1, [pc, #28]	; (1d9c <I2C_0_tx_pending+0x28>)
    1d7e:	700a      	strb	r2, [r1, #0]
	dOut[1] = (uint8_t)((result & 0xff00) >> 8);
    1d80:	0a1b      	lsrs	r3, r3, #8
    1d82:	704b      	strb	r3, [r1, #1]
	dOut[2] = dOut[1] ^ dOut[0];
    1d84:	4053      	eors	r3, r2
    1d86:	708b      	strb	r3, [r1, #2]
	io_write(io, dOut, 4);  // MR I don't know why it has to be 4 but 3 doesnt work
    1d88:	4c05      	ldr	r4, [pc, #20]	; (1da0 <I2C_0_tx_pending+0x2c>)
    1d8a:	2204      	movs	r2, #4
    1d8c:	6860      	ldr	r0, [r4, #4]
    1d8e:	4b05      	ldr	r3, [pc, #20]	; (1da4 <I2C_0_tx_pending+0x30>)
    1d90:	4798      	blx	r3
	dataIndex = 0;
    1d92:	2300      	movs	r3, #0
    1d94:	7223      	strb	r3, [r4, #8]
}
    1d96:	bd10      	pop	{r4, pc}
    1d98:	20000138 	.word	0x20000138
    1d9c:	200002f8 	.word	0x200002f8
    1da0:	20000178 	.word	0x20000178
    1da4:	00000be1 	.word	0x00000be1

00001da8 <i2cFailure>:
	return i2cFailed;
    1da8:	4b01      	ldr	r3, [pc, #4]	; (1db0 <i2cFailure+0x8>)
    1daa:	7818      	ldrb	r0, [r3, #0]
}
    1dac:	4770      	bx	lr
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	20000178 	.word	0x20000178

00001db4 <geti2cAddress>:
{
    1db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db6:	46d6      	mov	lr, sl
    1db8:	464f      	mov	r7, r9
    1dba:	4646      	mov	r6, r8
    1dbc:	b5c0      	push	{r6, r7, lr}
    1dbe:	b084      	sub	sp, #16
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1dc0:	a803      	add	r0, sp, #12
    1dc2:	4b20      	ldr	r3, [pc, #128]	; (1e44 <geti2cAddress+0x90>)
    1dc4:	469a      	mov	sl, r3
    1dc6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1dc8:	23c0      	movs	r3, #192	; 0xc0
    1dca:	05db      	lsls	r3, r3, #23
    1dcc:	4698      	mov	r8, r3
    1dce:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1dd0:	4b1d      	ldr	r3, [pc, #116]	; (1e48 <geti2cAddress+0x94>)
    1dd2:	4699      	mov	r9, r3
    1dd4:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1dd6:	4643      	mov	r3, r8
    1dd8:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1dda:	4053      	eors	r3, r2
    1ddc:	401c      	ands	r4, r3
    1dde:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1de0:	a803      	add	r0, sp, #12
    1de2:	4f1a      	ldr	r7, [pc, #104]	; (1e4c <geti2cAddress+0x98>)
    1de4:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    1de6:	a802      	add	r0, sp, #8
    1de8:	47d0      	blx	sl
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1dea:	4643      	mov	r3, r8
    1dec:	681d      	ldr	r5, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1dee:	464b      	mov	r3, r9
    1df0:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1df2:	4643      	mov	r3, r8
    1df4:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1df6:	4053      	eors	r3, r2
    1df8:	401d      	ands	r5, r3
    1dfa:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    1dfc:	a802      	add	r0, sp, #8
    1dfe:	47b8      	blx	r7
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    1e00:	08a4      	lsrs	r4, r4, #2
    1e02:	2601      	movs	r6, #1
    1e04:	4034      	ands	r4, r6
	uint8_t config = ((gpio_get_pin_level(BoardID1) << 1) |
    1e06:	0064      	lsls	r4, r4, #1
    1e08:	08ed      	lsrs	r5, r5, #3
    1e0a:	4035      	ands	r5, r6
					  (gpio_get_pin_level(BoardID2) << 2) |
    1e0c:	00ad      	lsls	r5, r5, #2
	uint8_t config = ((gpio_get_pin_level(BoardID1) << 1) |
    1e0e:	432c      	orrs	r4, r5
	CRITICAL_SECTION_ENTER();
    1e10:	a801      	add	r0, sp, #4
    1e12:	47d0      	blx	sl
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e14:	4643      	mov	r3, r8
    1e16:	681d      	ldr	r5, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e18:	464b      	mov	r3, r9
    1e1a:	6a18      	ldr	r0, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e1c:	4643      	mov	r3, r8
    1e1e:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e20:	4043      	eors	r3, r0
    1e22:	401d      	ands	r5, r3
    1e24:	4045      	eors	r5, r0
	CRITICAL_SECTION_LEAVE();
    1e26:	a801      	add	r0, sp, #4
    1e28:	47b8      	blx	r7
    1e2a:	092d      	lsrs	r5, r5, #4
    1e2c:	402e      	ands	r6, r5
					  (gpio_get_pin_level(BoardID3) << 3));
    1e2e:	00f6      	lsls	r6, r6, #3
					  (gpio_get_pin_level(BoardID2) << 2) |
    1e30:	4326      	orrs	r6, r4
	return ( 0x20 + config); 
    1e32:	0030      	movs	r0, r6
    1e34:	3020      	adds	r0, #32
}
    1e36:	b004      	add	sp, #16
    1e38:	bc1c      	pop	{r2, r3, r4}
    1e3a:	4690      	mov	r8, r2
    1e3c:	4699      	mov	r9, r3
    1e3e:	46a2      	mov	sl, r4
    1e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	00000839 	.word	0x00000839
    1e48:	41004400 	.word	0x41004400
    1e4c:	00000847 	.word	0x00000847

00001e50 <I2C_0_prec>:
{
    1e50:	b510      	push	{r4, lr}
	io_read(io, data, CMD_BYTES);
    1e52:	4c1c      	ldr	r4, [pc, #112]	; (1ec4 <I2C_0_prec+0x74>)
    1e54:	4b1c      	ldr	r3, [pc, #112]	; (1ec8 <I2C_0_prec+0x78>)
    1e56:	6858      	ldr	r0, [r3, #4]
    1e58:	2202      	movs	r2, #2
    1e5a:	0021      	movs	r1, r4
    1e5c:	4b1b      	ldr	r3, [pc, #108]	; (1ecc <I2C_0_prec+0x7c>)
    1e5e:	4798      	blx	r3
	uint8_t i2cFunction = data[CMD1_BYTE] & 0b11100000;  // top 3 bits define the command
    1e60:	7822      	ldrb	r2, [r4, #0]
    1e62:	231f      	movs	r3, #31
    1e64:	0011      	movs	r1, r2
    1e66:	4399      	bics	r1, r3
    1e68:	000b      	movs	r3, r1
	switch (i2cFunction)
    1e6a:	2920      	cmp	r1, #32
    1e6c:	d00c      	beq.n	1e88 <I2C_0_prec+0x38>
    1e6e:	b2c9      	uxtb	r1, r1
    1e70:	29e0      	cmp	r1, #224	; 0xe0
    1e72:	d010      	beq.n	1e96 <I2C_0_prec+0x46>
    1e74:	2b00      	cmp	r3, #0
    1e76:	d000      	beq.n	1e7a <I2C_0_prec+0x2a>
}
    1e78:	bd10      	pop	{r4, pc}
			io_read(io, data+CMD_BYTES, 3); // old LED command only, reading 1 x rgb value
    1e7a:	4b13      	ldr	r3, [pc, #76]	; (1ec8 <I2C_0_prec+0x78>)
    1e7c:	6858      	ldr	r0, [r3, #4]
    1e7e:	2203      	movs	r2, #3
    1e80:	4913      	ldr	r1, [pc, #76]	; (1ed0 <I2C_0_prec+0x80>)
    1e82:	4b12      	ldr	r3, [pc, #72]	; (1ecc <I2C_0_prec+0x7c>)
    1e84:	4798      	blx	r3
		break;
    1e86:	e7f7      	b.n	1e78 <I2C_0_prec+0x28>
			result = getLatchedSwitchesBlockState(data[CMD2_BYTE]);
    1e88:	4b0e      	ldr	r3, [pc, #56]	; (1ec4 <I2C_0_prec+0x74>)
    1e8a:	7858      	ldrb	r0, [r3, #1]
    1e8c:	4b11      	ldr	r3, [pc, #68]	; (1ed4 <I2C_0_prec+0x84>)
    1e8e:	4798      	blx	r3
    1e90:	4b11      	ldr	r3, [pc, #68]	; (1ed8 <I2C_0_prec+0x88>)
    1e92:	8018      	strh	r0, [r3, #0]
		break;
    1e94:	e7f0      	b.n	1e78 <I2C_0_prec+0x28>
			uint8_t aSpecialCommand = (data[CMD1_BYTE] & I2C_COMMAND_MASK);
    1e96:	231f      	movs	r3, #31
    1e98:	401a      	ands	r2, r3
			switch(aSpecialCommand)
    1e9a:	2a01      	cmp	r2, #1
    1e9c:	d00c      	beq.n	1eb8 <I2C_0_prec+0x68>
    1e9e:	2a00      	cmp	r2, #0
    1ea0:	d005      	beq.n	1eae <I2C_0_prec+0x5e>
    1ea2:	2a02      	cmp	r2, #2
    1ea4:	d1e8      	bne.n	1e78 <I2C_0_prec+0x28>
					result = 1;
    1ea6:	2201      	movs	r2, #1
    1ea8:	4b0b      	ldr	r3, [pc, #44]	; (1ed8 <I2C_0_prec+0x88>)
    1eaa:	801a      	strh	r2, [r3, #0]
}
    1eac:	e7e4      	b.n	1e78 <I2C_0_prec+0x28>
					result = ((uint16_t)MAJOR_FW_VERSION << 8) | MINOR_FW_VERSION;
    1eae:	2202      	movs	r2, #2
    1eb0:	32ff      	adds	r2, #255	; 0xff
    1eb2:	4b09      	ldr	r3, [pc, #36]	; (1ed8 <I2C_0_prec+0x88>)
    1eb4:	801a      	strh	r2, [r3, #0]
					break;
    1eb6:	e7df      	b.n	1e78 <I2C_0_prec+0x28>
					result = (uint16_t)((0x0 << 8) | geti2cAddress());
    1eb8:	4b08      	ldr	r3, [pc, #32]	; (1edc <I2C_0_prec+0x8c>)
    1eba:	4798      	blx	r3
    1ebc:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <I2C_0_prec+0x88>)
    1ebe:	8018      	strh	r0, [r3, #0]
					break;
    1ec0:	e7da      	b.n	1e78 <I2C_0_prec+0x28>
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	200002fc 	.word	0x200002fc
    1ec8:	20000178 	.word	0x20000178
    1ecc:	00000c15 	.word	0x00000c15
    1ed0:	200002fe 	.word	0x200002fe
    1ed4:	00001f99 	.word	0x00001f99
    1ed8:	20000138 	.word	0x20000138
    1edc:	00001db5 	.word	0x00001db5

00001ee0 <i2cCommandHandlerInit>:


void i2cCommandHandlerInit(void)
{
    1ee0:	b570      	push	{r4, r5, r6, lr}
	i2c_s_async_get_io_descriptor(&I2C_0, &io);
    1ee2:	4c0e      	ldr	r4, [pc, #56]	; (1f1c <i2cCommandHandlerInit+0x3c>)
    1ee4:	490e      	ldr	r1, [pc, #56]	; (1f20 <i2cCommandHandlerInit+0x40>)
    1ee6:	3104      	adds	r1, #4
    1ee8:	0020      	movs	r0, r4
    1eea:	4b0e      	ldr	r3, [pc, #56]	; (1f24 <i2cCommandHandlerInit+0x44>)
    1eec:	4798      	blx	r3
	i2c_s_async_register_callback(&I2C_0, I2C_S_PREC, I2C_0_prec);
    1eee:	4a0e      	ldr	r2, [pc, #56]	; (1f28 <i2cCommandHandlerInit+0x48>)
    1ef0:	2105      	movs	r1, #5
    1ef2:	0020      	movs	r0, r4
    1ef4:	4d0d      	ldr	r5, [pc, #52]	; (1f2c <i2cCommandHandlerInit+0x4c>)
    1ef6:	47a8      	blx	r5
	i2c_s_async_register_callback(&I2C_0, I2C_S_TX_PENDING, I2C_0_tx_pending);
    1ef8:	4a0d      	ldr	r2, [pc, #52]	; (1f30 <i2cCommandHandlerInit+0x50>)
    1efa:	2101      	movs	r1, #1
    1efc:	0020      	movs	r0, r4
    1efe:	47a8      	blx	r5
	i2c_s_async_register_callback(&I2C_0, I2C_S_ERROR, I2C_0_error);
    1f00:	4a0c      	ldr	r2, [pc, #48]	; (1f34 <i2cCommandHandlerInit+0x54>)
    1f02:	2100      	movs	r1, #0
    1f04:	0020      	movs	r0, r4
    1f06:	47a8      	blx	r5
	i2c_s_async_enable(&I2C_0);
    1f08:	0020      	movs	r0, r4
    1f0a:	4b0b      	ldr	r3, [pc, #44]	; (1f38 <i2cCommandHandlerInit+0x58>)
    1f0c:	4798      	blx	r3
	i2c_s_async_set_addr(&I2C_0, geti2cAddress());
    1f0e:	4b0b      	ldr	r3, [pc, #44]	; (1f3c <i2cCommandHandlerInit+0x5c>)
    1f10:	4798      	blx	r3
    1f12:	b281      	uxth	r1, r0
    1f14:	0020      	movs	r0, r4
    1f16:	4b0a      	ldr	r3, [pc, #40]	; (1f40 <i2cCommandHandlerInit+0x60>)
    1f18:	4798      	blx	r3
}
    1f1a:	bd70      	pop	{r4, r5, r6, pc}
    1f1c:	20000284 	.word	0x20000284
    1f20:	20000178 	.word	0x20000178
    1f24:	00000bb1 	.word	0x00000bb1
    1f28:	00001e51 	.word	0x00001e51
    1f2c:	00000b59 	.word	0x00000b59
    1f30:	00001d75 	.word	0x00001d75
    1f34:	00001d51 	.word	0x00001d51
    1f38:	00000ab9 	.word	0x00000ab9
    1f3c:	00001db5 	.word	0x00001db5
    1f40:	00000b15 	.word	0x00000b15

00001f44 <i2cSWReset>:
{
    1f44:	b510      	push	{r4, lr}
	i2cFailed = false;
    1f46:	2200      	movs	r2, #0
    1f48:	4b03      	ldr	r3, [pc, #12]	; (1f58 <i2cSWReset+0x14>)
    1f4a:	701a      	strb	r2, [r3, #0]
	I2C_0_init();
    1f4c:	4b03      	ldr	r3, [pc, #12]	; (1f5c <i2cSWReset+0x18>)
    1f4e:	4798      	blx	r3
	i2cCommandHandlerInit();
    1f50:	4b03      	ldr	r3, [pc, #12]	; (1f60 <i2cSWReset+0x1c>)
    1f52:	4798      	blx	r3
}
    1f54:	bd10      	pop	{r4, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	20000178 	.word	0x20000178
    1f5c:	00000281 	.word	0x00000281
    1f60:	00001ee1 	.word	0x00001ee1

00001f64 <main>:
#include "switch-handler.h"
#include "i2c-cmd-handler.h"
#include "timer.h"

int main(void)
{
    1f64:	b570      	push	{r4, r5, r6, lr}
	/* Initializes MCU, drivers and middle-ware */
	atmel_start_init();
    1f66:	4b07      	ldr	r3, [pc, #28]	; (1f84 <main+0x20>)
    1f68:	4798      	blx	r3
	switchHandlerInit();
    1f6a:	4b07      	ldr	r3, [pc, #28]	; (1f88 <main+0x24>)
    1f6c:	4798      	blx	r3
	timerInit();
    1f6e:	4b07      	ldr	r3, [pc, #28]	; (1f8c <main+0x28>)
    1f70:	4798      	blx	r3
	i2cSWReset();
    1f72:	4b07      	ldr	r3, [pc, #28]	; (1f90 <main+0x2c>)
    1f74:	4798      	blx	r3


	/* Replace with your application code */
	while (1) {
		// check for communications errors
		if(i2cFailure())
    1f76:	4c07      	ldr	r4, [pc, #28]	; (1f94 <main+0x30>)
		{
			i2cSWReset();
    1f78:	4d05      	ldr	r5, [pc, #20]	; (1f90 <main+0x2c>)
		if(i2cFailure())
    1f7a:	47a0      	blx	r4
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d0fc      	beq.n	1f7a <main+0x16>
			i2cSWReset();
    1f80:	47a8      	blx	r5
    1f82:	e7fa      	b.n	1f7a <main+0x16>
    1f84:	00000115 	.word	0x00000115
    1f88:	00001fe1 	.word	0x00001fe1
    1f8c:	00002141 	.word	0x00002141
    1f90:	00001f45 	.word	0x00001f45
    1f94:	00001da9 	.word	0x00001da9

00001f98 <getLatchedSwitchesBlockState>:
} switches[BLOCK_COUNT][SWITCH_COUNT]; // each block has switches



uint16_t getLatchedSwitchesBlockState(uint8_t aBlock)
{
    1f98:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t retVal = 0;
    1f9a:	2100      	movs	r1, #0
	if(aBlock < BLOCK_COUNT)
    1f9c:	2800      	cmp	r0, #0
    1f9e:	d118      	bne.n	1fd2 <getLatchedSwitchesBlockState+0x3a>
			if(switches[aBlock][i].lastDebouncedState)
				retVal |= (1 << i);
			
			// start looking for a state change if we were debounced
			if(switches[aBlock][i].debounceCounter == 0)
				switches[aBlock][i].debounceCounter = debounceRetries;
    1fa0:	4b0d      	ldr	r3, [pc, #52]	; (1fd8 <getLatchedSwitchesBlockState+0x40>)
    1fa2:	2600      	movs	r6, #0
    1fa4:	5f9e      	ldrsh	r6, [r3, r6]
    1fa6:	4b0d      	ldr	r3, [pc, #52]	; (1fdc <getLatchedSwitchesBlockState+0x44>)
    1fa8:	2200      	movs	r2, #0
				retVal |= (1 << i);
    1faa:	2501      	movs	r5, #1
    1fac:	e003      	b.n	1fb6 <getLatchedSwitchesBlockState+0x1e>
    1fae:	3201      	adds	r2, #1
    1fb0:	3304      	adds	r3, #4
		for (uint8_t i=0; i<SWITCH_COUNT; i++)
    1fb2:	2a06      	cmp	r2, #6
    1fb4:	d00d      	beq.n	1fd2 <getLatchedSwitchesBlockState+0x3a>
    1fb6:	001c      	movs	r4, r3
			if(switches[aBlock][i].lastDebouncedState)
    1fb8:	7898      	ldrb	r0, [r3, #2]
    1fba:	2800      	cmp	r0, #0
    1fbc:	d003      	beq.n	1fc6 <getLatchedSwitchesBlockState+0x2e>
				retVal |= (1 << i);
    1fbe:	0028      	movs	r0, r5
    1fc0:	4090      	lsls	r0, r2
    1fc2:	4301      	orrs	r1, r0
    1fc4:	b289      	uxth	r1, r1
			if(switches[aBlock][i].debounceCounter == 0)
    1fc6:	2700      	movs	r7, #0
    1fc8:	5fe0      	ldrsh	r0, [r4, r7]
    1fca:	2800      	cmp	r0, #0
    1fcc:	d1ef      	bne.n	1fae <getLatchedSwitchesBlockState+0x16>
				switches[aBlock][i].debounceCounter = debounceRetries;
    1fce:	8026      	strh	r6, [r4, #0]
    1fd0:	e7ed      	b.n	1fae <getLatchedSwitchesBlockState+0x16>
		}
	}
	return retVal;
}
    1fd2:	0008      	movs	r0, r1
    1fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	2000013a 	.word	0x2000013a
    1fdc:	2000033c 	.word	0x2000033c

00001fe0 <switchHandlerInit>:

void switchHandlerInit(void)
{
    1fe0:	b510      	push	{r4, lr}
		for (uint8_t aSwitch=0; aSwitch<SWITCH_COUNT; aSwitch++)
		{
			// set an arbitrary initial value, it will be correct after debounceRetries
			switches[aBlock][aSwitch].lastDebouncedState = false;
			// start debouncing to make sure we see any change
			switches[aBlock][aSwitch].debounceCounter = debounceRetries;
    1fe2:	4b0d      	ldr	r3, [pc, #52]	; (2018 <switchHandlerInit+0x38>)
    1fe4:	2000      	movs	r0, #0
    1fe6:	5e18      	ldrsh	r0, [r3, r0]
    1fe8:	4b0c      	ldr	r3, [pc, #48]	; (201c <switchHandlerInit+0x3c>)
    1fea:	0019      	movs	r1, r3
    1fec:	3118      	adds	r1, #24
			switches[aBlock][aSwitch].lastDebouncedState = false;
    1fee:	2200      	movs	r2, #0
    1ff0:	709a      	strb	r2, [r3, #2]
			switches[aBlock][aSwitch].debounceCounter = debounceRetries;
    1ff2:	8018      	strh	r0, [r3, #0]
    1ff4:	3304      	adds	r3, #4
		for (uint8_t aSwitch=0; aSwitch<SWITCH_COUNT; aSwitch++)
    1ff6:	4299      	cmp	r1, r3
    1ff8:	d1fa      	bne.n	1ff0 <switchHandlerInit+0x10>
		}
	}
	switchHandlerTimerTask.interval = 1;
    1ffa:	4909      	ldr	r1, [pc, #36]	; (2020 <switchHandlerInit+0x40>)
    1ffc:	2301      	movs	r3, #1
    1ffe:	608b      	str	r3, [r1, #8]
	switchHandlerTimerTask.cb       = switchHandler;
    2000:	4a08      	ldr	r2, [pc, #32]	; (2024 <switchHandlerInit+0x44>)
    2002:	60ca      	str	r2, [r1, #12]
	switchHandlerTimerTask.mode     = TIMER_TASK_REPEAT;
    2004:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TIMER_0, &switchHandlerTimerTask);
    2006:	4c08      	ldr	r4, [pc, #32]	; (2028 <switchHandlerInit+0x48>)
    2008:	0020      	movs	r0, r4
    200a:	4b08      	ldr	r3, [pc, #32]	; (202c <switchHandlerInit+0x4c>)
    200c:	4798      	blx	r3
	timer_start(&TIMER_0);
    200e:	0020      	movs	r0, r4
    2010:	4b07      	ldr	r3, [pc, #28]	; (2030 <switchHandlerInit+0x50>)
    2012:	4798      	blx	r3

}
    2014:	bd10      	pop	{r4, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	2000013a 	.word	0x2000013a
    201c:	2000033c 	.word	0x2000033c
    2020:	20000184 	.word	0x20000184
    2024:	0000207d 	.word	0x0000207d
    2028:	200002dc 	.word	0x200002dc
    202c:	00000e29 	.word	0x00000e29
    2030:	00000ded 	.word	0x00000ded

00002034 <updateSwitch>:

void updateSwitch(uint8_t aBlock, uint8_t aSwitchIndex, bool aCurrentSwitchState)
{
    2034:	b510      	push	{r4, lr}
	if(aBlock < BLOCK_COUNT && aSwitchIndex < SWITCH_COUNT)
    2036:	2800      	cmp	r0, #0
    2038:	d115      	bne.n	2066 <updateSwitch+0x32>
    203a:	2905      	cmp	r1, #5
    203c:	d813      	bhi.n	2066 <updateSwitch+0x32>
	{
		struct sSwitches *aSwitch = &(switches[aBlock][aSwitchIndex]);
		if(aSwitch != NULL)
		{
			if(aSwitch->debounceCounter > 0)
    203e:	008b      	lsls	r3, r1, #2
    2040:	480c      	ldr	r0, [pc, #48]	; (2074 <updateSwitch+0x40>)
    2042:	5e1b      	ldrsh	r3, [r3, r0]
    2044:	2b00      	cmp	r3, #0
    2046:	dd0e      	ble.n	2066 <updateSwitch+0x32>
			{
				// is the current state different than the last reported one?
				if(aSwitch->lastDebouncedState != aCurrentSwitchState)
    2048:	008c      	lsls	r4, r1, #2
    204a:	480a      	ldr	r0, [pc, #40]	; (2074 <updateSwitch+0x40>)
    204c:	1900      	adds	r0, r0, r4
    204e:	7880      	ldrb	r0, [r0, #2]
    2050:	4290      	cmp	r0, r2
    2052:	d009      	beq.n	2068 <updateSwitch+0x34>
				{
					aSwitch->debounceCounter--;
    2054:	3b01      	subs	r3, #1
    2056:	b21b      	sxth	r3, r3
    2058:	0020      	movs	r0, r4
    205a:	4c06      	ldr	r4, [pc, #24]	; (2074 <updateSwitch+0x40>)
    205c:	5303      	strh	r3, [r0, r4]
					// can we finally keep our new state because we are fully debounced?
					if(aSwitch->debounceCounter == 0)
    205e:	2b00      	cmp	r3, #0
    2060:	d101      	bne.n	2066 <updateSwitch+0x32>
					{
						// save the fully debounced state
						aSwitch->lastDebouncedState = aCurrentSwitchState;
    2062:	1821      	adds	r1, r4, r0
    2064:	708a      	strb	r2, [r1, #2]
				else // current state is the same as last reported, restart any begun debounce
					aSwitch->debounceCounter = debounceRetries;
			}
		}
	}
}
    2066:	bd10      	pop	{r4, pc}
					aSwitch->debounceCounter = debounceRetries;
    2068:	0089      	lsls	r1, r1, #2
    206a:	4b03      	ldr	r3, [pc, #12]	; (2078 <updateSwitch+0x44>)
    206c:	881a      	ldrh	r2, [r3, #0]
    206e:	4b01      	ldr	r3, [pc, #4]	; (2074 <updateSwitch+0x40>)
    2070:	52ca      	strh	r2, [r1, r3]
}
    2072:	e7f8      	b.n	2066 <updateSwitch+0x32>
    2074:	2000033c 	.word	0x2000033c
    2078:	2000013a 	.word	0x2000013a

0000207c <switchHandler>:

void switchHandler(const struct timer_task *const timer_task)
{
    207c:	b5f0      	push	{r4, r5, r6, r7, lr}
    207e:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2080:	26c0      	movs	r6, #192	; 0xc0
    2082:	05f6      	lsls	r6, r6, #23
    2084:	2380      	movs	r3, #128	; 0x80
    2086:	055b      	lsls	r3, r3, #21
    2088:	61f3      	str	r3, [r6, #28]
	CRITICAL_SECTION_ENTER();
    208a:	a801      	add	r0, sp, #4
    208c:	4b17      	ldr	r3, [pc, #92]	; (20ec <switchHandler+0x70>)
    208e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2090:	6834      	ldr	r4, [r6, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2092:	4b17      	ldr	r3, [pc, #92]	; (20f0 <switchHandler+0x74>)
    2094:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2096:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2098:	405d      	eors	r5, r3
    209a:	402c      	ands	r4, r5
    209c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    209e:	a801      	add	r0, sp, #4
    20a0:	4b14      	ldr	r3, [pc, #80]	; (20f4 <switchHandler+0x78>)
    20a2:	4798      	blx	r3
	gpio_toggle_pin_level(Alive);

	// BLOCK 0 - direct connected switches
	uint32_t mcuPort = gpio_get_port_level(GPIO_PORTA);
	uint16_t directSwitches = (uint16_t)(((mcuPort & 0x00000040) >> 6) | ((mcuPort & 0x00040000) >> 17) | ((mcuPort & 0x00080000) >> 17) | ((mcuPort & 0x00400000) >> 19)  | ((mcuPort & 0x01000000) >> 20)  | ((mcuPort & 0x08000000) >> 22));
    20a4:	0c61      	lsrs	r1, r4, #17
    20a6:	0665      	lsls	r5, r4, #25
    20a8:	0fed      	lsrs	r5, r5, #31
    20aa:	2202      	movs	r2, #2
    20ac:	400a      	ands	r2, r1
    20ae:	4315      	orrs	r5, r2
    20b0:	2304      	movs	r3, #4
    20b2:	400b      	ands	r3, r1
    20b4:	431d      	orrs	r5, r3
    20b6:	0ce2      	lsrs	r2, r4, #19
    20b8:	2308      	movs	r3, #8
    20ba:	4013      	ands	r3, r2
    20bc:	431d      	orrs	r5, r3
    20be:	0d22      	lsrs	r2, r4, #20
    20c0:	2310      	movs	r3, #16
    20c2:	4013      	ands	r3, r2
    20c4:	431d      	orrs	r5, r3
    20c6:	0da4      	lsrs	r4, r4, #22
    20c8:	2320      	movs	r3, #32
    20ca:	401c      	ands	r4, r3
    20cc:	4325      	orrs	r5, r4
    20ce:	2400      	movs	r4, #0
	for (uint8_t i=0; i<SWITCH_COUNT; i++)
	{
		bool aCurrentSwitchState = ((directSwitches >> i) & 1 ? true : false);
    20d0:	2701      	movs	r7, #1
		updateSwitch(BLOCK_GPIO_PORTA, i, aCurrentSwitchState);
    20d2:	4e09      	ldr	r6, [pc, #36]	; (20f8 <switchHandler+0x7c>)
		bool aCurrentSwitchState = ((directSwitches >> i) & 1 ? true : false);
    20d4:	002a      	movs	r2, r5
    20d6:	4122      	asrs	r2, r4
		updateSwitch(BLOCK_GPIO_PORTA, i, aCurrentSwitchState);
    20d8:	403a      	ands	r2, r7
    20da:	b2e1      	uxtb	r1, r4
    20dc:	2000      	movs	r0, #0
    20de:	47b0      	blx	r6
    20e0:	3401      	adds	r4, #1
	for (uint8_t i=0; i<SWITCH_COUNT; i++)
    20e2:	2c06      	cmp	r4, #6
    20e4:	d1f6      	bne.n	20d4 <switchHandler+0x58>
	}
}
    20e6:	b003      	add	sp, #12
    20e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	00000839 	.word	0x00000839
    20f0:	41004400 	.word	0x41004400
    20f4:	00000847 	.word	0x00000847
    20f8:	00002035 	.word	0x00002035

000020fc <LEDTimerCB>:

static struct timer_task ledTimerTask;

static void LEDTimerCB (const struct timer_task *const timer_task)
{
	if( (delayTimer != 0) )
    20fc:	4b0d      	ldr	r3, [pc, #52]	; (2134 <LEDTimerCB+0x38>)
    20fe:	681b      	ldr	r3, [r3, #0]
    2100:	2b00      	cmp	r3, #0
    2102:	d002      	beq.n	210a <LEDTimerCB+0xe>
	{
		delayTimer--;
    2104:	3b01      	subs	r3, #1
    2106:	4a0b      	ldr	r2, [pc, #44]	; (2134 <LEDTimerCB+0x38>)
    2108:	6013      	str	r3, [r2, #0]
	}

	for( uint8_t i=0; i<numTimers; i++ )
    210a:	4b0b      	ldr	r3, [pc, #44]	; (2138 <LEDTimerCB+0x3c>)
    210c:	781a      	ldrb	r2, [r3, #0]
    210e:	2a00      	cmp	r2, #0
    2110:	d00f      	beq.n	2132 <LEDTimerCB+0x36>
    2112:	4b0a      	ldr	r3, [pc, #40]	; (213c <LEDTimerCB+0x40>)
    2114:	3a01      	subs	r2, #1
    2116:	b2d1      	uxtb	r1, r2
    2118:	3101      	adds	r1, #1
    211a:	0089      	lsls	r1, r1, #2
    211c:	18c9      	adds	r1, r1, r3
    211e:	e002      	b.n	2126 <LEDTimerCB+0x2a>
    2120:	3304      	adds	r3, #4
    2122:	428b      	cmp	r3, r1
    2124:	d005      	beq.n	2132 <LEDTimerCB+0x36>
	{
		if(timers[i] != 0 && timers[i] != LOCKED_TIMER)
    2126:	681a      	ldr	r2, [r3, #0]
    2128:	3a01      	subs	r2, #1
    212a:	1cd0      	adds	r0, r2, #3
    212c:	d8f8      	bhi.n	2120 <LEDTimerCB+0x24>
		{
			timers[i]--;
    212e:	601a      	str	r2, [r3, #0]
    2130:	e7f6      	b.n	2120 <LEDTimerCB+0x24>
		}
	}
}
    2132:	4770      	bx	lr
    2134:	20000394 	.word	0x20000394
    2138:	20000198 	.word	0x20000198
    213c:	20000354 	.word	0x20000354

00002140 <timerInit>:

void timerInit( void )
{
    2140:	b510      	push	{r4, lr}

	ledTimerTask.interval = 1;
    2142:	4907      	ldr	r1, [pc, #28]	; (2160 <timerInit+0x20>)
    2144:	2301      	movs	r3, #1
    2146:	60cb      	str	r3, [r1, #12]
	ledTimerTask.cb       = LEDTimerCB;
    2148:	4a06      	ldr	r2, [pc, #24]	; (2164 <timerInit+0x24>)
    214a:	610a      	str	r2, [r1, #16]
	ledTimerTask.mode     = TIMER_TASK_REPEAT;
    214c:	750b      	strb	r3, [r1, #20]

	timer_add_task(&TIMER_0, &ledTimerTask);
    214e:	3104      	adds	r1, #4
    2150:	4c05      	ldr	r4, [pc, #20]	; (2168 <timerInit+0x28>)
    2152:	0020      	movs	r0, r4
    2154:	4b05      	ldr	r3, [pc, #20]	; (216c <timerInit+0x2c>)
    2156:	4798      	blx	r3
	timer_start(&TIMER_0);
    2158:	0020      	movs	r0, r4
    215a:	4b05      	ldr	r3, [pc, #20]	; (2170 <timerInit+0x30>)
    215c:	4798      	blx	r3
}
    215e:	bd10      	pop	{r4, pc}
    2160:	20000198 	.word	0x20000198
    2164:	000020fd 	.word	0x000020fd
    2168:	200002dc 	.word	0x200002dc
    216c:	00000e29 	.word	0x00000e29
    2170:	00000ded 	.word	0x00000ded

00002174 <__udivsi3>:
    2174:	2200      	movs	r2, #0
    2176:	0843      	lsrs	r3, r0, #1
    2178:	428b      	cmp	r3, r1
    217a:	d374      	bcc.n	2266 <__udivsi3+0xf2>
    217c:	0903      	lsrs	r3, r0, #4
    217e:	428b      	cmp	r3, r1
    2180:	d35f      	bcc.n	2242 <__udivsi3+0xce>
    2182:	0a03      	lsrs	r3, r0, #8
    2184:	428b      	cmp	r3, r1
    2186:	d344      	bcc.n	2212 <__udivsi3+0x9e>
    2188:	0b03      	lsrs	r3, r0, #12
    218a:	428b      	cmp	r3, r1
    218c:	d328      	bcc.n	21e0 <__udivsi3+0x6c>
    218e:	0c03      	lsrs	r3, r0, #16
    2190:	428b      	cmp	r3, r1
    2192:	d30d      	bcc.n	21b0 <__udivsi3+0x3c>
    2194:	22ff      	movs	r2, #255	; 0xff
    2196:	0209      	lsls	r1, r1, #8
    2198:	ba12      	rev	r2, r2
    219a:	0c03      	lsrs	r3, r0, #16
    219c:	428b      	cmp	r3, r1
    219e:	d302      	bcc.n	21a6 <__udivsi3+0x32>
    21a0:	1212      	asrs	r2, r2, #8
    21a2:	0209      	lsls	r1, r1, #8
    21a4:	d065      	beq.n	2272 <__udivsi3+0xfe>
    21a6:	0b03      	lsrs	r3, r0, #12
    21a8:	428b      	cmp	r3, r1
    21aa:	d319      	bcc.n	21e0 <__udivsi3+0x6c>
    21ac:	e000      	b.n	21b0 <__udivsi3+0x3c>
    21ae:	0a09      	lsrs	r1, r1, #8
    21b0:	0bc3      	lsrs	r3, r0, #15
    21b2:	428b      	cmp	r3, r1
    21b4:	d301      	bcc.n	21ba <__udivsi3+0x46>
    21b6:	03cb      	lsls	r3, r1, #15
    21b8:	1ac0      	subs	r0, r0, r3
    21ba:	4152      	adcs	r2, r2
    21bc:	0b83      	lsrs	r3, r0, #14
    21be:	428b      	cmp	r3, r1
    21c0:	d301      	bcc.n	21c6 <__udivsi3+0x52>
    21c2:	038b      	lsls	r3, r1, #14
    21c4:	1ac0      	subs	r0, r0, r3
    21c6:	4152      	adcs	r2, r2
    21c8:	0b43      	lsrs	r3, r0, #13
    21ca:	428b      	cmp	r3, r1
    21cc:	d301      	bcc.n	21d2 <__udivsi3+0x5e>
    21ce:	034b      	lsls	r3, r1, #13
    21d0:	1ac0      	subs	r0, r0, r3
    21d2:	4152      	adcs	r2, r2
    21d4:	0b03      	lsrs	r3, r0, #12
    21d6:	428b      	cmp	r3, r1
    21d8:	d301      	bcc.n	21de <__udivsi3+0x6a>
    21da:	030b      	lsls	r3, r1, #12
    21dc:	1ac0      	subs	r0, r0, r3
    21de:	4152      	adcs	r2, r2
    21e0:	0ac3      	lsrs	r3, r0, #11
    21e2:	428b      	cmp	r3, r1
    21e4:	d301      	bcc.n	21ea <__udivsi3+0x76>
    21e6:	02cb      	lsls	r3, r1, #11
    21e8:	1ac0      	subs	r0, r0, r3
    21ea:	4152      	adcs	r2, r2
    21ec:	0a83      	lsrs	r3, r0, #10
    21ee:	428b      	cmp	r3, r1
    21f0:	d301      	bcc.n	21f6 <__udivsi3+0x82>
    21f2:	028b      	lsls	r3, r1, #10
    21f4:	1ac0      	subs	r0, r0, r3
    21f6:	4152      	adcs	r2, r2
    21f8:	0a43      	lsrs	r3, r0, #9
    21fa:	428b      	cmp	r3, r1
    21fc:	d301      	bcc.n	2202 <__udivsi3+0x8e>
    21fe:	024b      	lsls	r3, r1, #9
    2200:	1ac0      	subs	r0, r0, r3
    2202:	4152      	adcs	r2, r2
    2204:	0a03      	lsrs	r3, r0, #8
    2206:	428b      	cmp	r3, r1
    2208:	d301      	bcc.n	220e <__udivsi3+0x9a>
    220a:	020b      	lsls	r3, r1, #8
    220c:	1ac0      	subs	r0, r0, r3
    220e:	4152      	adcs	r2, r2
    2210:	d2cd      	bcs.n	21ae <__udivsi3+0x3a>
    2212:	09c3      	lsrs	r3, r0, #7
    2214:	428b      	cmp	r3, r1
    2216:	d301      	bcc.n	221c <__udivsi3+0xa8>
    2218:	01cb      	lsls	r3, r1, #7
    221a:	1ac0      	subs	r0, r0, r3
    221c:	4152      	adcs	r2, r2
    221e:	0983      	lsrs	r3, r0, #6
    2220:	428b      	cmp	r3, r1
    2222:	d301      	bcc.n	2228 <__udivsi3+0xb4>
    2224:	018b      	lsls	r3, r1, #6
    2226:	1ac0      	subs	r0, r0, r3
    2228:	4152      	adcs	r2, r2
    222a:	0943      	lsrs	r3, r0, #5
    222c:	428b      	cmp	r3, r1
    222e:	d301      	bcc.n	2234 <__udivsi3+0xc0>
    2230:	014b      	lsls	r3, r1, #5
    2232:	1ac0      	subs	r0, r0, r3
    2234:	4152      	adcs	r2, r2
    2236:	0903      	lsrs	r3, r0, #4
    2238:	428b      	cmp	r3, r1
    223a:	d301      	bcc.n	2240 <__udivsi3+0xcc>
    223c:	010b      	lsls	r3, r1, #4
    223e:	1ac0      	subs	r0, r0, r3
    2240:	4152      	adcs	r2, r2
    2242:	08c3      	lsrs	r3, r0, #3
    2244:	428b      	cmp	r3, r1
    2246:	d301      	bcc.n	224c <__udivsi3+0xd8>
    2248:	00cb      	lsls	r3, r1, #3
    224a:	1ac0      	subs	r0, r0, r3
    224c:	4152      	adcs	r2, r2
    224e:	0883      	lsrs	r3, r0, #2
    2250:	428b      	cmp	r3, r1
    2252:	d301      	bcc.n	2258 <__udivsi3+0xe4>
    2254:	008b      	lsls	r3, r1, #2
    2256:	1ac0      	subs	r0, r0, r3
    2258:	4152      	adcs	r2, r2
    225a:	0843      	lsrs	r3, r0, #1
    225c:	428b      	cmp	r3, r1
    225e:	d301      	bcc.n	2264 <__udivsi3+0xf0>
    2260:	004b      	lsls	r3, r1, #1
    2262:	1ac0      	subs	r0, r0, r3
    2264:	4152      	adcs	r2, r2
    2266:	1a41      	subs	r1, r0, r1
    2268:	d200      	bcs.n	226c <__udivsi3+0xf8>
    226a:	4601      	mov	r1, r0
    226c:	4152      	adcs	r2, r2
    226e:	4610      	mov	r0, r2
    2270:	4770      	bx	lr
    2272:	e7ff      	b.n	2274 <__udivsi3+0x100>
    2274:	b501      	push	{r0, lr}
    2276:	2000      	movs	r0, #0
    2278:	f000 f806 	bl	2288 <__aeabi_idiv0>
    227c:	bd02      	pop	{r1, pc}
    227e:	46c0      	nop			; (mov r8, r8)

00002280 <__aeabi_uidivmod>:
    2280:	2900      	cmp	r1, #0
    2282:	d0f7      	beq.n	2274 <__udivsi3+0x100>
    2284:	e776      	b.n	2174 <__udivsi3>
    2286:	4770      	bx	lr

00002288 <__aeabi_idiv0>:
    2288:	4770      	bx	lr
    228a:	46c0      	nop			; (mov r8, r8)

0000228c <__libc_init_array>:
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	2600      	movs	r6, #0
    2290:	4d0c      	ldr	r5, [pc, #48]	; (22c4 <__libc_init_array+0x38>)
    2292:	4c0d      	ldr	r4, [pc, #52]	; (22c8 <__libc_init_array+0x3c>)
    2294:	1b64      	subs	r4, r4, r5
    2296:	10a4      	asrs	r4, r4, #2
    2298:	42a6      	cmp	r6, r4
    229a:	d109      	bne.n	22b0 <__libc_init_array+0x24>
    229c:	2600      	movs	r6, #0
    229e:	f000 f8c3 	bl	2428 <_init>
    22a2:	4d0a      	ldr	r5, [pc, #40]	; (22cc <__libc_init_array+0x40>)
    22a4:	4c0a      	ldr	r4, [pc, #40]	; (22d0 <__libc_init_array+0x44>)
    22a6:	1b64      	subs	r4, r4, r5
    22a8:	10a4      	asrs	r4, r4, #2
    22aa:	42a6      	cmp	r6, r4
    22ac:	d105      	bne.n	22ba <__libc_init_array+0x2e>
    22ae:	bd70      	pop	{r4, r5, r6, pc}
    22b0:	00b3      	lsls	r3, r6, #2
    22b2:	58eb      	ldr	r3, [r5, r3]
    22b4:	4798      	blx	r3
    22b6:	3601      	adds	r6, #1
    22b8:	e7ee      	b.n	2298 <__libc_init_array+0xc>
    22ba:	00b3      	lsls	r3, r6, #2
    22bc:	58eb      	ldr	r3, [r5, r3]
    22be:	4798      	blx	r3
    22c0:	3601      	adds	r6, #1
    22c2:	e7f2      	b.n	22aa <__libc_init_array+0x1e>
    22c4:	00002434 	.word	0x00002434
    22c8:	00002434 	.word	0x00002434
    22cc:	00002434 	.word	0x00002434
    22d0:	00002438 	.word	0x00002438
    22d4:	682f2e2e 	.word	0x682f2e2e
    22d8:	692f6c61 	.word	0x692f6c61
    22dc:	756c636e 	.word	0x756c636e
    22e0:	682f6564 	.word	0x682f6564
    22e4:	775f6c61 	.word	0x775f6c61
    22e8:	682e7464 	.word	0x682e7464
    22ec:	00000000 	.word	0x00000000
    22f0:	00000b7a 	.word	0x00000b7a
    22f4:	00000b80 	.word	0x00000b80
    22f8:	00000b86 	.word	0x00000b86
    22fc:	00000b8c 	.word	0x00000b8c
    2300:	00000b92 	.word	0x00000b92
    2304:	00000b98 	.word	0x00000b98
    2308:	682f2e2e 	.word	0x682f2e2e
    230c:	732f6c61 	.word	0x732f6c61
    2310:	682f6372 	.word	0x682f6372
    2314:	695f6c61 	.word	0x695f6c61
    2318:	735f6332 	.word	0x735f6332
    231c:	7973615f 	.word	0x7973615f
    2320:	632e636e 	.word	0x632e636e
    2324:	00000000 	.word	0x00000000
    2328:	682f2e2e 	.word	0x682f2e2e
    232c:	732f6c61 	.word	0x732f6c61
    2330:	682f6372 	.word	0x682f6372
    2334:	695f6c61 	.word	0x695f6c61
    2338:	00632e6f 	.word	0x00632e6f
    233c:	682f2e2e 	.word	0x682f2e2e
    2340:	732f6c61 	.word	0x732f6c61
    2344:	682f6372 	.word	0x682f6372
    2348:	705f6c61 	.word	0x705f6c61
    234c:	632e6d77 	.word	0x632e6d77
    2350:	00000000 	.word	0x00000000
    2354:	682f2e2e 	.word	0x682f2e2e
    2358:	732f6c61 	.word	0x732f6c61
    235c:	682f6372 	.word	0x682f6372
    2360:	745f6c61 	.word	0x745f6c61
    2364:	72656d69 	.word	0x72656d69
    2368:	0000632e 	.word	0x0000632e
    236c:	682f2e2e 	.word	0x682f2e2e
    2370:	752f6c61 	.word	0x752f6c61
    2374:	736c6974 	.word	0x736c6974
    2378:	6372732f 	.word	0x6372732f
    237c:	6974752f 	.word	0x6974752f
    2380:	6c5f736c 	.word	0x6c5f736c
    2384:	2e747369 	.word	0x2e747369
    2388:	00000063 	.word	0x00000063
    238c:	682f2e2e 	.word	0x682f2e2e
    2390:	752f6c61 	.word	0x752f6c61
    2394:	736c6974 	.word	0x736c6974
    2398:	6372732f 	.word	0x6372732f
    239c:	6974752f 	.word	0x6974752f
    23a0:	725f736c 	.word	0x725f736c
    23a4:	62676e69 	.word	0x62676e69
    23a8:	65666675 	.word	0x65666675
    23ac:	00632e72 	.word	0x00632e72
    23b0:	682f2e2e 	.word	0x682f2e2e
    23b4:	722f6c70 	.word	0x722f6c70
    23b8:	682f6374 	.word	0x682f6374
    23bc:	725f6c70 	.word	0x725f6c70
    23c0:	632e6374 	.word	0x632e6374
    23c4:	00000000 	.word	0x00000000
    23c8:	682f2e2e 	.word	0x682f2e2e
    23cc:	732f6c70 	.word	0x732f6c70
    23d0:	6f637265 	.word	0x6f637265
    23d4:	70682f6d 	.word	0x70682f6d
    23d8:	65735f6c 	.word	0x65735f6c
    23dc:	6d6f6372 	.word	0x6d6f6372
    23e0:	0000632e 	.word	0x0000632e
    23e4:	682f2e2e 	.word	0x682f2e2e
    23e8:	742f6c70 	.word	0x742f6c70
    23ec:	682f6363 	.word	0x682f6363
    23f0:	745f6c70 	.word	0x745f6c70
    23f4:	632e6363 	.word	0x632e6363
    23f8:	00000000 	.word	0x00000000
    23fc:	682f2e2e 	.word	0x682f2e2e
    2400:	742f6c70 	.word	0x742f6c70
    2404:	70682f63 	.word	0x70682f63
    2408:	63745f6c 	.word	0x63745f6c
    240c:	0000632e 	.word	0x0000632e
    2410:	682f2e2e 	.word	0x682f2e2e
    2414:	772f6c70 	.word	0x772f6c70
    2418:	682f7464 	.word	0x682f7464
    241c:	775f6c70 	.word	0x775f6c70
    2420:	632e7464 	.word	0x632e7464
    2424:	00000000 	.word	0x00000000

00002428 <_init>:
    2428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    242e:	bc08      	pop	{r3}
    2430:	469e      	mov	lr, r3
    2432:	4770      	bx	lr

00002434 <__init_array_start>:
    2434:	000000dd 	.word	0x000000dd

00002438 <_fini>:
    2438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    243e:	bc08      	pop	{r3}
    2440:	469e      	mov	lr, r3
    2442:	4770      	bx	lr

00002444 <__fini_array_start>:
    2444:	000000b5 	.word	0x000000b5
